<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo+Node+Git搭建博客]]></title>
    <url>%2F2018%2F12%2F03%2FHexo-Node-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[从零开始搭建博客第一部分，Github注册及Github Pages建立 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。一：注册Github1：打开Github首页，点击Sign up 进行注册。 二：Github Pages 静态网页建立1：在新页面点击 NEW 按钮，创建属于自己的新仓库。 2: 点击 Code3: 点击 Create new file4: 输入 index.html，在 Edit new file 书写内容。5：点击 Commit new file 进行创建。6：用浏览器打开 用户名.github.ioGithub Pages 静态网页建立完成。 三：Hexo博客本地环境安装1: 安装 Node2: 安装 Git4: 初始化 Hexo 电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。 空白处右键点击 Git Bash Here 安装 Hexo1$ npm install -g hexo-cli 等待运行完成后依次输入以下命令 123$ hexo init &lt;新建文件夹的名称&gt;$ cd &lt;新建文件夹的名称&gt;$ npm install 注意:后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。 此时Hexo框架的本地搭建已经完成了。我们来运行一下看看： 命令行依次输入以下命令: 12$ hexo g$ hexo s 浏览器中打开(http://locakhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行。 四：本地博客发布到Github Pages1：需要在Github上创建好Github Pages仓库2：安装将 Hexo 部署到 Git 的插件 在站点目录中运行命令行输入 npm install hexo-deployer-git --save 后续还要安装各种插件，实现博客的各种功能。等待插件安装完成 3：将本地目录与Github关联起来 命令行输入 1$ ssh-keygen -t rsa -C "邮箱地址" 1： 这里要输入之前注册Github时的邮箱，例如我之前注册用的是 123@qq.com，那命令行就输入ssh-keygen -t rsa -C “123@qq.com“输入后一直回车。 2：打开 C:\Users\ 用户名，文件夹内寻找 .ssh 文件夹 3：文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Vscode 打开，复制里面的的内容。 4：打开Github 点击右上角的头像 Settings 选择SSH and GPG keys 5：点击 New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击 Add SSH key 完成添加。 6: 此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com，弹出的内容输入yes，看到出现Hi ! You’ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个应该是你Github的用户名。 4: 修改Hexo站点的 _config.yml文件 进入博客文件夹， 找到 _config.yml 博客的配置文件。以后修改博客的样式或内容会多次用到它。 123456789101112# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 123456# URL 网址## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: #修改为https://&lt;用户名&gt;.github.ioroot: / #如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。permalink: :year/:month/:day/:title/ #文章的永久链接格式permalink_defaults: #永久链接中各部分的默认值 在文件底部 deploy 添加如下代码： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: #部署部分的设置type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 5: 保存配置，将生成的本地页面上传至Github 命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。 完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。 注意：也可以直接输入hexo g -d直接完成渲染和上传。 上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。 五：Hexo博客主题安装及Next主题个性化修改基于Next主题的修改和配置 注意：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为_/themes/next/config.yml。 1：主题选择 到 Nexo官网主题页选择喜欢的主题。每个主题配置方法略有不同，建议使用流行主题，推荐Next主题，因为我的博客就是用Next主题搭建的。 2：主题修改主题安装 Next主题文档页面 Nest主题Github页面 博客根目录打开命令行输入 1git clone https://github.com/theme-next/hexo-theme-next themes/next 1：安装完成后，打开 博客配置文件 修改theme 主题： 1234# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next #当前主题名称。值为false时禁用主题 2：修改 主题配置文件 是根目录/themes/next目录下的_config.yml文件。 修改菜单及创建分类页 1:定位到 Hexo 站点目录下,在命令行输入如下命令： 1$ hexo new page tags 新建出标签页 同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 2:设置页面类型：编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 12345---title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 3:修改 主题配置 文件下的menu项： 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 修改主题风格 Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 12345678# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 设置作者头像 编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。 本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg 123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/cat.jpg # If true, the avatar would be dispalyed in circle. rounded: false # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true 设置作者昵称与站点描述12345678# Site 网站title: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 设置代码高亮主题 NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties： 更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如： 1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 侧边栏社交链接 侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。 1234567891011121314151617# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@qq.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。 1234social_icons: enable: true icons_only: false transition: false 开启打赏功能 越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。 123456789# Reward# If true, reward would be displayed in every article by default.# And you can show or hide one article specially through add page variable `reward: true/false`.reward: enable: true comment: 如果觉得文本对您有帮助，欢迎打赏 wechatpay: /images/wechat.png alipay: /images/zhifubao.jpg bitcoin: /images/qq.png 注意：将保存的图片放到 /source/images/图片名称 修改打赏字体不闪动 鼠标一指就疯狂抖动。 修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。 12345#QR &gt; div:hover p &#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; 这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。 开启友情链接 or 侧边栏推荐阅读 主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。 link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接 这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 1234567# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inline#links: #Title: http://example.com]]></content>
      <tags>
        <tag>Hexo+Node+Git搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
