<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[XMind 8永久破解]]></title>
    <url>%2F2018%2F12%2F12%2FXMind%208%2F</url>
    <content type="text"><![CDATA[下载点击XMind官网下载 破解 安装完成后，到百度网盘 ：链接: https://pan.baidu.com/s/1VAJyKvNutqLB2shaw137bQ 下载破解文件 提取码: 75w8 找到你的XMind安装目录，例如我安装的路径为 G:\xmind思维导图\XMind，将下载好的破解文件放到此文件夹下 在这个目录中，找到 XMind.ini 这个文件，用记事本打开此文件，在最后一行追加 -javaagent:G:\xmind思维导图\XMind\XMindCrack.jar，然后保存退出即可。 注意地址写你自己的安装路径 上面完成后，就可以打开 XMind, 依次点击 帮助——序列号，然后输入以下序列号 ，邮箱随便填一个就可以了。然后提示激活成功既可。 XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345 破解成功 注意：防止联网检查，打开 hosts 文件，在末尾追加两行行 ，或者给这个软件禁止联网权限127.0.0.1 www.xmind.net127.0.0.1 www.xmind.cn 6、找到hosts文件 Win：C:\Windows\System32\drivers\etc Mac：桌面顶部菜单栏，前往-前往文件夹，输入代码：/private/etc/ hosts文件目录 -&gt;C:\Windows\System32\drivers\etc ​ 7、在hosts里面追加代码（修改时需要注意，文件原本是只读，要把只读去了） Win：127.0.0.1 www.xmind.net 回车 Mac：127.0.0.1 www.xmind.net 回车（直接修改会提示无权修改，需要先将hosts文件复制到桌面，在桌面修改，然后在粘贴回去，覆盖原文件） 8、打开xmind 8 输入邮箱和序列号 帮助-&gt;序列号]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端非技术面试题]]></title>
    <url>%2F2018%2F12%2F12%2F%E5%89%8D%E7%AB%AF%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>前端面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发优化的一些常见办法(汇总)]]></title>
    <url>%2F2018%2F12%2F12%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E5%8A%9E%E6%B3%95-%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[WEB前端开发常用的优化技巧汇总减少HTTP请求的次数或者减小请求数据的大小 页面中每发送一次HTTP请求，都需要完成请求加响应这个完整的HTTP事务，会消耗一些时间，也可能会导致HTTP链接通道的阻塞，为了提高页面的加载速度和运行的性能，我们应该减少HTTP的请求次数和减少请求内容的大小（请求的内容越大，消耗的时间越长）。 采用CSS雪碧图（CSS Sprit/CSS 图片精灵）技术，把一些小图合并在一张大图上，使用的时候通过背景图片定位，定位在具体的某一张小图上 12345678.pubBg&#123; background: url('../img/sprit.png') no-repeat; background-size: x y; /*和图片的大小保持一致*/&#125;.box&#123; background-position: x y; /*通过背景定位，定位到具体的位置，展示不同的图片即可*/&#125;&lt;div class="pubBg box"&gt;&lt;/div&gt; 真实项目中，我们最好把CSS或者JS文件进行合并压缩。尤其是在移动端开发的时候，如果css或者js内容不是很多，我们可以采取内嵌式，以此减少HTTP请求的次数，加快页面的加载速度 CSS合并成一个，JS最好也合并成一个 首先通过一些工具（例如：webpack）把合并后的CSS或者JS压缩成xxx.min.js，减少文件的大小 服务器端开启资源文件的GZIP压缩 通过一些自动化工具完成CSS以及JS的合并压缩，或者在完成LESS转CSS，ES6转ES5等操作，我们把这种自动化构建模式，称之为前端工程化开发 采用图片的懒加载技术，在页面开始加载的时候，不请求真实图片的地址，而是用默认图占位，当页面加载完成后，再根据相关的条件依次加载真实图片（减少页面首次加载HTTP请求的次数） 真实项目中，我们开始图片都不加载，页面首次加载完成，先把第一屏幕中可以看见的图片进行加载，随着页面的滚动，再把下面区域中能够呈现出来的图片进行加载 根据图片的懒加载技术，我们还可以扩充出数据的懒加载 开始加载页面的时候，我们只把首屏或者前两屏的数据从服务端进行请求（有些网站首屏数据是后台渲染好，整体返回给客户端呈现的） 当页面下拉，滚动到哪个区域，在把这个区域需要的数据进行请求（用请求回来的数据进行数据的绑定以及图片的延迟加载等） 分页展示技术采用的也是数据的懒加载思想实现的：如果我们请求获取很多的数据，我们最好分批请求，开始只请求第一页的数据，当用户点击第二页（微博是下拉到一定距离后，在请求第二页数据…）的时候在请求第二页的数据 对于不经常更新的数据，最好采用浏览器的304缓存做处理（主要由服务器端处理） 例如: 第一次请求CSS和JS下来，浏览器会把请求的内容缓存起来，如果做了304处理，用户再次请求CSS和JS，直接从缓存中读取，不需要再去服务器获取了（减少了HTTP请求的次数） 当用户强制刷新页面（CTRL+F5）或者当前缓存的CSS或者JS发生了变动，都会重新从服务器端拉取 … 对于客户端来讲，我们还可以基于localStorage来做一些本地存储，例如：第一次请求的数据或者不经常更新的CSS和JS，我们都可以把内容存储到本地，下一次页面的加载，我们从本地获取即可，我们设定一定的期限或者一些标识，可以控制在某个阶段重新从服务器获取 使用字体图标代替页面中的一些位图（图片），这样不仅做适配的时候方便，而且更加轻量级，而且减少了HTTP请求次数（类似于雪碧图） 如果当前页面中出现了Audio或者Video标签，我们最好设置他们的preload=none；当页面加载的时候，音视频资源不进行加载，播放的时候在进行加载（减少页面首次加载HTTP请求的次数） preload=auto；页面首次加载的时候就把音视频进行加载了 preload=metadata；页面首次加载的时候只把音视频资源的头部信息进行加载 在客户端和服务器端进行数据通信的时候，我们尽量采用JSON格式进行数据传输 [优势] JSON格式的数据，能够清晰明了的展示出数据结构，而且也方便我们获取和操作 相对于很早以前的XML传输，JSON格式的数据更加轻量级 客户端和服务器端都支持JSON数据的处理，处理起来非常的方便 在真实项目中，并不是所有的数据都要基于JSON，我们尽可能这样做，但是对于某些特殊需求（例如：文件流的传输或者文档传输），使用JSON就不合适了 采用CDN加速 CDN: 分布式（地域分布式） 关于编写代码时候的一些优化技巧 除了减少HTTP请求次数和大小可以优化性能，我们在编写代码的时候，可以进行一些优化，让页面的性能有所提升（有些不好的代码编写习惯，会导致页面性能消耗太大，例如：内存泄漏） 在编写JS代码的时候，尽量减少对DOM的操作 VUE和REACT框架在这方面处理的非常不错 在JS中操作DOM是一个非常消耗性能的事情，但是我们又不可避免的操作DOM，我们只能尽量减少对于他的操作 【操作DOM的弊端】 DOM存在映射机制（JS中的DOM元素对象和页面中的DOM结构是存在映射机制的，一改则都改），这种映射机制，是浏览器按照W3C标准完成对JS语言的构建和DOM的构建（其实就是构建了一个监听机制），操作DOM是同时要修改两个地方，相对于一些其他的JS编程来说是消耗性能的 页面中的DOM结构改变或者样式改变，会触发浏览器的回流（浏览器会把DOM结构重新进行计算，这个操作很耗性能）和重绘（把一个元素样式重新渲染） 编写代码的时候，更多使用的是异步编程 同步编程会导致：上面东西完不成，下面任务也做不了，我们开发的时候，可以把某一个区域模块都设置为异步编程，这样只要模块之间没有必然的先后顺序，都可以独立进行加载，不会受到上面模块的堵塞影响（用的不多） 尤其是AJAX数据请求，我们都要使用异步编程，最好是基于promise设计模式进行管理（项目中经常使用fetch，vue axios等插件来进行AJAX请求处理，因为这些插件中就是基于promise设计模式对ajax进行封装处理） 在真实项目中，我们尽量避免一次性循环过多数据（因为循环操作是同步编程），尤其是要避免while导致的死循环操作 CSS选择器优化 尽量减少标签选择器的使用 尽可能少使用ID选择器，多使用样式类选择器（通用性强） 减少选择器前面的前缀，例如：.headerBox .nav .left a{} (选择器是从右向左查找的) 避免使用CSS表达式 1234/*CSS表达式*/.box&#123; background-color:expression((new Data()).getHours()%2?'red':'blue')&#125; 减少页面中的冗余代码，尽可能提高方法的重复使用率：“低耦合高内聚” 最好CSS放在HEAD中，JS放在BODY尾部，让页面加载的时候，先加载CSS，在加载JS（先呈现页面，再给用户提供操作） JS中避免使用eval 性能消耗大 代码压缩后，容易出现代码执行错乱问题 JS中尽量减少闭包的使用 闭包会形成一个不销毁的栈内存，过多的栈内存累积会影响页面的性能 还会容易导致内存泄漏 闭包也有自己的优势：保护和保存，我们只能尽量减少，但不可避免 在做DOM事件绑定的时候，尽量避免一个个的事件绑定，而是采用性能更高的事件委托来实现 事件委托（事件代理） 把事件绑定给外层容器，当里面的后代元素相关行为被触发，外层容器绑定的方法也会被触发执行（冒泡传播机制导致），通过事件源是谁，我们做不同的操作即可 尽量使用CSS3动画代替JS动画，因为CSS3动画或者变形都开启了硬件加速，性能比JS动画好 编写JS代码的时候尽可能使用设计模式来构建体系，方便后期的维护，也提高了扩充性等 CSS中减少对滤镜的使用，页面中也减少对于FLASH的使用 关于页面的SEO优化技巧 页面中杜绝出现死链接（404页面），而且对于用户输入的一个错误页面，我们要引导到404提示页面中（服务器处理的） 避免浏览器中异常错误的抛出 尽可能避免代码出错 使用TRY CATCH做异常信息捕获 增加页面关键词优化]]></content>
      <categories>
        <category>HTTP和AJAX重点知识</category>
      </categories>
      <tags>
        <tag>HTTP和AJAX重点知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是AJAX（前后端分离和不分离的优势弊端）]]></title>
    <url>%2F2018%2F12%2F12%2F%E4%BB%80%E4%B9%88%E6%98%AFAJAX%EF%BC%88%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%8D%E5%88%86%E7%A6%BB%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BC%8A%E7%AB%AF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[AJAX基础知识及核心原理解读AJAX基础知识 什么是AJAX？ async javascript and xml 异步的JS和XML XML：可扩展的标记语言 作用：是用来存储数据的（通过自己扩展的标记名称清晰地展示出数据结构） ajax之所以称为异步的js和xml，主要原因是：以前最开始使用ajax实现客户端和服务端数据通信的时候，传输数据的格式一般都是xml格式的数据，我们把他称之为异步的js和xml（现在一般都是基于JSON格式来进行数据传输的） 123456789101112&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;root&gt; &lt;student&gt; &lt;name&gt;海洋&lt;/name&gt; &lt;age&gt;10&lt;/age&gt; &lt;score&gt; &lt;deutsch&gt;100&lt;/deutsch&gt; &lt;IT&gt;100&lt;/IT&gt; &lt;english&gt;100&lt;/english&gt; &lt;/score&gt; &lt;/student&gt;&lt;/root&gt; 异步的JS 这里的异步不是说ajax只能基于异步进行请求（虽然建议都是使用异步编程），这里的异步特指的是 局部刷新 局部刷新 VS 全局刷新 全局刷新： 在非完全前后端分离的项目中，前端开发只需要完成页面的制作，并且把一些基础的人机交互效果使用js完成即可，页面中需要动态呈现内容的部分，都是交给后台开发工程师做数据绑定和基于服务器进行渲染的 \非完全前后端分离.jpg) \不完全前后端分离.jpg)]]></content>
      <categories>
        <category>HTTP和AJAX重点知识</category>
      </categories>
      <tags>
        <tag>HTTP和AJAX重点知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML详解1]]></title>
    <url>%2F2018%2F12%2F11%2FHTML%E8%AF%A6%E8%A7%A31%2F</url>
    <content type="text"><![CDATA[HTML 第一天目标能够写出基本的页面（里面包含图片、各种标签和链接） 开发工具我们主要用的 开发工具有 chrome 、 sublime 、 photoshop 浏览器（显示）1浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。 查看浏览器占有的市场份额（知晓）查看网站： http://tongji.baidu.com/data/browser 这些工具你认识几个？ sublime（书写） 普通青年 Dreamweaver 文艺青年 sublime 高手和傻子 用记事本 其实。。。。 Photoshop(协助)PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求： 熟练的切图 能和网站美工美眉有共同话题。。。。。 认识网页1网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。 1思考： 网页是如何形成的呢? 常见浏览器内核介绍1浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。 浏览器内核（理解）12345浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。 （1）Trident(IE内核) 国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。 代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。 Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。 （2）Gecko(firefox) Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。 （3） webkit(Safari) Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器， （4） Chromium/Blink(chrome) 在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 ​ 大部分国产浏览器最新版都采用Blink内核。二次开发 （5） Presto(Opera) Presto（已经废弃） 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。 1了解一点： 移动端的浏览器内核主要说的是系统内置浏览器的内核。 Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。 iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的 Web标准（重点）通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。 1问： 哪个语言再全国基本都可以听得懂？ Web 标准的好处1、让Web的发展前景更广阔2、内容能被更广泛的设备访问3、更容易被搜寻引擎搜索4、降低网站流量费用5、使网站更易于维护6、提高页面浏览速度 Web 标准构成 Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。 主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。 123结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 最重要表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript 理想状态我们的源码： .HTML .css .js 直观感受： 总结WEB标准： 结构标准： 决定你是否有个好天然身体 表现标准： 决定你是否打扮的美丽外观 行为标准： 决定你是否有吸引人的行为 课堂一练：1.关于WEB标准下列说法正确的是: A html决定页面的行为，css决定页面的样式，js决定页面的结构 B html决定页面的样式，css决定页面的结构，js决定页面的行为 C html决定页面的结构，css决定页面的样式，js决定页面的行为 D 以上都不正确 2 web 标准里边规定三层分离不包括哪部分 A．HTML B．CSS C．JavaScript D．PHP 3.关于WEB标准下列说法正确的是 A．html相当于人的动作行为，CSS相当于人的穿着打扮，javascript相当于人的骨架结构； B．html相当于人的骨架结构，CSS相当于人的穿着打扮，javascript相当于人的动作行为； C．html相当于人的穿着打扮，CSS相当于人的骨架结构，javascript相当于人的动作行为； D．html相当于人的骨架结构，CSS相当于人的动作行为，javascript相当于人的穿着打扮； HTML 初识一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。 HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”。是用来描述网页的一种语言。 所谓超文本，因为它可以加入图片、声音、动画、多媒体等内容，不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接。 1&lt;h1&gt; 我是一个大标题 &lt;/h1&gt; 注意： 体会 文本 标签 语言 几个词语 HTML 指的是超文本标记语言 (Hyper Text Markup Language) HTML 不是一种编程语言，而是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) 总结： HTML 作用就是用标记标签来描述网页，把网页内容在浏览器中展示出来。 用文字来描述网页标签 HTML骨架格式日常生活的书信，我们要遵循共同的约定。 同理：HTML 有自己的语言语法骨架格式： 1234567&lt;HTML&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/HTML&gt; 课堂练习1： 书写我们的第一个HTML 页面！ 新建一个demo 的 TXT 文件。 里面写入刚才的HTML 骨架。月薪过万 你我之间 黑马洗练 一飞冲天 把后缀名改为 .HTML。 右击–谷歌浏览器打开。 12345678910111213141516171 HTML标签：作用所有HTML中标签的一个根节点。 最大的标签 根标签2 head标签： 文档的头部文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。注意在head标签中我们必须要设置的标签是title3.title标签： 文档的标题作用：让页面拥有一个属于自己的标题。4.body标签：文档的主体 以后我们的页面内容 基本都是放到body里面的body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。） 为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为 猪八戒记忆法 HTML标签分类 在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素 1.双标签 1&lt;标签名&gt; 内容 &lt;/标签名&gt; 该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。 12&gt; 比如 &lt;body&gt;我是文字 &lt;/body&gt;&gt; 2.单标签 1&lt;标签名 /&gt; 单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。 12&gt; 比如 &lt;br /&gt;&gt; HTML标签关系标签的相互关系就分为两种： 1.嵌套关系 1&lt;head&gt; &lt;title&gt; &lt;/title&gt; &lt;/head&gt; 2.并列关系 12&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; 倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。 课堂一练1请问下列哪个标签是错误的？ 1A &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt; 1B &lt;strong&gt;&lt;div&gt;&lt;/div&gt;&lt;/strong&gt; 1C &lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt; 1D &lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt; 1234再页面中输入 以下2个单词1. html: 5 2. ! 在sublime里面然后按下tab键盘即可生成HTML骨架 文档类型&lt;!DOCTYPE&gt;1&lt;!DOCTYPE html&gt; 同学你用啥手机？你咋回答？ 这句话就是告诉我们使用哪个html版本？ 我们使用的是 html 5 的版本。 html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。 &lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。 注意： 一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。 字符集 utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。 gb2312 简单中文 包括6763个汉字 BIG5 繁体中文 港澳台等用 GBK包含全部中文字符 是GB2312的扩展，加入对繁体字的支持，兼容GB2312 UTF-8则包含全世界所有国家需要用到的字符 1记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。 HTML标签的语义化白话： 所谓标签语义化，就是指标签的含义。 为什么要有语义化标签 方便代码的阅读和维护 同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 使用语义化标签会具有更好地搜索引擎优化 核心：合适的地方给一个最为合理的标签。 语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。 白话，一眼看去，就知道那个是重点，结构是什么，知道每块的内容是干啥的。 遵循的原则：先确定语义的HTML ，再选合适的CSS。 HTML常用标签 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。 HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 排版标签排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。 标题标签 (熟记) 单词缩写： head 头部. 标题 title 文档标题 为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即 &lt;h1&gt;&lt;/h1&gt; ...&lt;h6&gt;&lt;/h6&gt; 1标题标签语义： 作为标题使用，并且依据重要性递减 其基本语法格式如下： 1&lt;hn&gt; 标题文本 &lt;/hn&gt; 注意： h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用，或者页面中最重要标题信息。 段落标签( 熟记)单词缩写： paragraph 段落 [ˈpærəgræf] 无须记这个单词 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是 1&lt;p&gt; 文本内容 &lt;/p&gt; 是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。 水平线标签(认识)单词缩写： horizontal 横线 [ˌhɔrəˈzɑntl] 同上 在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，就是创建横跨网页水平线的标签。其基本语法格式如下： 1&lt;hr /&gt;是单标签 在网页中显示默认样式的水平线。 课堂练习2： 新闻页面 换行标签(熟记)单词缩写： break 打断 ,换行 在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签 1&lt;br /&gt; 这时如果还像在word中直接敲回车键换行就不起作用了。 课堂一练关于标签下列说法正确的是 (A) P1是段落标签 (B) H1 是标题标签 (C) Hr是换行标签 (D) Br 是一条直线 2 关于标签下列说法不正确的是 (A) H标签有6个等级分别是&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt;和&lt;h6&gt; (B) h1到h6 文字从小到大 (C) p标签一行只能放一个 (D) P是段落标签会给文字加上段落的语义 div span标签(重点)div span 是没有语义的 是我们网页布局主要的2个盒子 css+div div 就是 division 的缩写 分割， 分区的意思 其实有很多div 来组合网页。 span, 跨度，跨距；范围 语法格式： 1&lt;div&gt; 这是头部 &lt;/div&gt; &lt;span&gt;今日价格&lt;/span&gt; 文本格式化标签(熟记)在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。 b i s u 只有使用 没有 强调的意思 strong em del ins 语义更强烈 标签属性 属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。 手机的颜色是黑色 手机的尺寸是 8寸 水平线的长度是 200 图片的宽度 是 300 键 值对 使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下： 1&lt;标签名 属性1="属性值1" 属性2="属性值2" …&gt; 内容 &lt;/标签名&gt; 在上面的语法中， 1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。 2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。 3.任何标签的属性都有默认值，省略该属性则取默认值。 采取 键值对 的格式 key=”value” 的格式 比如: 1&lt;hr width="400" /&gt; 属性 是 宽度 值 是 400 提倡： 尽量不使用 样式属性。 图像标签img (重点)单词缩写： image 图像 HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签以及和他相关的属性。其基本语法格式如下： 该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。 1&lt;img src="图像URL" /&gt; 当网页显示图片时,鼠标滑上图片显示文字描述是以下哪个属性** (A) 设置alt属性 (B) 设置title属性 (C) 设置href 属性 (D) 设置src 属性 2 在HTML中，使用标签插入图像，下列选项关于的src属性说法正确的是 (A) 用来设置图片的格式 (B) 用来设置图片的所在位置 (C) 用来设置鼠标指向图片时显示的文字 (D) 用来设置图片是否能正确显示 链接标签(重点)单词缩写： anchor 的缩写 [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的 在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下： 1&lt;a href="跳转目标" target="目标窗口的弹出方式"&gt;文本或图像&lt;/a&gt; href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。 Hypertext Reference的缩写。意思是超文本引用 target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。 注意： 1.外部链接 需要添加 http:// www.baidu.com 2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。 4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。 锚点定位 （难点）通过创建锚点链接，用户能够快速定位到目标内容。创建锚点链接分为两步： 123451.使用“a href=”#id名&gt;“链接文本"&lt;/a&gt;创建链接文本（被点击的） &lt;a href="#two"&gt; 2.使用相应的id名标注跳转目标的位置。 &lt;h3 id="two"&gt;第2集&lt;/h3&gt; base 标签 基本的base 可以设置整体链接的打开状态 base 写到 之间 把所有的连接 都默认添加 target=”_blank” 课堂一练 1在HTML中，关于a标签说法不正确的是（） (A) a标签可以通过href属性跳转到另外一个页面 (B) a标签可以通过targer属性设置在是否在新窗口中打开 (C) a标签只能在当前页面设置锚点链接，让用户能够快速定位到目标内 (D) a标签可以通过href=”#”设置一个空链接 2如果想跳转到当前页面里名为show的锚点，下列写法是正确的 A &lt; a href=”.show”&gt;跳转 B &lt; a href=”#show”&gt;跳转 C &lt; a href=” show”&gt;跳转 D &lt; a src=” #show”&gt;跳转 3如果想跳转到同目录下的名为success.html文件里名为show的锚点，下列写法是正确的 (A) &lt; a href=”success.html#show”&gt;跳转 (B) &lt; a href=”#show”&gt;跳转 (C) &lt; a href=”success#show”&gt;跳转(D) &lt; a src=”success.html#show”&gt;跳转 特殊字符标签 （理解） 注释标签在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：​ 1&lt;!-- 注释语句 --&gt; ctrl + / 或者 ctrl +shift + / 注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。 注释重要性： 路径(重点、难点) 实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。 根目录 当前目录 路径可以分为： 相对路径和绝对路径 相对路径以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。 图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。 图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。 图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。 绝对路径绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的 “D:\web\img\logo.gif”，或完整的网络地址，例如“http://www.itcast.cn/images/logo.gif”。 课堂一练1.在下面结构中，哪种写法可以在index页面中有输出img.gif (A) &lt;img src=&quot;../image/img.gif&quot; /&gt; (B) &lt;img src=&quot;image/img.gif&quot; /&gt; (C) &lt;img src=&quot;image../img.gif&quot; /&gt; (D) &lt;img src=&quot;img.gif/image&quot; /&gt; 2在下面结构中，哪种写法可以在index页面中有输出1.jpg (A) &lt;img src=&quot;../1/2/1.jpg&quot; /&gt; (B) &lt;img src=&quot;/1/2/1.jpg&quot; /&gt; (C) &lt;img src=&quot;1/2/1.jpg&quot; /&gt; (D) &lt;img src=&quot;1.jpg&quot; /&gt; 3在下面结构中哪种写法可以在index页面中有输出img.gif (A) &lt;img src=&quot;demo/image/img.gif&quot; /&gt; (B) &lt;img src=&quot;image/img.gif&quot; /&gt; (C) &lt;img src=&quot;image../img.gif&quot; /&gt; (D) &lt;img src=&quot;img.gif/image/demo&quot; /&gt; 总结 每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt; 学HTML 之前 觉得 很神秘 等你学完之后忽然发现 总结今天的思路贯穿线： 列表标签什么是列表？ 把…制成表,以表显示 容器里面装载着文字或图表的一种形式，叫列表。 列表最大的特点就是 整齐 、整洁、 有序 无序列表 ul （重点）无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下： 123456&lt;ul&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ul&gt; 比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。 脚下留心： 1231. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！ 有序列表 ol （了解）有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下： 123456&lt;ol&gt; &lt;li&gt;列表项1&lt;/li&gt; &lt;li&gt;列表项2&lt;/li&gt; &lt;li&gt;列表项3&lt;/li&gt; ......&lt;/ol&gt; 所有特性基本与ul 一致。 但是实际工作中， 较少用 ol img src=”HTML详解1/1.jpg” /&gt; 自定义列表（理解）定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下： 12345678910&lt;dl&gt; &lt;dt&gt;名词1&lt;/dt&gt; &lt;dd&gt;名词1解释1&lt;/dd&gt; &lt;dd&gt;名词1解释2&lt;/dd&gt; ... &lt;dt&gt;名词2&lt;/dt&gt; &lt;dd&gt;名词2解释1&lt;/dd&gt; &lt;dd&gt;名词2解释2&lt;/dd&gt; ...&lt;/dl&gt; 用的还可以： 表格 table(会使用) 存在即是合理的。 表格的现在还是较为常用的一种标签，但不是用来布局，常见处理、显示表格式数据。 ps: 这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说 PPAP i hava a pen 创建表格在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下： 1234567&lt;table&gt; &lt;tr&gt; &lt;td&gt;单元格内的文字&lt;/td&gt; ... &lt;/tr&gt; ...&lt;/table&gt; 在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释 123451.table用于定义一个表格。2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。 注意： 11. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt; 12. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素 表格属性 表头标签表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。 表格结构（了解）12345678910在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。 表格标题表格的标题： caption 定义和用法 caption 元素定义表格标题。 123&lt;table&gt; &lt;caption&gt;我是表格标题&lt;/caption&gt;&lt;/table&gt; caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。 合并单元格(难点)跨行合并：rowspan 跨列合并：colspan 合并单元格的思想： ​ 将多个内容合并的时候，就会有多余的东西，把它删除。 例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。 ​ 公式： 删除的个数 = 合并的个数 - 1 合并的顺序 先上 先左 总结表格 表格提供了HTML 中定义表格式数据的方法。 表格中由行中的单元格组成。 表格中没有列元素，列的个数取决于行的单元格个数。 表格不要纠结于外观，那是CSS 的作用。 ​ 表格的学习要求： 能手写表格结构，并且能合并单元格。 表单标签(掌握)现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图 目的是为了收集用户信息。 在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。 在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。 表单控件： ​ 包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。 提示信息： ​ 一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。 表单域： ​ 他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。 input 控件(重点)在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。 label标签(理解)label 标签为 input 元素定义标注（标签）。 作用： 用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点 如何绑定元素呢？ for 属性规定 label 与哪个表单元素绑定。 12&lt;label for="male"&gt;Male&lt;/label&gt;&lt;input type="radio" name="sex" id="male" value="male"&gt; textarea控件(文本域)如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下： 123&lt;textarea cols="每行中的字符数" rows="显示的行数"&gt; 文本内容&lt;/textarea&gt; 下拉菜单使用select控件定义下拉菜单的基本语法格式如下 123456&lt;select&gt; &lt;option&gt;选项1&lt;/option&gt; &lt;option&gt;选项2&lt;/option&gt; &lt;option&gt;选项3&lt;/option&gt; ...&lt;/select&gt; 注意： &lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。 在option 中定义selected =” selected “时，当前项即为默认选中项。 表单域在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下： 123&lt;form action="url地址" method="提交方式" name="表单名称"&gt; 各种表单控件&lt;/form&gt; 常用属性： Action在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。 method用于设置表单数据的提交方式，其取值为get或post。 name用于指定表单的名称，以区分同一个页面中的多个表单。 注意： 每个表单都应该有自己表单域。 查文档经常查阅文档是一个非常好的学习习惯。 W3C : http://www.w3school.com.cn/ MDN: https://developer.mozilla.org/zh-CN/ 一、计算机基础知识1.1 文件和文件夹管理 熟练掌握文件和文件夹的管理，包括创建、删除、重命名、复制、粘贴、剪切、移动。 熟练掌握“文件拓展名”的意义 在windows下，所有的文件的名字，是两部分组成的。语法： 文件名.拓展名 拓展名一般就是2~4个字母，表示文件的格式。比如.jpg是图片格式，.mp3音乐格式，.doc文档。 一般来说，操作系统，是不能显示拓展名的，需要我们自己设置。我们以win7举例： 知道“打开方式”的意义一个文件，可以用多种软件打开，这就叫做打开方式。实际上现在你就应该树立一种思维，同一个文件可以用不同的软件打开。比如，.jpg用“照片查看器”打开，就是浏览模式；用画图打开，就是编辑模式。 会使用桌面，知道“快捷方式”的概念所有快捷方式，都有一个小箭头图标。就是一个快捷入口，所以删除这个图标，程序还在。 1.2 特殊按键和快捷键键盘上除了有字母、数字之外，还有一些特殊的按键：ctrl、shift、alt、tab● ctrl键是英语control“控制”的意思，这个按键，单独按没有任何作用，都要和其他的按键一起按才有用。比如ctrl+c，表示同时按住ctrl键和c键，一会儿将知道这个功能是复制。● shift键是英语shift“换挡”的意思，按下这个按键同时击打字母，打出的就是大写字母。熟悉shift键来打大写字母，尽量少用大小写锁定键。● alt键是英语alternate“调整”的意思，和ctrl一样，自己按没啥用，都要和其他的按键一起按才有用。比如alt+f4，表示关闭当前的窗口，比如你正在玩儿游戏，老板来了，可以按alt+f4快速关闭窗口。● tab键是用于table“制表符”的意思，经常实现“切换的功能”。比如我们在word软件中同时打开了两个文档，可以用ctrl+tab键，来在两个文档之间切换。 当然，可以用alt+tab键来切换程序。 必须熟练掌握下面的快捷键：ctrl+c 复制ctrl+v 粘贴ctrl+x 剪切（就是移动文件，在原来的文件夹ctrl+x一个文件，然后在新文件夹中ctrl+v粘贴）ctrl+tab 切换（具体切换什么，要看是什么软件）alt+F4 关闭程序F2 重命名F5 刷新，比如看网页的时候，想刷新网页，按f5ctrl+z 撤销，就是这一步干错了，就ctrl+z撤销windows+E 打开资源管理器windows+D 显示桌面ctrl+空格 切换中英文，严禁用shift键切换 二、互联网的原理2.1 上网就是请求数据网页上的内容，怎么就被我们看见了？什么是上网？我们先不直接解决这个问题，我们做一个小实验。我们每个人的电脑里面，都有一个神秘的文件夹：C:\Users\ufo\AppData\Local\Microsoft\Windows\Temporary Internet Files这个文件夹叫做临时文件夹（文件夹知道存在就可以了，不用自己试着去找）蓝色部分是每个人不一样的我们清空这个文件夹中的全部内容 我们打开IE浏览器，看几个网页。结果，这个文件夹中又多了很多的内容： 通过这个实验，目前为止，我们可以得出结论，上网的时候，是有真实的、物理的文件传输的！ 所以我们经常感觉第二次打开网页，比第一次快，这是因为第一次打开网页的时候，所有的图片都已经存过来了。所以现在也能够解释，为什么每次都用360能清理一堆垃圾，释放很多硬盘空间。 我们可以回答刚才的问题了，“上网”究竟是是什么？答案：上网就是请求数据，就是文件传输。服务器上存放着网页的相关文件，包括html文件、css文件、js文件、图片等。当我们打开浏览器，输入网址，我们的计算机就会对这些文件发出HTTP请求。​ 服务器收到请求之后，会把这些文件通过HTTP协议，传输到我们的计算机中（保存到了刚才那个临时文件夹中）。这些文件，将在我们计算机本地的浏览器中，进行渲染、呈递。​ 2.2 服务器● 服务器就是计算机，只不过比咱们用的笔记本的配置牛逼了很多，并且24小时不断电，不关机。● 服务器上存储着网页的相关文件。一旦有访问者浏览网站，服务器就将发送这些文件给访问者。● 服务器一旦关机，网站就无法访问了。 2.4 HTTP超文本传输协议，Hypertext Transfer Protocol。这是一个文件的传输协议，我们上网的时候，所有的文件都是通过HTTP这个协议，从服务器上传输到客户的电脑里面的。 网页是真实物理的文件。并且一个网页是很多的物理文件组成的：html文件、图片文件、js文件、css文件。这些文件要通过特殊软件才能上传到服务器上。然后就能让用户看了。用户通过浏览器，访问网址，服务器上面的文件就会通过http请求悄悄地传输到用户的电脑中的临时文件夹中，在用户的电脑中执行、渲染、呈递 三、HTML初步认识3.1 认识什么是纯文本文件txtwindows中自带一个软件，叫做记事本。记事本保存的文档格式就是txt格式，就是英语text的缩写。术语上，称呼这个文件叫做“纯文本文件”。 txt文件，只能保存文本内容，是无法记录文本样式的。所以，doc和txt存储同样的内容，doc比txt大： 纯文本文件就是这样的文件：1） 只有文本，没有样式；2） 用记事本等纯文本编辑器可读，不是乱码html、css、js都是纯本文的。 3.2 HTML是负责描述文档语义的语言HTML是英语HyperText Markup Language的缩写，超文本标记语言。 html提供了很多标签对儿，可以给文本增加不同的语义。比如： 标签对儿，主标题。 标签对儿，二级标题。 标签对儿，普通段落。 现在的业界的标准，网页技术严格的三层分离：html就是负责描述页面的语义；css负责描述页面的样式；js负责描述页面的动态效果的。 所以，html不能让文字居中，不能更改文字字号、字体、颜色。因为这些都是属于样式范畴，都是css干的事儿；html不能让盒子运动起来，因为这些属性行为范畴，都是js干的事儿。html只能干一件事儿，就是通过标签对儿，给文本增加语义。这是html唯一能做的。 html中，除了语义，其他什么都没有。 比如，面试的时候问你，h1标签有什么作用？正确答案：给文本增加主标题的语义错误答案：给文字加粗、加黑、变大 五、HTML骨架和基本语法12345678910111 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;2 &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;3 &lt;head&gt;4 &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;5 &lt;title&gt;哈哈哈&lt;/title&gt;6 &lt;/head&gt;7 &lt;body&gt;8 &lt;h1&gt;我是一个主标题&lt;/h1&gt;9 &lt;p&gt;我是一个小段落&lt;/p&gt;10 &lt;/body&gt;11 &lt;/html&gt; 第1行，就是网页的声明头，这行语句，千万不要背诵，谁背谁傻。术语叫做DocType Defintion，文档类型定义，简称DTD。这行语句非常的复杂，里面暗含了一个网址。W3C就是出web规范的组织机构。html、css、js的规范都是W3C定义发布的。world wide web coalition , 国际万维网联盟。网页声明头可以告诉浏览器，这是一个什么标准的页面。 第2行，是最大的html标签，所有的网页内容，都要包裹在这个标签对儿里面。 我们发现，html标签中，有两个属性： xmlns=”http://www.w3.org/1999/xhtml&quot; 命名空间，就是一个规范； xml:lang=”en” 语言是英语 第3行，就是head标签，就是配置。 第4行， 字符集的配置 第5行，哈哈哈 网页的标题，可以显示在浏览器的标签栏中。 第7行，body标签就是网页的内容，用户能够看见。 一、复习上节课的内容网页的原理：用户输入网址之后，对应的服务器就发现有人请求我的网页了，所以这个服务器就会把网页和相关的图片、js文件、css文件、flash文件都通过HTTP协议传输到用户的电脑里面。HTML页面在用户的电脑里面进行渲染。HTTP协议指的是超文本传输协议。每一个网址，都对应了服务器上面的确定的文件。 纯文本文件：只有内容，没有样式。常见的纯文本文件有：.txt、.html、.js、.css、.java。没有语义，即使你这个文件中的内容排版再清晰，那也是人认为的，实际上纯文本文件中的所有的文字生而平等，没有任何的语义。 HTML：超文本标记语言，HyperText Markup Language。就是通过标签对儿，给纯文本增加语义。也就是说，用文本给文本增加语义，所以这个叫做“超文本”。而有一对儿对儿标签，也成为“标记”，所以就是“超文本标记语言”。 标签： 主标题的语义 ，h是英语headline标题的意思。 HTML中除了语义，其他什么都没有：没有样式、没有交互、没有行为。 所以HTML不能让文本居中、字号调整、颜色改变、字体、下划线、倾斜…… 二、HTML骨架标准的骨架 123456789101 &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;2 &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;3 &lt;head&gt;4 &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"&gt;5 &lt;title&gt;Document&lt;/title&gt;6 &lt;/head&gt;7 &lt;body&gt;8 9 &lt;/body&gt;10 &lt;/html&gt; 2.1 文档声明头任何一个标准的HTML页面，第一行一定是一个以&lt;!DOCTYPE开头的语句。这一行，就是文档声明头，DocType Declaration。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。 到底有哪些规范呢？ 首先我们先确定一件事儿，我们现在学习的是HTML4.01这个版本，这个版本是IE6开始兼容的。HTML5是IE9开开始兼容的。但是IE6、7、8这些浏览器还不能过早的淘汰，所以这几年网页还是应该用HTML4.01来制作。后面将知道手机、移动端的网页，就可以使用HTML5了。 HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下面）： HTML4.01里面规定了普通、XHTML两大种规范。 HTML觉得自己有一些规定不严谨，比如，标签是否可以用大写字母呢？ 所以，HTML就觉得，把一些规范严格的标准，又制定了一个XHTML1.0。在XHTML中的字母X，表示“严格的”。 总结一下， 一共有6种DTD，说白了，HTML第一行语句一共有6种： 2.2 字符集有两个字库UTF-8和gb2312。 UTF-8是国际通用字库，里面涵盖了所有地球上所有人类的语言文字，比如阿拉伯文、汉语、鸟语…… gb2312 是国标，是中国的字库，里面仅涵盖了汉字和一些常用外文，比如日文片假名，和常见的符号。 字库规模： UTF-8（字全） &gt; gb2312（只有汉字） UTF-8里面存储一个汉字3个字节。而gb2312中存储一个汉字2个字节。 保存大小： UTF-8（更臃肿、加载更慢） &gt; gb2312 （更小巧，加载更快） 总结： UTF-8 字多，有各种国家的语言，但是保存尺寸大，文件臃肿； gb2312字少，只用中文和少数外语和符号，但是尺寸小，文件小巧。 列出2个使用情形： 1） 你们公司是做日本动漫的，经常出现一些日语动漫的名字，网页要使用UTF-8。如果用gb2312将无法显示日语。 2） 你们公司就是中文网页，极度的追求网页的显示速度，要使用gb2312。如果使用UTF-8将每个汉字多一个byte，所以5000个汉字，多5kb。 2.3 关键字和页面描述meta除了可以设置字符集，还可以设置关键字和页面描述。 设置页面描述： 11 &lt;meta name="Description" content="网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。" /&gt; 只要设置的Description页面面熟，那么百度搜索结果，就能够显示这些语句，这个技术叫做SEO，search engine optimization，搜索引擎优化。 2.4 title标签11 &lt;title&gt;网页的标题&lt;/title&gt; title也是有助于SEO搜索引擎优化的： 三、HTML的基本语法特性3.1 HTML对换行不敏感，对tab不敏感HTML只在乎标签的嵌套结构，嵌套的关系。谁嵌套了谁，谁被谁嵌套了，和换行、tab无关。 换不换行、tab不tab，都不影响页面的结构。也就是说，HTML不是依靠缩进来表示嵌套的，就是看标签的包裹关系。但是，我们发现有良好的缩进，代码更易读。要求大家都正确缩进标签。 3.2 空白折叠现象HTML中所有的文字之间，如果有空格、换行、tab都将被折叠为一个空格显示。 3.3 标签要严格封闭标签不封闭是灾难的： 四、h和p标签HTML标签是分等级的，HTML将所有的标签分为两种：容器级、文本级。顾名思义，容器级的标签，里面可以放置任何东西；文本级的标签里面，只能放置文字、图片、表单元素。 五、图片 标准答案：&lt;img src=&quot;../../photo/1.png&quot; /&gt; 解释： 现在document是最大的文件夹，里面有两个文件夹work和photo。work中又有一个文件夹叫做myweb。myweb文件夹里面有index.html。 所以index.html在myweb文件夹里面，上一级就是work文件夹，上两级就是document文件夹。通过document文件夹当做一个中转站，进入photo文件夹，看到了1.png。]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP等传输协议讲解]]></title>
    <url>%2F2018%2F12%2F10%2FHTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[成为栈开发工程师需要掌握的技术栈如何成为一名初级全栈开发工程师什么是全栈开发工程师？ 全栈（全站）开发工程师(FULL-STACK)：前后端都可以自己独立完成开发 [前端] HTML（5）+ CSS（3） JAVASCRIPT（JQ，VUE，REACT） [后端] Java (JSP) Python Node PHP C#（.net-&gt;dot net） (ASP.NET) C … [数据库] mysql sql server oracle mongodb （和node结合紧密的） … [自动化] git / svn webpack(基于NODE运行的) 服务器部署工具（iis/Apache/nginx…） linux操作系统 https://insights.stackoverflow.com/survey/2018 真实项目的部署流程(以及一点职业发展建议)前端和后端是如何通信的？ 前端：客户端 后端：服务器端 所谓的全栈，其实就是自己可以实现客户端和服务端程序的编写，而且还可以实现两端之间的通信 职业规划建议： 培养自己的人脉圈，建立自己的影响力 壮大自己的综合能力 经常参加一些活动 开放分享（做讲师分享自己的智慧，写自己的个人博客做技术分享） 自己做一个技术博客 本地开发（当前项目可以在本地预览） 部署到服务器上，让别人可以通过域名或者外网访问 购买一台服务器（阿里云独立主机，虚拟服务器等）https://wanwang.aliyun.com 购买域名 把自己做的项目传到服务器上 让域名和服务器关联(DNS解析：域名解析) 在服务器上发布或部署我们的项目（iis，nginx，apache…） 做一些推广（SEO推广，友情链接交换，技术文章持续更新） 使用FileZilla进行FTP上传 客户端和服务器端是如何通信的？经典面试题：当我们在浏览器地址中输入一个URL地址，到最后看到页面，中间都经历了哪些事情？ [Request 请求阶段] 首先根据客户端输入的域名，到DNS服务器上进行反解析（通过服务器找到对应外网IP） 通过找到的外网IP，找到对应的服务器 通过在地址栏中输入的端口号（没输入是因为不同协议有自己的默认端口号），找到服务器上发布的对应的项目 [Response 响应阶段] 服务器获取到请求资源文件的地址，例如：/books/index.html,把资源文件中的源代码找到 服务器端会把找到的源代码返回给客户端（通过HTTP等传输协议反回的） [浏览器自主渲染] 客户端接收到源代码后，会交给浏览器的内核（渲染引擎）进行渲染，最后有浏览器绘制出对应的页面 客户端和服务器端交互(通信)模型 HTTP等传输协议讲解URL，URI，URN URI：统一资源标识符 URL：统一资源定位 URN： 统一资源名称 URI = URL + URN 一个完整的URL包含很多部分： 例如：https://www.haiyang.com/stu/index.html?name=hy&amp;age=6#good 第一部分：传输协议 传输协议是用来完成客户端和服务端数据（内容）传输的，类似于快递小哥，负责把客户和商家的物品来回传递 客户端不仅可以向服务器发送请求，而且还可以把一些参数传递给服务器 服务器端也可以把内容返回给客户端 客户端和服务器端传输的内容总称为HTTP报文，这些报文信息都是基于传输协议完成传输的，客户端传递给服务器叫做请求（Request），服务器端返回给客户端叫做响应（Response），request+response两个阶段统称为一个HTTP事务（事务：一件完整的事情） HTTP事务： 当客户端向服务器端发送请求。此时客户端和服务器端会建立一个传输通道（链接通道），传输协议就是基于这个通道把信息进行传输的 当服务器端接收到请求信息，把内容返回给客户端后，传输通道会自动关闭 传输协议分类： http:超文本传输协议（客户端和服务器端传输的内容除了文本以外，还可以传输图片，音频，视频等文件流【二进制编码/BASE64码】，以及传输XML格式的数据等），是目前市场上应用最广泛的传输协议 https: http ssl，他比http更加安全，因为数据内容的传输通道是经过ssl加密的（他需要在服务器端进行特殊的处理），所以涉及资金类的网站一般都是https协议的 ftp:资源文件传输协议，一般用于客户端把资源文件（不是代码）上传到服务器端，或者从服务器端下载一些资源文件（一般ftp传输的内容会比http这类协议传输的内容多） HTTP报文的一些核心知识HTTP报文 起始行 请求起始行 响应起始行 首部（头） 请求头：内置请求头，自定义请求头 响应头：内置响应头，自定义响应头 通用头：请求和响应都有的 主体 请求主体 响应主体 请求xxx都是客户端设置的信息，服务端获取这些信息 响应xxx都是服务器端设置的信息，客户端用来接收这些信息 在谷歌浏览器控制台Network选项中，我们可以看见当前客户端和服务器端交互的全部信息 总结： 客户端传递给服务器端数据 URL问号传递参数 设置请求头 设置请求主体 服务器端返回给客户端内容 设置响应头（例如服务器时间） 设置响应主体 第二部分：域名 设置域名其实就是给不好记忆的服务器外网ip设置了一个好记的名字 一级域名（顶级域名）：qq.com 二级域名：www.qq.com，sports.qq.com，。。。 三级域名：kkk.sports.qq.com 第三部分：端口号 在服务器发布项目的时候，我们可以通过端口号区分当前服务器上的不同项目 一台服务器的端口号取值范围：0-65535之间，如果电脑上安装了许多程序，有一些端口号就是被占用了 一个IP地址的端口可以有65536（2^16）个，端口号只有整数，范围是从0 到65535（2^16-1）。 端口有三个类型： \1. 公认端口（Well Known Ports）是众所周知的端口号，范围从0到1023。 \2. 动态端口（Dynamic Ports）范围是从49152到65535。之所以称为动态端口，是因为它 一般不固定分配某种服务，而是动态分配。 \3. 注册端口（RegisteredPorts）范围是从1024到49151，分配给用户进程或应用程序。这些进程主要是用户选择安装的一些应用程序，而不是已经分配好了公认端口的常用程序。这些端口在没有被服务器资源占用的时候，可以用用户端动态选用为源端口。 HTTP: 默认端口号80 HTTPS：默认端口号443 FTP：默认端口号21 对于上述三个端口号其实是很重要的，如果被其他程序占用，我们就不能使用了，所以在服务器上一般是禁止安装其他程序的 第四部分：请求资源的文件路径名称 /boos/index.html 在服务器中发布项目的时候，我们一般都会配置一些默认文档，用户即使不输入请求文件的名称，服务器也会找到默认文档（一般默认文档都是 index/default …） 我们通常为了做SEO优化，会把一些动态页面的地址（xxx.py，xxx.jsp，xxx.php …）进行伪URL重写（需要服务器处理的） 例如：https://item.jd.com/342535.html 不可能 有一个商品就写一个详情页，肯定是同一个详情页做不同的处理 第一种方案： 由后台语言根据详情页模板动态生成具体的详情页面 第二种方案： 当前页面就是一个页面，例如：detail.html/detail.php，我们做详情页面的时候，开发是按照detail.html?id=787878来开发的。但是这种页面不方便做SEO优化，此时我们把真实的地址进行重写，重写为我们看到的787878.html 第五部分：问号传参 ?name=hy&amp;age=6 把一些值通过xxx=xxx的方式，放在一个URL的末尾，通过？传递参数 【作用】 在AJAX请求中，我们可以通过问号传递参数的方式，客户端把一些信息传递给服务器，服务器根据传递信息的不一样，返回不同的数据 123456789// $.ajax(url,&#123;&#125;);// $.get(url,function()&#123;&#125;);对于AJAX请求的特殊写法，原理还是基于AJAX方法实现的 $.post / $.script$.ajax(&#123; url: 'getPersonInfo?id=11' ...&#125;);// 当前案例，我们传递给服务器的编号是多少，服务器就会把对应编号的人员返回 消除AJAX请求中GET方式缓存 12345$.ajax(&#123; url: 'xxx?_=0.3434', method: 'get'&#125;);// 我们会在请求URL末尾追加一个随机数 _=随机数，保证每一次请求的URL地址都是不一样的，以此来消除GET请求遗留的缓存问题 通过URL传递参数的方式，可以实现页面之间信息的通信，例如：我们有两个页面A/B，A是列表页面，B是详情页面，点击A中的某一条信息，进入到唯一的详情页B，如何展示不同的信息，这种操作就可以基于URL问号传递参数来实现 例如： http://sports.qq.com/kbsweb/game.html?mid=10000:123 http://sports.qq.com/kbsweb/game.html?mid=10000:125 在进入到game.html页面的时候，我们可以获取URL传递的参数值，根据传递参数值的不一样，从服务器端获取不同的数据展示 在列表页面进行页面跳转的时候，我们需要记住的是跳转的同时传递不同的参数值 &lt;a href=&#39;game.html?mid=xxx&#39; 第六部分：HASH值 /#xxx URL末尾传递的#号就是HASH值（）哈希值 【作用】 页面中锚点定位 前端路由（SPA 单页面开发）]]></content>
      <categories>
        <category>HTTP和AJAX重点知识</category>
      </categories>
      <tags>
        <tag>HTTP和AJAX重点知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-redux和redux]]></title>
    <url>%2F2018%2F12%2F09%2Freact-redux%E5%92%8Credux%2F</url>
    <content type="text"><![CDATA[redux 原理：统一管理状态redux GitHub地址：https://github.com/reduxjs/redux redux 说明文档：`https://redux.js.org/` createStore 创建容器store来保存状态的的 创建容器需要传一个管理员 reducer（用户自己定义的） state 属性，外界不可以直接访问 getState 外界可以通过store.getState 访问和获取这个状态 dispatch 派发一个动作，内部会调用reducer，通过这个方法修改更新状态state subscribe 定阅事件（当用户派发dispatch的时候，内部会触发订阅的事件执行） 1234567891011121314151617181920212223&gt; &gt; export default function createStore(reducer) &#123;&gt; &gt; let state, listener = [],&gt; &gt; dispatch, subscribe, getState;&gt; &gt; dispatch = (action) =&gt; &#123;&gt; &gt; reducer(state, action);&gt; &gt; listener.forEach(item =&gt; item())&gt; &gt; &#125;;&gt; &gt; dispatch(&#123;&#125;);&gt; &gt; subscribe = (fn) =&gt; &#123;&gt; &gt; listener = [...listener, fn];&gt; &gt; return () &#123;&gt; &gt; listener = listener.filter(item =&gt; item != fn)&gt; &gt; &#125;&gt; &gt; &#125;;&gt; &gt; getState = () =&gt; (JSON.parse(JSON.stringify(state)));&gt; &gt; return &#123;&gt; &gt; dispatch,&gt; &gt; subscribe,&gt; &gt; getState&gt; &gt; &#125;&gt; &gt; &gt; &gt; &#125;&gt; &gt; combineReducers 合并状态，将多个管理员reducer合并成一个 参数 {reducer1，reducer2，。。。} 合并之后的状态 {reducer1：reducer1(), reducer2: reducer2(), …} 1234567891011&gt; &gt; export function combineReducers(reducers) &#123;&gt; &gt; return (state = &#123;&#125;, action) =&gt; &#123;&gt; &gt; let obj = &#123;&#125;;&gt; &gt; for (let key in reducers) &#123;&gt; &gt; obj[key] = reducers[key](state[key], action)&gt; &gt; &#125;&gt; &gt; return obj;&gt; &gt; &#125;&gt; &gt; &#125;&gt; &gt; &gt; &gt; react 组件中使用redux 定义功能（动作）常量，一般单独放在一个js文件中，action-types.js 12&gt; const INCREMENT = "INCREMENT"&gt; 定义管理员reducer，创建容器store的时候传进reducer 1234567891011&gt; import action-types.js&gt; function reducer(state=initState, action)&#123;&gt; switch(action.type)&#123;&gt; case INCREMENT:&gt; return state + 1&gt; ...&gt; default:&gt; return state&gt; &#125;&gt; &#125;&gt; 定义一个actions，是一个对象，每一个action都需要一个函数返回 123456&gt; let actions = &#123;&gt; add: (count)=&gt;&#123;&gt; return &#123;type: INCREMENT, count&#125;&gt; &#125;,&gt; &#125;&gt; 在组件中 12345678910111213141516171819202122&gt; constructor()&#123;&gt; super();&gt; // 组件状态的初始化&gt; this.state = &#123;number: store.getState().number&#125;&gt; &#125;&gt; &gt; componentDidMount()&#123;&gt; this.unsubscribe = store.subscribe(()=&gt;&#123;&gt; //将redux管理的状态映射到组件自己的状态上&gt; this.setState(&#123;number: store.getState().number&#125;)&#125;)&gt; &#125;&gt; &gt; componentWillUnmount()&#123;&gt; //取消订阅&gt; this.unsubscribe()&gt; &#125;&gt; &gt; render()&#123;&gt; //视图放的一定是组件自己的状态或属性&gt; return &lt;div&gt;&#123;this.state.number&#125;&lt;/div&gt;&gt; &#125;&gt; 派发动作 12&gt; store.dispatch(actions.add(3))&gt; react-reduxreact-redux GitHub地址： `https://github.com/reduxjs/react-redux` react-redux 说明文档： https://react-redux.js.org/ Provider组件，一般是在最外层使用Provider包裹起来，将store 当做属性传给他，被其包裹的组件都可以使用容器store中的状态，但是组件必须使用 connect 方法处理 connect 方法：将组件处理成链接状态的组件 12345&gt; connect (mapStateToProps, mapDispatchToProps)(组件)&gt; //返回一个新的组件&gt; //mapStateToProps：将redux中的状态映射成组件的属性&gt; //mapDispatchToProps:将dispatch派发的动作映射成组件的属性。（也可以直接传一个actions，redux默认会调用 bindActionCreators ，变成dispatch）&gt; 在组件中使用 this.props.xxx 流程图 高阶函数 一个函数返回一个函数let fn = ()=&gt;()=&gt;() 高阶组件 一个组件，返回一个新的组件 手写react-redux12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import React from "react"import PropTypes from "prop-types"// Provider 是一个组件，接收一个store属性，将其内容挂载到context上,这样后代才可以有办法拿到class Provider extends React.Component&#123; static childContextTypes = &#123; //设置上下文的类型是对象 store:PropTypes.object &#125;; getChildContext()&#123; //获取并设置后代上下文的内容 return &#123;store:this.props.store&#125; &#125; render()&#123; return this.props.children &#125;&#125;let connect = (mapStateToProps, mapDispatchToProps)=&gt;(C)=&gt;&#123; return class Proxy extends React.Component&#123; static contextTypes = &#123; store:PropTypes.object &#125; constructor(props, context)&#123; super(); //将参数mapStateToProps的解构赋值给代理组件的状态 this.state = mapStateToProps(context.store.getState()) &#125; componentDidMount()&#123; this.context.store.subscribe(()=&gt;&#123; this.setState(mapStateToProps(this.context.store.getState()) &#125;) &#125; render()&#123; return &lt;/C &#123;...this.state&#125; &#123;...mapDispatchToProps(this.context.store.dispatch)&#125; &gt; &#125; &#125;&#125;;export &#123;Provider, connect&#125;]]></content>
      <categories>
        <category>react-redux和redux</category>
      </categories>
      <tags>
        <tag>react-redux和redux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMware Workstation Pro激活]]></title>
    <url>%2F2018%2F12%2F07%2FVMware-Workstation-Pro%E6%BF%80%E6%B4%BB%2F</url>
    <content type="text"><![CDATA[下载 到 VMware Workstations 官网下载对应版本的虚拟机。 激活 VMware Workstation Pro 15.0.2 官方版+激活密钥: 123456789101112&gt; ZC10K-8EF57-084QZ-VXYXE-ZF2XF&gt; &gt; UF71K-2TW5J-M88QZ-8WMNT-WKUY4&gt; &gt; AZ7MK-44Y1J-H819Z-WMYNC-N7ATF&gt; &gt; CU702-DRD1M-H89GP-JFW5E-YL8X6&gt; &gt; YY5EA-00XDJ-480RP-35QQV-XY8F6&gt; &gt; VA510-23F57-M85PY-7FN7C-MCRG0&gt;]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[faststone capture 注册码]]></title>
    <url>%2F2018%2F12%2F07%2Ffaststone%20capture%20%E6%B3%A8%E5%86%8C%E7%A0%81%2F</url>
    <content type="text"><![CDATA[下载 点击 FastStone Capture 下载软件 破解 FastStone Capture 8.4 注册码: name：bluman serial/序列号/注册码：VPISCJULXUFGDDXYAUYF FastStone Capture 是一款很好用的截图软件，推荐使用]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebStorm (Jetbrains) 全系列软件永久破解方法]]></title>
    <url>%2F2018%2F12%2F07%2FWebStorm-Jetbrains-%E5%85%A8%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[下载 这里以下载 WebStorm 来演示，其他都一样。 到官网 WebStorm 下载软件，还可以点击 Previous versions 下载之前的版本。 注意：由于 WebStorm 最新版不太稳定，用破解补丁破解容易出现闪退现象，建议不下载最新版本的WebStorm 破解补丁激活WebStorm 到百度网盘下载 文件 ，JetbrainsCrack-release-enc.jar，放置到 WebStorm安装目录的\bin目录下（位置可随意，只要配置文件填写相对应的路径）。 在 WebStorm安装目录的\bin目录下找到 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions ，以文本格式打开并同时在两个文件最后追加 -javaagent:G:\你WebStorm的安装路径\bin\JetbrainsCrack-release-enc.jar，注意路径修改成你的WebStorm安装路径，然后保存。 12&gt; -javaagent:G:\webstorm\WebStorm 2018.3.1\bin\JetbrainsCrack-release-enc.jar&gt; 启动WebStorm ,选择激活码激活，输入如下内容激活: 123456789101112131415161718192021222324252627&gt; &gt; ThisCrackLicenseId-&#123;&gt; &quot;licenseId&quot;:&quot;11011&quot;,&gt; &quot;licenseeName&quot;:&quot;WeChat&quot;,&gt; &quot;assigneeName&quot;:&quot;IT--Pig&quot;,&gt; &quot;assigneeEmail&quot;:&quot;1113449881@qq.com&quot;,&gt; &quot;licenseRestriction&quot;:&quot;&quot;,&gt; &quot;checkConcurrentUse&quot;:false,&gt; &quot;products&quot;:[&gt; &#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,&gt; &#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;&gt; ],&gt; &quot;hash&quot;:&quot;2911276/0&quot;,&gt; &quot;gracePeriodDays&quot;:7,&gt; &quot;autoProlongated&quot;:false&#125;&gt; &gt;]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10破解]]></title>
    <url>%2F2018%2F12%2F07%2FWindows10%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[下载 到 Windows 10 官网，按照具体步骤下载Windows10系统 破解 到百度网盘下载 破解器 提取码: nrzr 下载完解压到对应的文件夹下，单击运行，稍等一会，破解就成功了。]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Adobe系列软件破解]]></title>
    <url>%2F2018%2F12%2F07%2FAdobe%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[下载 到 Adobe 官网 下载你需要的对应的软件。 破解 到百度网盘下载 Adobe 全能软件破解器 提取码: cy4p 下载完解压到对应的目录，双击运行 amtemu.v0.9.2-painter.exe ，选择好要破解的Adobe软件，点击 Install 运行安装，选择对应软件的 amtlib.dll 文件，自动替换为破解后的 amtlib.dll 文件，出现 OK 就是破解成功。]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mark Man 软件破解方法]]></title>
    <url>%2F2018%2F12%2F07%2FMark-Man-%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[下载 点击 Mark Man 到官网下载软件。 破解 到 百度网盘, 下载 Mark Man 破解版的压缩包，解压到对应的文件夹下。提取码: b68y 安装好MarkMan之后，去安装根目录替换MarkManOne.swf破解成功，无广告，可以保存编辑状态。]]></content>
      <categories>
        <category>前端必备软件</category>
      </categories>
      <tags>
        <tag>前端必备软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基础知识]]></title>
    <url>%2F2018%2F12%2F04%2FGit%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[GIT基础知识 什么是git？ 分布式版本控制系统，它是由Linux（全球比较大的服务器系统）创始人花两周使用C语言编写的，(在GIT命令窗口中一般是执行Linux命令) 什么是版本控制系统？ 能够把之前操作的具体信息记录下来，方便日后的更改。 备份文件 记录历史 回到过去 多端共享 团队协作 常用的版本控制系统 git：分布式版本控制系统 svn：集中式版本控制系统 面试题：分布式和集中式的区别？ [集中式]： 想要做历史记录的查看或者备份，必须连接到中央服务器才可以（需要联网） 处理速度没有git快 [分布式]： 每个开发者本地都是一个单独的仓库，在自己的仓库中就可以完成历史版本记录和查看（不需要联网） git处理的速度更快（git是按照数据存储的） Linux操作系统中常用的命令 ls：查看当前目录下的文件（或文件夹） -l ：查看详细信息 -a：查看隐藏文件 -la：同时具备以上特点 clear：清屏 cd: 目录切换 cd ../ 返回上级目录 cd ./ 返回当前目录 cd / 返回根目录 cd xxx 进入到指定文件夹 cd E 进入到指定的磁盘 mkdir 创建文件夹 touch 创建一个空文件 可以创建无文件名的文件，例如：touch .gitignore 在电脑隐藏文件后缀名的情况下，我们也不至于创建出1.txt.txt这样重复后缀名的文件 vi 向指定文件中插入内容 例如：vi.txt 首先进入命令窗口模式 我们先按i，进入到插入内容模式 编辑需要写的内容 按ESC键，再按英文下的 : 键，再按wq（保存并退出） 按 q！（强制退出，新输入的内容不保存） echo xxx &gt; 1.txt 把xxx内容放到1.txt文件中，如果没有这个文件则创建这个文件（新存放的内容会替换原有文件的内容） echo xxx &gt;&gt; 1.txt 新的内容会追加到原有内容的后面 cat 查看文件中的内容 cp 拷贝文件 rm 删除文件 -r 递归删除（把当前文件夹中所有的后代元素都遍历到删除） -f 强制删除 -rf 上面两种合并到一起，没有办法还原回来，使用要慎重 Git的工作原理和流程 安装完成git后，我们应该先把基础信息配置一下（自己需要配置一次即可） 123456&gt; $ git config -l 查看当前本机的配置清单&gt; $ git config --global user.name xxx &gt; $ git config --global user.email xxx&gt; (xxx写github/coding等平台的账号和邮箱)&gt; &gt; Git的工作流程 Git是分布式版本控制系统，每一台客户端都是一个独立的git仓库（有git工作的全套机制） 一个git仓库分为三个区域; 工作区：平时写代码的地方 暂存区：写好的一些代码暂时存储的地方 历史区：生成一个个版本记录得地方 1.创建GIT仓库 在指定目录中，打开git bash命令行，执行 git init ，相当于以当前目录作为基础，创建了一个本地git仓库 创建完成后，会在项目的根目录中展示 .git 这个隐藏文件：有这个.git文件的才叫做git仓库，没有则不能被称为git仓库（因为暂存区和历史区都是存在 .git 文件夹中的） 2.把工作区的内容提交到暂存区 12345678910&gt; $ git add xxx 把某个文件提交到暂存区&gt; $ git add . 把所有修改的文件（修改和新增的包含，删除的不包含）提交到暂存区&gt; $ git add -u 把所有修改的文件（包含修改和删除的，不包含新增的）&gt; $ git add -A 是点和u的集合体，（所有修改，新增，删除的信息都会提交到暂存区），但是真实效果中两者都差不多，用哪个都可以&gt; &gt; &gt; $ git status 查看当前文件的状态&gt; 红色：在工作区中，还没有提交到暂存区&gt; 绿色：在暂存区中，还没有提交到历史区&gt; 如果在提交的时候，有些内容不想提交，我们可以增加git提交的忽略文件： .gitignore (没有文件名只有后缀名) .gitignore 中的信息： .idea // 使用WS打开项目或者编辑项目，自动会生成的文件 node_modules // 使用npm安装模块的时候，当前安装在项目中的第三方模块都在这个文件夹中（之所以忽略是因为文件太大了） .DS_Store (mac本中的文件)等等 3.把暂存区提交到历史区123456$ git commit$ git commit -m'注释内容'$ git commit -a -m'注释内容' 把提交到暂存区和提交到历史区合并到一起完成。但是只适合已经提交过一次的文件，被修改后可以快速提交。但是对于新增的文件，一次都没有提交过的，是不允许这样操作的。 【root-commit】根提交： 简单理解为：第一次提交到历史区域，如果我们创建一个新的仓库。但是没有做根提交，此时我们仓库中没有任何分支（哪怕是master），也就不存在所谓的分支切换（当前仓库还不完整，只有一个工作流程走完一遍才算完整） 4.工作流中的一些细节知识： 不管是从工作区提交到暂存区，还是从暂存区提交到历史区，每一个区域当前的内容是已知保存下来的不会消失。 123$ git log或$ git reflog 都是查看历史提交记录的（也相当于查看历史版本号），在没有历史版本回滚的时候，我们用哪个都可以。如果有历史版本回滚，git log 只能查看当前回退版本以前的版本 1$ git rm --cached . -r 可以把 . 替换为具体的文件名，这条命令的意思是： 从暂存区把所有内容（或者是你指定的具体文件）都撤回到工作区（不管暂存区中的内容是否已经提交到历史版本上了，也不管是你第几次放到暂存区的，统统撤回到工作区） 这种方式太暴力，我们用的很少，不推荐使用 1$ git checkout . 这条命令的意思是： 把暂存区内容撤回工作去（覆盖现有工作区中的内容无法找回）。 也可以理解为：用上一个暂存区存储的内容覆盖现有工作区的内容，工作区内容变为和上一个暂存区一样的内容，暂存区内容还在。 存在问题：只能限制当前代码还没有提交的情况，当前代码没提交回滚的是上一次提交到暂存区的内容（和工作区内容不一样）；如果当前这次也提交了，暂存区和工作区一样，回滚回来也是一样的，这个方式就解决不了了。 解决问题： 输入命令 $ git reset HEAD . : 在暂存区中，回滚到上一次暂存区中记录的内容（暂存区先回滚一次） 输入命令 $ git checkout . : 把最新暂存区的内容回滚到工作区，替换工作区中的内容 1$ git diff 工作区 VS 暂存区 ：git diff 工作区 VS 历史区 ： git diff master 暂存区 VS 历史区 ： git diff --cached 查看不同区域之间代码的不同，我们一般都是基于可视化的页面来查看不一样的 最重要的代码回滚技巧： 1$ git reset --hard 版本号 git log 可以查看版本号 回滚的时候指定的版本号不一定非常全，有七八位即可 当我们回滚到某一个历史版本之后，暂存区和工作区的内容都将被这个版本内容所代替 1$ history &gt; xxx.txt //（把历史操作步骤输出） 团队协作开发下的git操作 前面讲的都是单独开发，在自己本地建立git仓库的一系列操作流程，在团队写作开发下，流程还是有所区别的 1. 创建中央仓库 一般是由团队技术LEADER或者指派人完成的，仓库中默认是有一些初始化文件的 中央仓库可能是在：gitHub，Coding，自己公司的git仓库服务平台，自己公司的服务器等… 基于gitHub创建远程仓库，创建完成后会生成一个远程地址，例如： https//github.com/username/Repository name.git 作为LEADER，还需要把项目中一些基础的信息提交到远程仓库上： 在自己本地创建一个仓库，把一些基础内容都放在仓库中 把新增加的内容提交到本地仓库历史区中 让本地仓库和远程仓库保持关联 把本地仓库历史区中的信息同步（推送）到远程仓库上 让本地仓库和远程仓库保持关联： 1234567&gt; $ git remote add 名字（一般都叫做origin） 远程仓库地址&gt; &gt; $ git remote rm 名字 // 移除关联&gt; &gt; $ git remote -v // 查看当前仓库和哪些远程仓库保持关联&gt; &gt; 让本地历史区信息和远程仓库信息保持同步： 第一种方法： 12345678&gt; $ git push origin master&gt; // 把本地信息推送到远程仓库上&gt; &gt; $ git pull origin master&gt; // 把远程的拉取到本地仓库&gt; &gt; （origin 是本地和远程仓库关联的那个名字，master 是远程仓库的主分支）&gt; 第二种方法：（推荐使用） 我们创建完成后远程仓库后，可以直接通过 git clone 仓库地址 仓库别名（可以不写） 的方式把远程仓库克隆到本地： 相当于在本地创建了一个仓库 也让本地这个仓库和远程仓库保持了连接（名字：origin） 也把远程仓库现有的内容克隆到了本地 2. 无分支模式下的团队协作 作为开发者每天来的第一件事情或者提交代码之前，都要先pull一下 【如果远程仓库和本地仓库不是同一个文件同一行代码冲突】 git 会自动依赖于 Fast-forward 模式进行合并 自动合并后，我们重新提交即可 git add/commit/push 【同一个文件的同一行代码冲突】 找到冲突的文件，留下自己想要的代码 不管之前是否commit过，都要重新的commit，然后push即可 2.单独分支管理 每天第一件事情，就是创建一个dev分支并切换到这个分支上 正常的开发代码，把每天开发的任务都先提交到自己的分支上 提交到远程仓库上： 把本地自己分支DEV中的内容，合并到本地自己的MASTER 分支下 把自己本地创建的分支删除（可以不删除，但是有的公司不希望远程中出现分支，或者避免开发人员的分支冲突，提交之前都要把自己创建的分支删除掉） 和第一种只使用MASTER分支一样了，把本地最新合并的MASTER分支代码，提交到远程仓库的MADTER下，（冲突合并即可） 操作分支的基础命令： 12345678&gt; $ git branch //查看现有的分支&gt; $ git branch xxx //创建一个新的分支（当切换到某个分支上的时候，会把当前MASTER分支中的新信息同步到这个分支上）&gt; $ git checkout xxx //切换到某个分支上&gt; $ git checkout -b xxx //创建一个新的分支并且切换到这个分支上&gt; $ git branch -D xxx //删除某个分支（一定要切换到其他分支上才可以删除当前分支）&gt; $ git merge xxx //合并分支内容&gt; $ git log --graph / --oneline //再有分支的情况下，可以更清楚地查看分支的提交和合并内容（了解就好）&gt; GitHub界面操作给别的仓库提交代码修改或建议 首先fork别人的仓库 把别人的仓库克隆一份一模一样的，放到自己的账号下，变为自己的仓库（我们平时可以修改自己仓库的源码） fork的仓库和别人的原始的仓库会默认建立一些关系，我们可以把自己仓库中和别人不一样的地方，提交给别人，用（pull-request） 把自己fork的仓库，克隆到本地 以后自己有一些新的代码心得，可以自己尝试去修改，然后同步到自己fork的仓库中 在github中点击 new pull request GitHub还可以发布非后台项目 GitHub只提供了web站点的发布，后台项目没有提供必要的环境 把整个仓库作为一个项目发布（这种模式不常用） master是项目代码，gh-pages分支下存储的是项目预览页面的代码 其他人克隆研究的是master分支下的代码 看介绍页面，看的是gh-pages分支下的代码 创建一个仓库 把仓库克隆到本地 把源码传到master分支上 在本地仓库中创建gh-pages分支 把介绍页面放在gh-pages分支下 把介绍页面的内容上传到github的gh-pages分之下 访问页面：http://用户名.github.io/仓库名/页面名.html （如果页面是index可以忽略不写） 把自己写的纯静态页面项目通过github地址可以看到页面效果 第一步，在github上新建一个仓库，把远程仓库通过 git clone xxx克隆到本地 第二步，把自己写好的作品放在本地仓库中 第三步，通过git add -A , git commit -m, git push origin master 三步操作，把自己的项目同步到远程仓库github中 以后修改后，重新执行这三步推送即可 在投简历的时候，把网址 https://用户名.github.io/仓库名 写到简历上就可以访问到页面效果。如果觉得地址太长不好记，也可以通过草料二维码 ,来制作自己喜欢的二维码]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Node+Git搭建博客]]></title>
    <url>%2F2018%2F12%2F03%2FHexo-Node-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[从零开始搭建博客第一部分，Github注册及Github Pages建立 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一：注册Github1：打开Github首页，点击Sign up 进行注册。 二：Github Pages 静态网页建立1：在新页面点击 NEW 按钮，创建属于自己的新仓库。 2: 点击 Code3: 点击 Create new file4: 输入 index.html，在 Edit new file 书写内容。5：点击 Commit new file 进行创建。6：用浏览器打开 用户名.github.ioGithub Pages 静态网页建立完成。 三：Hexo博客本地环境安装1: 安装 Node2: 安装 Git4: 初始化 Hexo 电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。 空白处右键点击 Git Bash Here 安装 Hexo1$ npm install -g hexo-cli 等待运行完成后依次输入以下命令 123$ hexo init &lt;新建文件夹的名称&gt;$ cd &lt;新建文件夹的名称&gt;$ npm install 注意:后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。 此时Hexo框架的本地搭建已经完成了。我们来运行一下看看： 命令行依次输入以下命令: 123$ hexo clean #清除浏览器缓存$ hexo g$ hexo s 浏览器中打开(http://locakhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行。 四：本地博客发布到Github Pages1：需要在Github上创建好Github Pages仓库2：安装将 Hexo 部署到 Git 的插件 在站点目录中运行命令行输入 npm install hexo-deployer-git --save 后续还要安装各种插件，实现博客的各种功能。等待插件安装完成 3：将本地目录与Github关联起来 命令行输入 1$ ssh-keygen -t rsa -C "邮箱地址" 1： 这里要输入之前注册Github时的邮箱，例如我之前注册用的是 123@qq.com，那命令行就输入ssh-keygen -t rsa -C “123@qq.com“输入后一直回车。 2：打开 C:\Users\ 用户名，文件夹内寻找 .ssh 文件夹 3：文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Vscode 打开，复制里面的的内容。 4：打开Github 点击右上角的头像 Settings 选择SSH and GPG keys 5：点击 New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击 Add SSH key 完成添加。 6: 此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com，弹出的内容输入yes，看到出现Hi ! You’ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个应该是你Github的用户名。 4: 修改Hexo站点的 _config.yml文件 进入博客文件夹， 找到 _config.yml 博客的配置文件。以后修改博客的样式或内容会多次用到它。 123456789101112# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 123456# URL 网址## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: #修改为https://&lt;用户名&gt;.github.ioroot: / #如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。permalink: :year/:month/:day/:title/ #文章的永久链接格式permalink_defaults: #永久链接中各部分的默认值 在文件底部 deploy 添加如下代码： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: #部署部分的设置type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 5: 保存配置，将生成的本地页面上传至Github 命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。 完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。 注意：也可以直接输入hexo g -d直接完成渲染和上传。 上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。 五：Hexo博客主题安装及Next主题个性化修改基于Next主题的修改和配置 注意：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为_/themes/next/config.yml。 1：主题选择 到 Nexo官网主题页选择喜欢的主题。每个主题配置方法略有不同，建议使用流行主题，推荐Next主题，因为我的博客就是用Next主题搭建的。 2：主题修改主题安装 Next主题文档页面 Nest主题Github页面 博客根目录打开命令行输入 1git clone https://github.com/theme-next/hexo-theme-next themes/next 1：安装完成后，打开 博客配置文件 修改theme 主题： 1234# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next #当前主题名称。值为false时禁用主题 2：修改 主题配置文件 是根目录/themes/next目录下的_config.yml文件。 修改菜单及创建分类页 1:定位到 Hexo 站点目录下,在命令行输入如下命令： 1$ hexo new page tags 新建出标签页 同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 2:设置页面类型：编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 12345---title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 3:修改 主题配置 文件下的menu项： 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 修改主题风格 Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 12345678# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 设置作者头像 编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。 本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg 123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/cat.jpg # If true, the avatar would be dispalyed in circle. rounded: false # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true 设置作者昵称与站点描述12345678# Site 网站title: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 设置代码高亮主题 NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties： 编辑主题配置文件，更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如： 1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 侧边栏社交链接 侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。 1234567891011121314151617# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@qq.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。 1234social_icons: enable: true icons_only: false transition: false 开启打赏功能 越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。 123456789# Reward# If true, reward would be displayed in every article by default.# And you can show or hide one article specially through add page variable `reward: true/false`.reward: enable: true comment: 如果觉得文本对您有帮助，欢迎打赏 wechatpay: /images/wechat.png alipay: /images/zhifubao.jpg bitcoin: /images/qq.png 注意：将保存的图片放到 /source/images/图片名称 修改打赏字体不闪动 鼠标一指就疯狂抖动。 修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。 12345#QR &gt; div:hover p &#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; 这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。 开启友情链接 or 侧边栏推荐阅读 主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。 link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接 这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 1234567# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inline#links: #Title: http://example.com hexo生成博文插入图片显示不出来 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在hexo的目录下执行npm install https://github.com/CodeFalling/hexo-asset-image --save（需要等待一段时间）。 完成安装后用hexo新建文章 hexo new &quot;文章标题&quot; 的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。 只要使用![logo](本地图片测试/logo.jpg)就可以插入图片。其中[]里面不写文字则没有图片标题。 文章左侧的目录如何弄出来？ 1、首先在你的markdown文件里面要有标题，所谓标题就是例如这种一级标题(#)，二级标题(##)，三级标题(###)的。 2、在主题的_config文件里面，将toc的enable设置为true就ok了，默认的目录是有序号的，如果你不想要序号，你需要把number置为false 。 设置 RSS NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置 文件，设定 rss 字段的值： false：禁用 RSS，不在页面上显示 RSS 连接。 留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。 安装方法：根目录下命令行输入npm install hexo-generator-feed --save 具体的链接地址：适用于已经烧制过Feed的情形。建议直接使用插件，比较省事。 设置网站图标 在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico。 把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。 在 主题配置文件 内搜索favicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico。 实现全站及文章字数统计及阅读时长 根目录命令运行： 1npm install hexo-symbols-count-time --save 博客配置文件底部添加如下内容，保存。 1234567# 1，实现全站及文章数字统计及阅读时长# 运行 npm install hexo-symbols-count-time --savesymbols_count_time: symbols: true time: true total_symbols: true total_time: true 添加顶部加载条 根目录打开命令行，输入如下命令： 1git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace 然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。 1234567891011121314151617181920# Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pacepace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For examplepace_theme: pace-theme-center-simple# pace_theme: pace-theme-minimal 自定义鼠标样式 打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码: 1234567// 鼠标样式 * &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important &#125; 在EasyIcon中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。 第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。 1234567// 鼠标样式 * &#123; cursor: url(&quot;/images/cat.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;&quot;/images/cat2.ico&quot;&quot;),auto!important &#125; 实现点击出现桃心 以及 爆炸效果 在/themes/next/source/js/src下新建文件love.js并填入如下代码： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 或建一个叫fireworks.js的文件并写入如下代码： 1"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;; 打开themes/next/layout/_layout.swig,在上面写下如下代码： 123456789&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 在 主题配置文件 最下方加入如下代码： 123# Fireworks and lovefireworks: truelove: false 注意：fireworks是爆炸效果，love是心形效果。两个不能同时开。 修改网页底部的小图标 在 主题配置文件 搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。 1234567891011121314footer: # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons # `heart` is recommended with animation in red (#ff0000). name: user # If you want to animate the icon, set it to true. animated: true #animated自动为闪动开关，设置为true后图标会闪动。 # Change the color of icon, using Hex Code. color: &quot;#808080&quot; 去掉页面底部的强力驱动信息及设置备案信息 主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容 1234567891011121314151617181920# If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- powered: # Hexo link (Powered by Hexo). enable: true # Version info of Hexo after Hexo link (vX.X.X). version: true theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: true # Version info of NexT after scheme info (vX.X.X). version: true # ------------------------------------------------------------- # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer. # http://www.miitbeian.gov.cn beian: #如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 enable: false icp: 添加动态背景注意：尽量不要添加，耗费资源较大，加载速度非常慢 1.根目录打开命令行，输入： 1$ git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest 2.主题配置文件搜索canvas-nest字段，enable项设置为true。 123456789# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: enable: false onmobile: true # display on mobile or not color: &apos;0,0,255&apos; # RGB values, use &apos;,&apos; to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines 3.其他配置项说明： color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 onmobile：是否在手机端显示。 增加波浪背景动画 根目录打开命令行，输入: 1git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three 主题配置文件搜索three_waves字段，设置为true 1234567891011# Internal version: 1.0.0 # See: https://github.com/theme-next/theme-next-three # Example: # three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js # three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js # canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js # canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js three: three_waves: canvas_lines: canvas_sphere: three_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。 添加静态背景 打开博客根目录/themes/next/source/css/_custom/custom.styl文件，编辑如下： 123456// Custom styles.body &#123; background-image: url(/images/background.png); //动图也可以添加 background-attachment: fixed; // 不随屏幕滚动而滚动 background-repeat: repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺 background-size: contain; // 等比例铺满屏幕 博客主页自定义样式修改 打开博客根目录/themes/next/source/css/_custom/custom.styl文件: 用 css 语言修改自己想要的主页样式就可以 在右上角实现fork me on github按钮 最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。 12345# Follow me on GitHub banner in right-top corner.# Usage: `permalink || title`# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the title and aria-label name.github_banner: https://github.com/wudiufo || Follow me on GitHub ||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。 增加回到顶部按钮及显示当前浏览进度 主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。 123456789# Back to top in sidebar (only for Pisces | Gemini). b2t: true # Scroll percent label in b2t button. # scrollpercent字段设置为true即可实现当前浏览进度的显示。 scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). onmobile: true 修改顶部菜单与下方信息栏的间隙大小 主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。 12# Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 网站标题栏背景颜色 打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码： 1234// 网站标题栏背景颜色.site-meta &#123; background: #FF0033; //修改为自己喜欢的颜色&#125; 为博客加上萌萌的动图 首先安装插件，根目录命令行输入： 1$ npm install --save hexo-helper-live2d 主题配置文件最下方添加如下代码: 123456789101112131415161718192021# Live2D## https://github.com/xiazeyu/live2d-widget.js## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 更多设置可以查看官方文档 添加DaoVoice 实现在线联系 本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。 首先到DaoVoice注册一个Daovioce账号。 注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置– 安装到网站。在下方的代码中会看到app_id: “xxxx”字样。 打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码： 123# DaoVoice daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。 最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。 主页文章添加阴影效果 打开\themes\next\source\css_custom\custom.styl,加入如下代码： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 可以自行修改代码来修改阴影效果 增加本地搜索功能 首先安装插件，根目录命令行输入: 1$ npm install hexo-generator-searchdb --save 编辑博客配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 主题配置文件搜索local_search字段，设置enable为true 123# Local searchlocal_search: enable: true 添加图片懒加载 博客根目录打开命令输入 1$ git clone https://github.com/theme-next/theme-next-jquery-lazyload themes/next/source/lib/jquery_lazyload 然后在配置文件中搜索 lazyload,将其修改为true123# Added switch option for separated repo in 6.0.0.# Dependencies: https://github.com/theme-next/theme-next-jquery-lazyloadlazyload: true 添加评论添加方法 在来必力的官网上注册账号。 在此处获取data-uid。 打开NexT主题的配置文件—config中，搜索livere_uid，将livere_uid前面的#号去掉，将id填写到livere_uid：后面。 123# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)#livere_uid: your uid 代码块复制功能前言为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo Next主题博客的代码块复制功能配置。 下载需要下载 clipboard.js 主页 Github 提供下载:（推荐用这个） clipboard.min.js 将下载的文件存到如下目录：（相对目录为工程目录，没有目录则创建） .\themes\next\source\lib\zclip\clipboard.min.js 导入 新建文件 custom.js，目录如下：（相对目录为工程目录） \themes\next\source\js\src\custom.js 修改 custom.js为如下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//此函数用于创建复制按钮function createCopyBtns() &#123; var $codeArea = $("figure table"); //查看页面是否具有代码区域，没有代码块则不创建 复制按钮 if ($codeArea.length &gt; 0) &#123; //复制成功后将要干的事情 function changeToSuccess(item) &#123; $imgOK = $("#copyBtn").find("#imgSuccess"); if ($imgOK.css("display") == "none") &#123; $imgOK.css(&#123; opacity: 0, display: "block" &#125;); $imgOK.animate(&#123; opacity: 1 &#125;, 1000); setTimeout(function() &#123; $imgOK.animate(&#123; opacity: 0 &#125;, 2000); &#125;, 2000); setTimeout(function() &#123; $imgOK.css("display", "none"); &#125;, 4000); &#125;; &#125;; //创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮 //值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码) $(".post-body").before('&lt;div id="copyBtn" style="opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em"&gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'); //创建 复制 插件，绑定单机时间到 指定元素，支持JQuery var clipboard = new Clipboard('#copyBtn', &#123; target: function() &#123; //返回需要复制的元素内容 return document.querySelector("[copyFlag]"); &#125;, isSupported: function() &#123; //支持复制内容 return document.querySelector("[copyFlag]"); &#125; &#125;); //复制成功事件绑定 clipboard.on('success', function(e) &#123; //清除内容被选择状态 e.clearSelection(); changeToSuccess(e); &#125;); //复制失败绑定事件 clipboard.on('error', function(e) &#123; console.error('Action:', e.action); console.error('Trigger:', e.trigger); &#125;); //鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果 $("#copyBtn").hover( function() &#123; $(this).stop(); $(this).css("opacity", 1); &#125;, function() &#123; $(this).animate(&#123; opacity: 0 &#125;, 2000); &#125; ); &#125;&#125;//感应鼠标是否在代码区$("figure").hover( function() &#123; //-------鼠标活动在代码块内 //移除之前含有复制标志代码块的 copyFlag $("[copyFlag]").removeAttr("copyFlag"); //在新的（当前鼠标所在代码区）代码块插入标志：copyFlag $(this).find(".code").attr("copyFlag", 1); //获取复制按钮 $copyBtn = $("#copyBtn"); if ($copyBtn.lenght != 0) &#123; //获取到按钮的前提下进行一下操作 //停止按钮动画效果 //设置为 显示状态 //修改 复制按钮 位置到 当前代码块开始部位 //设置代码块 左侧位置 $copyBtn.stop(); $copyBtn.css("opacity", 0.8); $copyBtn.css("display", "block"); $copyBtn.css("top", parseInt($copyBtn.css("top")) + $(this).offset().top - $copyBtn.offset().top + 3); $copyBtn.css("left", -$copyBtn.width() - 3); &#125; &#125;, function() &#123; //-------鼠标离开代码块 //设置复制按钮可见度 2秒内到 0 $("#copyBtn").animate(&#123; opacity: 0 &#125;, 2000); &#125;);//页面载入完成后，创建复制按钮$(document).ready(function() &#123; createCopyBtns();&#125;); 配置 新建文件 custom.swig ，目录：.\themes\next\layout_custom\custom.swig（相对目录为工程目录） 12&lt;script type=&quot;text/javascript&quot; src=&quot;/lib/zclip/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom.js&quot;&gt;&lt;/script&gt; 修改文件 _layout.swig ，目录：\themes\next\layout\_layout.swig（相对目录为工程目录） 添加如下代码： 12345678&lt;!doctype html&gt; &#123;% include &apos;_third-party/math/mathjax.swig&apos; %&#125; &#123;% include &apos;_custom/custom.swig&apos; %&#125;&lt;/body&gt;&lt;/html&gt; 向文件中 &lt;/body&gt; 前一行插入文件引用，如第 15 行效果。 1&#123;% include &apos;_custom/custom.swig&apos; %&#125; 在主题配置文件_config.yml中找到以下代码： 将enable修改为true，show_result修改为true 123456789codeblock: # Manual define the border radius in codeblock # Leave it empty for the default 1 border_radius: # Add copy button on codeblock copy_button: enable: true # Show text copy result show_result: true 六：Hexo撰写文章一、创建文章 在站点文件夹中打开git bash，输入如下命令创建文章，其中title为文章的标题： 1hexo new "title" 此时就会在source/_post文件夹中创建了一个文件，命名为：title.md，而这个文件就是将要发布到网站上的原始文件，记录文章内容，以下我们将要在这个文件中写下我们的第一篇博客 二、编写文章（基于Markdown） 推荐大家一款简洁易用的markdown编辑器 Typora,点击下载。 Markdown语法及在线编辑 1.模板设置 当我们使用命令 hexo new “title” 去创建我们的文章时，Hexo会根据/scaffolds/post.md文件对新建文件进行初始化，换言之，/scaffolds/post.md文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯，一个简单的示例如下： 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: --- 2.头部设置 在博客文章的开头会有对文章的说明文字，叫做文章头部，文章的头部除了可以设置文章标题、书写日期等基础信息外，还可以对文章添加标签、分类等，一个简单的示例如下: 1234567891011121314---title: Title #标题date: YYYY-MM-DD HH:MM:SS #文件建立日期tags: #标签（不适用于分页）- 标签1- 标签2categories: #分类（不适用于分页）- 分类1- 分类2layout: #布局updated: YYYY-MM-DD HH:MM:SS #文件更新日期comments：true #开启文章的评论功能permalink：覆盖文章网址--- 注意，属性和属性值之间必须有一个空格，否则会解析错误 3.首页显示 1.在Hexo框架博客的首页会显示文章的内容（默认显示文章的全部内容），如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简，只需在文章中使用 &lt;!--more--&gt;标志，表示只会显示标志前面的内容 2.推荐使用： 在主题配置文件中找到auto_excerpt，将enable变为true，代码如下： 12345# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 #长度可自由调节 三，顶部统计每篇文章阅读次数在主题配置文件中查找busuanzi_count,将其按照如下方式修改： 12345678910# Show Views/Visitors of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzibusuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 七，生成sitemap站点地图百度+谷歌都无法搜索到我的博客 不能忍 1.先确认博客是否被收录 在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有。 1site:写你要搜索的域名 # site:wudiufo.github.io 2.创建站点地图文件 站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。 先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件: 12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在博客根目录的_config.yml中添加如下代码: 12345baidusitemap: path: baidusitemap.xmlsitemap: path: sitemap.xml 执行以下命令，编译你的博客 1$ hexo g 在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了 执行 hexo s 看站点地图是否生成 3.让百度,360和谷歌收录我们的博客验证网站在百度和360，谷歌上分别搜索： 1site:写你要搜索的域名 # site:wudiufo.github.io 其中的域名换成你的博客域名，如果此前没有进行过操作，应该是搜不到的，并且搜索出来的结果含有搜索引擎提交入口 分别进入搜索引擎提交入口，添加域名，选择验证网站，有3种验证方式，本文推荐采用HTML标签验证 这里演示百度站长平台 打开Hexo主题配置文件，添加以下两行: 12google_site_verification: #索引擎提供给你的HTML标签的content后的字符串baidu-site-verification: #索引擎提供给你的HTML标签content后的字符串 还有其他搜索引擎，自行添加 然后运行： 12hexo clean &amp;&amp; hexo generatehexo deploy 然后点击验证，就可以通过验证了 4，百度自动推送 将主题配置文件中的baidu_push设置为true，然后将/next/layout/_scripts文件夹下面的baidu-push.swig文件中的 ` ` 替换为百度提供的自动推送代码,如下： 1234567891011121314&lt;script&gt;(function()&#123; var bp = document.createElement('script'); var curProtocol = window.location.protocol.split(':')[0]; if (curProtocol === 'https') &#123; bp.src = 'https://zz.bdstatic.com/linksubmit/push.js'; &#125; else &#123; bp.src = 'http://push.zhanzhang.baidu.com/push.js'; &#125; var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(bp, s);&#125;)();&lt;/script&gt; 5.谷歌收录我们的博客谷歌操作比较简单，就是向Google站长工具提交sitemap登录Google账号，添加了站点验证通过后，选择站点，之后在抓取——站点地图——添加/测试站点地图]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo+Node+Git搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
