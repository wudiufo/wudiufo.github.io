<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git基础知识]]></title>
    <url>%2F2018%2F12%2F04%2FGit%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[GIT基础知识 什么是git？ 分布式版本控制系统，它是由Linux（全球比较大的服务器系统）创始人花两周使用C语言编写的，(在GIT命令窗口中一般是执行Linux命令) 什么是版本控制系统？ 能够把之前操作的具体信息记录下来，方便日后的更改。 备份文件 记录历史 回到过去 多端共享 团队协作 常用的版本控制系统 git：分布式版本控制系统 svn：集中式版本控制系统 面试题：分布式和集中式的区别？ [集中式]： 想要做历史记录的查看或者备份，必须连接到中央服务器才可以（需要联网） 处理速度没有git快 [分布式]： 每个开发者本地都是一个单独的仓库，在自己的仓库中就可以完成历史版本记录和查看（不需要联网） git处理的速度更快（git是按照数据存储的） Linux操作系统中常用的命令 ls：查看当前目录下的文件（或文件夹） -l ：查看详细信息 -a：查看隐藏文件 -la：同时具备以上特点 clear：清屏 cd: 目录切换 cd ../ 返回上级目录 cd ./ 返回当前目录 cd / 返回根目录 cd xxx 进入到指定文件夹 cd E 进入到指定的磁盘 mkdir 创建文件夹 touch 创建一个空文件 可以创建无文件名的文件，例如：touch .gitignore 在电脑隐藏文件后缀名的情况下，我们也不至于创建出1.txt.txt这样重复后缀名的文件 vi 向指定文件中插入内容 例如：vi.txt 首先进入命令窗口模式 我们先按i，进入到插入内容模式 编辑需要写的内容 按ESC键，再按英文下的 : 键，再按wq（保存并退出） 按 q！（强制退出，新输入的内容不保存） echo xxx &gt; 1.txt 把xxx内容放到1.txt文件中，如果没有这个文件则创建这个文件（新存放的内容会替换原有文件的内容） echo xxx &gt;&gt; 1.txt 新的内容会追加到原有内容的后面 cat 查看文件中的内容 cp 拷贝文件 rm 删除文件 -r 递归删除（把当前文件夹中所有的后代元素都遍历到删除） -f 强制删除 -rf 上面两种合并到一起，没有办法还原回来，使用要慎重 Git的工作原理和流程 安装完成git后，我们应该先把基础信息配置一下（自己需要配置一次即可） 123456&gt; $ git config -l 查看当前本机的配置清单&gt; $ git config --global user.name xxx &gt; $ git config --global user.email xxx&gt; (xxx写github/coding等平台的账号和邮箱)&gt; &gt; Git的工作流程 Git是分布式版本控制系统，每一台客户端都是一个独立的git仓库（有git工作的全套机制） 一个git仓库分为三个区域; 工作区：平时写代码的地方 暂存区：写好的一些代码暂时存储的地方 历史区：生成一个个版本记录得地方 1.创建GIT仓库 在指定目录中，打开git bash命令行，执行 git init ，相当于以当前目录作为基础，创建了一个本地git仓库 创建完成后，会在项目的根目录中展示 .git 这个隐藏文件：有这个.git文件的才叫做git仓库，没有则不能被称为git仓库（因为暂存区和历史区都是存在 .git 文件夹中的） 2.把工作区的内容提交到暂存区 12345678910&gt; $ git add xxx 把某个文件提交到暂存区&gt; $ git add . 把所有修改的文件（修改和新增的包含，删除的不包含）提交到暂存区&gt; $ git add -u 把所有修改的文件（包含修改和删除的，不包含新增的）&gt; $ git add -A 是点和u的集合体，（所有修改，新增，删除的信息都会提交到暂存区），但是真实效果中两者都差不多，用哪个都可以&gt; &gt; &gt; $ git status 查看当前文件的状态&gt; 红色：在工作区中，还没有提交到暂存区&gt; 绿色：在暂存区中，还没有提交到历史区&gt; 3.把暂存区提交到历史区123456$ git commit$ git commit -m'注释内容'$ git commit -a -m'注释内容' 把提交到暂存区和提交到历史区合并到一起完成。但是只适合已经提交过一次的文件，被修改后可以快速提交。但是对于新增的文件，一次都没有提交过的，是不允许这样操作的。 【root-commit】根提交： 简单理解为：第一次提交到历史区域，如果我们创建一个新的仓库。但是没有做根提交，此时我们仓库中没有任何分支（哪怕是master），也就不存在所谓的分支切换（当前仓库还不完整，只有一个工作流程走完一遍才算完整）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Node+Git搭建博客]]></title>
    <url>%2F2018%2F12%2F03%2FHexo-Node-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[从零开始搭建博客第一部分，Github注册及Github Pages建立 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一：注册Github1：打开Github首页，点击Sign up 进行注册。 二：Github Pages 静态网页建立1：在新页面点击 NEW 按钮，创建属于自己的新仓库。 2: 点击 Code3: 点击 Create new file4: 输入 index.html，在 Edit new file 书写内容。5：点击 Commit new file 进行创建。6：用浏览器打开 用户名.github.ioGithub Pages 静态网页建立完成。 三：Hexo博客本地环境安装1: 安装 Node2: 安装 Git4: 初始化 Hexo 电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。 空白处右键点击 Git Bash Here 安装 Hexo1$ npm install -g hexo-cli 等待运行完成后依次输入以下命令 123$ hexo init &lt;新建文件夹的名称&gt;$ cd &lt;新建文件夹的名称&gt;$ npm install 注意:后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。 此时Hexo框架的本地搭建已经完成了。我们来运行一下看看： 命令行依次输入以下命令: 123$ hexo clean #清除浏览器缓存$ hexo g$ hexo s 浏览器中打开(http://locakhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行。 四：本地博客发布到Github Pages1：需要在Github上创建好Github Pages仓库2：安装将 Hexo 部署到 Git 的插件 在站点目录中运行命令行输入 npm install hexo-deployer-git --save 后续还要安装各种插件，实现博客的各种功能。等待插件安装完成 3：将本地目录与Github关联起来 命令行输入 1$ ssh-keygen -t rsa -C "邮箱地址" 1： 这里要输入之前注册Github时的邮箱，例如我之前注册用的是 123@qq.com，那命令行就输入ssh-keygen -t rsa -C “123@qq.com“输入后一直回车。 2：打开 C:\Users\ 用户名，文件夹内寻找 .ssh 文件夹 3：文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Vscode 打开，复制里面的的内容。 4：打开Github 点击右上角的头像 Settings 选择SSH and GPG keys 5：点击 New SSH key 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击 Add SSH key 完成添加。 6: 此时回到命令行。 试一下是否跟Github连接成功。命令行输入ssh -T git@github.com，弹出的内容输入yes，看到出现Hi ! You’ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个应该是你Github的用户名。 4: 修改Hexo站点的 _config.yml文件 进入博客文件夹， 找到 _config.yml 博客的配置文件。以后修改博客的样式或内容会多次用到它。 123456789101112# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 123456# URL 网址## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: #修改为https://&lt;用户名&gt;.github.ioroot: / #如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。permalink: :year/:month/:day/:title/ #文章的永久链接格式permalink_defaults: #永久链接中各部分的默认值 在文件底部 deploy 添加如下代码： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: #部署部分的设置type: gitrepo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.gitbranch: master 5: 保存配置，将生成的本地页面上传至Github 命令行输入hexo g，此时Hexo会根据配置文件渲染出一套静态页面。 完成后输入hexo d，此时会将之前渲染出的一系列文件上传至Github。 注意：也可以直接输入hexo g -d直接完成渲染和上传。 上传完成后，打开https://&lt;用户名&gt;.github.io查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。 五：Hexo博客主题安装及Next主题个性化修改基于Next主题的修改和配置 注意：博客配置文件是指博客根目录下的_config.yml文件，主题配置文件是指/themes/主题名/路径下的_config.yml文件，例如我使用的主题为next主题，主题配置文件为_/themes/next/config.yml。 1：主题选择 到 Nexo官网主题页选择喜欢的主题。每个主题配置方法略有不同，建议使用流行主题，推荐Next主题，因为我的博客就是用Next主题搭建的。 2：主题修改主题安装 Next主题文档页面 Nest主题Github页面 博客根目录打开命令行输入 1git clone https://github.com/theme-next/hexo-theme-next themes/next 1：安装完成后，打开 博客配置文件 修改theme 主题： 1234# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next #当前主题名称。值为false时禁用主题 2：修改 主题配置文件 是根目录/themes/next目录下的_config.yml文件。 修改菜单及创建分类页 1:定位到 Hexo 站点目录下,在命令行输入如下命令： 1$ hexo new page tags 新建出标签页 同样的道理，开启分类页的时候要输入hexo new page categories来新建出分类页。 2:设置页面类型：编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下： 12345---title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;--- 3:修改 主题配置 文件下的menu项： 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 修改主题风格 Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。 12345678# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 设置作者头像 编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。 本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg 123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/cat.jpg # If true, the avatar would be dispalyed in circle. rounded: false # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true 设置作者昵称与站点描述12345678# Site 网站title: #网站标题subtitle: #网站副标题description: #网站描述 主要用于SEOkeywords: #网站关键词 主要用于SEOauthor: #网站作者language: zh-CN #网站语言timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 设置代码高亮主题 NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties： 更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如： 1234# Code Highlight theme# Available values: normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night eighties 侧边栏社交链接 侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。 1234567891011121314151617# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@qq.com || envelope #Weibo: https://weibo.com/yourname || weibo #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。 1234social_icons: enable: true icons_only: false transition: false 开启打赏功能 越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。 123456789# Reward# If true, reward would be displayed in every article by default.# And you can show or hide one article specially through add page variable `reward: true/false`.reward: enable: true comment: 如果觉得文本对您有帮助，欢迎打赏 wechatpay: /images/wechat.png alipay: /images/zhifubao.jpg bitcoin: /images/qq.png 注意：将保存的图片放到 /source/images/图片名称 修改打赏字体不闪动 鼠标一指就疯狂抖动。 修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。 12345#QR &gt; div:hover p &#123; animation: roll 0.1s infinite linear; -webkit-animation: roll 0.1s infinite linear; -moz-animation: roll 0.1s infinite linear;&#125; 这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。 开启友情链接 or 侧边栏推荐阅读 主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。 link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。links_title为标题，如果是作为友情链接使用，可以设置为links_title: 友情链接在links字段设置友情链接名字及链接 这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。 1234567# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inline#links: #Title: http://example.com hexo生成博文插入图片显示不出来 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 在hexo的目录下执行npm install https://github.com/CodeFalling/hexo-asset-image --save（需要等待一段时间）。 完成安装后用hexo新建文章 hexo new &quot;文章标题&quot; 的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。 只要使用![logo](本地图片测试/logo.jpg)就可以插入图片。其中[]里面不写文字则没有图片标题。 文章左侧的目录如何弄出来？ 1、首先在你的markdown文件里面要有标题，所谓标题就是例如这种一级标题(#)，二级标题(##)，三级标题(###)的。 2、在主题的_config文件里面，将toc的enable设置为true就ok了，默认的目录是有序号的，如果你不想要序号，你需要把number置为false 。 设置 RSS NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置 文件，设定 rss 字段的值： false：禁用 RSS，不在页面上显示 RSS 连接。 留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 hexo-generator-feed 插件。 安装方法：根目录下命令行输入npm install hexo-generator-feed --save 具体的链接地址：适用于已经烧制过Feed的情形。建议直接使用插件，比较省事。 设置网站图标 在EasyIcon中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico。 把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。 在 主题配置文件 内搜索facicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico。 实现全站及文章字数统计及阅读时长 根目录命令运行： 1npm install hexo-symbols-count-time --save 博客配置文件底部添加如下内容，保存。 1234567# 1，实现全站及文章数字统计及阅读时长# 运行 npm install hexo-symbols-count-time --savesymbols_count_time: symbols: true time: true total_symbols: true total_time: true 添加顶部加载条 根目录打开命令行，输入如下命令： 1git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace 然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。 1234567891011121314151617181920# Progress bar in the top during page loading.# Dependencies: https://github.com/theme-next/theme-next-pacepace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For examplepace_theme: pace-theme-center-simple# pace_theme: pace-theme-minimal 自定义鼠标样式 打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码: 1234567// 鼠标样式 * &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important &#125; 在EasyIcon中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。 第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。 1234567// 鼠标样式 * &#123; cursor: url(&quot;/images/cat.ico&quot;),auto!important &#125; :active &#123; cursor: url(&quot;&quot;/images/cat2.ico&quot;&quot;),auto!important &#125; 实现点击出现桃心 以及 爆炸效果 在/themes/next/source/js/src下新建文件love.js并填入如下代码： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 或建一个叫fireworks.js的文件并写入如下代码： 1"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;; 打开themes/next/layout/_layout.swig,在上面写下如下代码： 123456789&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 在 主题配置文件 最下方加入如下代码： 123# Fireworks and lovefireworks: truelove: false 注意：fireworks是爆炸效果，love是心形效果。两个不能同时开。 修改网页底部的小图标 在 主题配置文件 搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。 1234567891011121314footer: # Specify the date when the site was setup. # If not defined, current year will be used. #since: 2015 # Icon between year and copyright info. icon: # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons # `heart` is recommended with animation in red (#ff0000). name: user # If you want to animate the icon, set it to true. animated: true #animated自动为闪动开关，设置为true后图标会闪动。 # Change the color of icon, using Hex Code. color: &quot;#808080&quot; 去掉页面底部的强力驱动信息及设置备案信息 主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容 1234567891011121314151617181920# If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- powered: # Hexo link (Powered by Hexo). enable: true # Version info of Hexo after Hexo link (vX.X.X). version: true theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: true # Version info of NexT after scheme info (vX.X.X). version: true # ------------------------------------------------------------- # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer. # http://www.miitbeian.gov.cn beian: #如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。 enable: false icp: 添加动态背景注意：尽量不要添加，耗费资源较大，加载速度非常慢 1.根目录打开命令行，输入： 1$ git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest 2.主题配置文件搜索canvas-nest字段，enable项设置为true。 123456789# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: enable: false onmobile: true # display on mobile or not color: &apos;0,0,255&apos; # RGB values, use &apos;,&apos; to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines 3.其他配置项说明： color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B) opacity: 线条透明度（0~1）, 默认: 0.5 count: 线条的总数量, 默认: 150 zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1 onmobile：是否在手机端显示。 增加波浪背景动画 根目录打开命令行，输入: 1git clone https://github.com/theme-next/theme-next-three themes/next/source/lib/three 主题配置文件搜索three_waves字段，设置为true 1234567891011# Internal version: 1.0.0 # See: https://github.com/theme-next/theme-next-three # Example: # three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js # three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js # canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js # canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js three: three_waves: canvas_lines: canvas_sphere: three_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。 添加静态背景 打开博客根目录/themes/next/source/css/_custom/custom.styl文件，编辑如下： 123456// Custom styles.body &#123; background-image: url(/images/background.png); //动图也可以添加 background-attachment: fixed; // 不随屏幕滚动而滚动 background-repeat: repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺 background-size: contain; // 等比例铺满屏幕 在右上角实现fork me on github按钮 最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。 12345# Follow me on GitHub banner in right-top corner.# Usage: `permalink || title`# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the title and aria-label name.github_banner: https://github.com/wudiufo || Follow me on GitHub ||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。 增加回到顶部按钮及显示当前浏览进度 主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。 123456789# Back to top in sidebar (only for Pisces | Gemini). b2t: true # Scroll percent label in b2t button. # scrollpercent字段设置为true即可实现当前浏览进度的显示。 scrollpercent: true # Enable sidebar on narrow view (only for Muse | Mist). onmobile: true 修改顶部菜单与下方信息栏的间隙大小 主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。 12# Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 网站标题栏背景颜色 打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码： 1234// 网站标题栏背景颜色.site-meta &#123; background: #FF0033; //修改为自己喜欢的颜色&#125; 为博客加上萌萌的动图 首先安装插件，根目录命令行输入： 1$ npm install --save hexo-helper-live2d 主题配置文件最下方添加如下代码: 123456789101112131415161718192021# Live2D## https://github.com/xiazeyu/live2d-widget.js## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d: model: scale: 1 hHeadPos: 0.5 vHeadPos: 0.618 display: superSample: 2 width: 150 height: 300 position: right hOffset: 0 vOffset: -20 mobile: show: true scale: 0.5 react: opacityDefault: 0.7 opacityOnHover: 0.2 更多设置可以查看官方文档 添加DaoVoice 实现在线联系 本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。 首先到DaoVoice注册一个Daovioce账号。 注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置– 安装到网站。在下方的代码中会看到app_id: “xxxx”字样。 打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码： 123# DaoVoice daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。 最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。 主页文章添加阴影效果 打开\themes\next\source\css_custom\custom.styl,加入如下代码： 12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 可以自行修改代码来修改阴影效果 增加本地搜索功能 首先安装插件，根目录命令行输入: 1$ npm install hexo-generator-searchdb --save 编辑博客配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 主题配置文件搜索local_search字段，设置enable为true 123# Local searchlocal_search: enable: true 添加图片懒加载 博客根目录打开命令输入 1$ git clone https://github.com/theme-next/theme-next-jquery-lazyload themes/next/source/lib/jquery_lazyload 然后在配置文件中搜索 lazyload,将其修改为true123# Added switch option for separated repo in 6.0.0.# Dependencies: https://github.com/theme-next/theme-next-jquery-lazyloadlazyload: true 添加评论添加方法 在来必力的官网上注册账号。 在此处获取data-uid。 打开NexT主题的配置文件—config中，搜索livere_uid，将livere_uid前面的#号去掉，将id填写到livere_uid：后面。 123# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)#livere_uid: your uid 代码块复制功能前言为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo Next主题博客的代码块复制功能配置。 下载需要下载 clipboard.js 主页 Github 提供下载:（推荐用这个） clipboard.min.js 将下载的文件存到如下目录：（相对目录为工程目录，没有目录则创建） .\themes\next\source\lib\zclip\clipboard.min.js 导入 新建文件 custom.js，目录如下：（相对目录为工程目录） \themes\next\source\js\src\custom.js 修改 custom.js为如下内容： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//此函数用于创建复制按钮function createCopyBtns() &#123; var $codeArea = $("figure table"); //查看页面是否具有代码区域，没有代码块则不创建 复制按钮 if ($codeArea.length &gt; 0) &#123; //复制成功后将要干的事情 function changeToSuccess(item) &#123; $imgOK = $("#copyBtn").find("#imgSuccess"); if ($imgOK.css("display") == "none") &#123; $imgOK.css(&#123; opacity: 0, display: "block" &#125;); $imgOK.animate(&#123; opacity: 1 &#125;, 1000); setTimeout(function() &#123; $imgOK.animate(&#123; opacity: 0 &#125;, 2000); &#125;, 2000); setTimeout(function() &#123; $imgOK.css("display", "none"); &#125;, 4000); &#125;; &#125;; //创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮 //值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码) $(".post-body").before('&lt;div id="copyBtn" style="opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em"&gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'); //创建 复制 插件，绑定单机时间到 指定元素，支持JQuery var clipboard = new Clipboard('#copyBtn', &#123; target: function() &#123; //返回需要复制的元素内容 return document.querySelector("[copyFlag]"); &#125;, isSupported: function() &#123; //支持复制内容 return document.querySelector("[copyFlag]"); &#125; &#125;); //复制成功事件绑定 clipboard.on('success', function(e) &#123; //清除内容被选择状态 e.clearSelection(); changeToSuccess(e); &#125;); //复制失败绑定事件 clipboard.on('error', function(e) &#123; console.error('Action:', e.action); console.error('Trigger:', e.trigger); &#125;); //鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果 $("#copyBtn").hover( function() &#123; $(this).stop(); $(this).css("opacity", 1); &#125;, function() &#123; $(this).animate(&#123; opacity: 0 &#125;, 2000); &#125; ); &#125;&#125;//感应鼠标是否在代码区$("figure").hover( function() &#123; //-------鼠标活动在代码块内 //移除之前含有复制标志代码块的 copyFlag $("[copyFlag]").removeAttr("copyFlag"); //在新的（当前鼠标所在代码区）代码块插入标志：copyFlag $(this).find(".code").attr("copyFlag", 1); //获取复制按钮 $copyBtn = $("#copyBtn"); if ($copyBtn.lenght != 0) &#123; //获取到按钮的前提下进行一下操作 //停止按钮动画效果 //设置为 显示状态 //修改 复制按钮 位置到 当前代码块开始部位 //设置代码块 左侧位置 $copyBtn.stop(); $copyBtn.css("opacity", 0.8); $copyBtn.css("display", "block"); $copyBtn.css("top", parseInt($copyBtn.css("top")) + $(this).offset().top - $copyBtn.offset().top + 3); $copyBtn.css("left", -$copyBtn.width() - 3); &#125; &#125;, function() &#123; //-------鼠标离开代码块 //设置复制按钮可见度 2秒内到 0 $("#copyBtn").animate(&#123; opacity: 0 &#125;, 2000); &#125;);//页面载入完成后，创建复制按钮$(document).ready(function() &#123; createCopyBtns();&#125;); 配置 新建文件 custom.swig ，目录：.\themes\next\layout_custom\custom.swig（相对目录为工程目录） 12&lt;script type=&quot;text/javascript&quot; src=&quot;/lib/zclip/clipboard.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom.js&quot;&gt;&lt;/script&gt; 修改文件 _layout.swig ，目录：\themes\next\layout\_layout.swig（相对目录为工程目录） 添加如下代码： 12345678&lt;!doctype html&gt; &#123;% include &apos;_third-party/math/mathjax.swig&apos; %&#125; &#123;% include &apos;_custom/custom.swig&apos; %&#125;&lt;/body&gt;&lt;/html&gt; 向文件中 &lt;/body&gt; 前一行插入文件引用，如第 15 行效果。 1&#123;% include &apos;_custom/custom.swig&apos; %&#125; 在主题配置文件_config.yml中找到以下代码： 将enable修改为true，show_result修改为true 123456789codeblock: # Manual define the border radius in codeblock # Leave it empty for the default 1 border_radius: # Add copy button on codeblock copy_button: enable: true # Show text copy result show_result: true 六：Hexo撰写文章一、创建文章 在站点文件夹中打开git bash，输入如下命令创建文章，其中title为文章的标题： 1hexo new "title" 此时就会在source/_post文件夹中创建了一个文件，命名为：title.md，而这个文件就是将要发布到网站上的原始文件，记录文章内容，以下我们将要在这个文件中写下我们的第一篇博客 二、编写文章（基于Markdown） 推荐大家一款简洁易用的markdown编辑器 Typora,点击下载。 Markdown语法及在线编辑 1.模板设置 当我们使用命令 hexo new “title” 去创建我们的文章时，Hexo会根据/scaffolds/post.md文件对新建文件进行初始化，换言之，/scaffolds/post.md文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯，一个简单的示例如下： 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags: categories: --- 2.头部设置 在博客文章的开头会有对文章的说明文字，叫做文章头部，文章的头部除了可以设置文章标题、书写日期等基础信息外，还可以对文章添加标签、分类等，一个简单的示例如下: 1234567891011121314---title: Title #标题date: YYYY-MM-DD HH:MM:SS #文件建立日期tags: #标签（不适用于分页）- 标签1- 标签2categories: #分类（不适用于分页）- 分类1- 分类2layout: #布局updated: YYYY-MM-DD HH:MM:SS #文件更新日期comments：true #开启文章的评论功能permalink：覆盖文章网址--- 注意，属性和属性值之间必须有一个空格，否则会解析错误 3.首页显示 在Hexo框架博客的首页会显示文章的内容（默认显示文章的全部内容），如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简，只需在文章中使用 &lt;!--more--&gt;标志，表示只会显示标志前面的内容]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo+Node+Git搭建博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
