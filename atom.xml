<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haiyang</title>
  
  <subtitle>前端全栈，python全栈，人工智能，大数据，网络攻防</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wudiufo.github.io/"/>
  <updated>2018-12-11T16:49:15.946Z</updated>
  <id>http://wudiufo.github.io/</id>
  
  <author>
    <name>Haiyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XMind 8永久破解</title>
    <link href="http://wudiufo.github.io/2018/12/12/XMind%208/"/>
    <id>http://wudiufo.github.io/2018/12/12/XMind 8/</id>
    <published>2018-12-12T14:20:20.000Z</published>
    <updated>2018-12-11T16:49:15.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://www.xmind.cn/xmind8-pro/" target="_blank" rel="noopener">点击XMind官网</a>下载</p><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><ol><li>安装完成后，到百度网盘 ：链接: <a href="https://pan.baidu.com/s/1VAJyKvNutqLB2shaw137bQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1VAJyKvNutqLB2shaw137bQ</a>  下载破解文件</li></ol><p>提取码: 75w8 </p><ol start="2"><li><p>找到你的XMind安装目录，例如我安装的路径为 <code>G:\xmind思维导图\XMind</code>，将下载好的破解文件放到此文件夹下</p></li><li><p>在这个目录中，找到 <code>XMind.ini</code> 这个文件，用记事本打开此文件，在最后一行追加  <code>-javaagent:G:\xmind思维导图\XMind\XMindCrack.jar</code>，然后保存退出即可。</p><p>注意地址写你自己的安装路径</p></li><li><p>上面完成后，就可以打开 XMind,  依次点击  <code>帮助</code>——<code>序列号</code>，然后输入以下序列号 ，邮箱随便填一个就可以了。然后提示激活成功既可。</p></li><li><p>XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345</p></li></ol><p>破解成功</p><p>注意：防止联网检查，打开 hosts 文件，在末尾追加两行行  ，或者给这个软件禁止联网权限<br>127.0.0.1 <a href="http://www.xmind.net" target="_blank" rel="noopener">www.xmind.net</a><br>127.0.0.1 <a href="http://www.xmind.cn" target="_blank" rel="noopener">www.xmind.cn</a></p><p>  6、找到hosts文件</p><p>Win：C:\Windows\System32\drivers\etc</p><p>Mac：桌面顶部菜单栏，前往-前往文件夹，输入代码：/private/etc/</p><p>hosts文件目录 -&gt;C:\Windows\System32\drivers\etc</p><p>​    7、在hosts里面追加代码（修改时需要注意，文件原本是只读，要把只读去了）</p><p>Win：127.0.0.1 <a href="http://www.xmind.net" target="_blank" rel="noopener">www.xmind.net</a>   回车</p><p>Mac：127.0.0.1 <a href="http://www.xmind.net" target="_blank" rel="noopener">www.xmind.net</a>   回车（直接修改会提示无权修改，需要先将hosts文件复制到桌面，在桌面修改，然后在粘贴回去，覆盖原文件）  </p><p>  8、打开xmind 8 输入邮箱和序列号</p><p>帮助-&gt;序列号  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.xmind.cn/xmind8-pro/&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端非技术面试题</title>
    <link href="http://wudiufo.github.io/2018/12/12/%E5%89%8D%E7%AB%AF%E9%9D%9E%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://wudiufo.github.io/2018/12/12/前端非技术面试题/</id>
    <published>2018-12-12T09:00:31.000Z</published>
    <updated>2018-12-12T09:24:09.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/12/前端非技术面试题/1.jpg" alt="1"></p><p><img src="/2018/12/12/前端非技术面试题/2.jpg" alt="2"></p><p><img src="/2018/12/12/前端非技术面试题/3.jpg" alt="3"></p><p><img src="/2018/12/12/前端非技术面试题/4.jpg" alt="4"></p><p><img src="/2018/12/12/前端非技术面试题/5.jpg" alt="5"></p><p><img src="/2018/12/12/前端非技术面试题/6.jpg" alt="6"></p><p><img src="/2018/12/12/前端非技术面试题/7.jpg" alt="7"></p><p><img src="/2018/12/12/前端非技术面试题/8.jpg" alt="8"></p><p><img src="/2018/12/12/前端非技术面试题/9.jpg" alt="9"></p><p><img src="/2018/12/12/前端非技术面试题/10.jpg" alt="10"></p><p><img src="/2018/12/12/前端非技术面试题/11.jpg" alt="11"></p><p><img src="/2018/12/12/前端非技术面试题/12.jpg" alt="12"></p><p><img src="/2018/12/12/前端非技术面试题/13.jpg" alt="13"></p><p><img src="/2018/12/12/前端非技术面试题/14.jpg" alt="14"></p><p><img src="/2018/12/12/前端非技术面试题/15.jpg" alt="15"></p><p><img src="/2018/12/12/前端非技术面试题/16.jpg" alt="16"></p><p><img src="/2018/12/12/前端非技术面试题/17.jpg" alt="17"></p><p><img src="/2018/12/12/前端非技术面试题/18.jpg" alt="18"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/12/前端非技术面试题/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/12/12/前端非技术面试题/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/12/12/前端非技术面试
      
    
    </summary>
    
      <category term="前端面试" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="前端面试" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端开发优化的一些常见办法(汇总)</title>
    <link href="http://wudiufo.github.io/2018/12/12/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E5%8A%9E%E6%B3%95-%E6%B1%87%E6%80%BB/"/>
    <id>http://wudiufo.github.io/2018/12/12/前端开发优化的一些常见办法-汇总/</id>
    <published>2018-12-12T08:17:19.000Z</published>
    <updated>2018-12-12T08:29:20.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB前端开发常用的优化技巧汇总"><a href="#WEB前端开发常用的优化技巧汇总" class="headerlink" title="WEB前端开发常用的优化技巧汇总"></a>WEB前端开发常用的优化技巧汇总</h2><h3 id="减少HTTP请求的次数或者减小请求数据的大小"><a href="#减少HTTP请求的次数或者减小请求数据的大小" class="headerlink" title="减少HTTP请求的次数或者减小请求数据的大小"></a>减少HTTP请求的次数或者减小请求数据的大小</h3><blockquote><p>页面中每发送一次HTTP请求，都需要完成请求加响应这个完整的HTTP事务，会消耗一些时间，也可能会导致HTTP链接通道的阻塞，为了提高页面的加载速度和运行的性能，我们应该减少HTTP的请求次数和减少请求内容的大小（请求的内容越大，消耗的时间越长）。</p></blockquote><ol><li><p>采用CSS雪碧图（CSS Sprit/CSS 图片精灵）技术，把一些小图合并在一张大图上，使用的时候通过背景图片定位，定位在具体的某一张小图上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pubBg</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../img/sprit.png'</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: x y; <span class="comment">/*和图片的大小保持一致*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background-position</span>: x y; <span class="comment">/*通过背景定位，定位到具体的位置，展示不同的图片即可*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;div class="pubBg box"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>真实项目中，我们最好把CSS或者JS文件进行合并压缩。尤其是在移动端开发的时候，如果css或者js内容不是很多，我们可以采取内嵌式，以此减少HTTP请求的次数，加快页面的加载速度</p><blockquote><ol><li>CSS合并成一个，JS最好也合并成一个</li><li>首先通过一些工具（例如：webpack）把合并后的CSS或者JS压缩成xxx.min.js，减少文件的大小</li><li>服务器端开启资源文件的GZIP压缩<ul><li>通过一些自动化工具完成CSS以及JS的合并压缩，或者在完成LESS转CSS，ES6转ES5等操作，我们把这种自动化构建模式，称之为前端工程化开发</li></ul></li></ol></blockquote></li><li><p>采用图片的懒加载技术，在页面开始加载的时候，不请求真实图片的地址，而是用默认图占位，当页面加载完成后，再根据相关的条件依次加载真实图片（减少页面首次加载HTTP请求的次数）</p><blockquote><p>真实项目中，我们开始图片都不加载，页面首次加载完成，先把第一屏幕中可以看见的图片进行加载，随着页面的滚动，再把下面区域中能够呈现出来的图片进行加载</p><p>根据图片的懒加载技术，我们还可以扩充出<code>数据的懒加载</code></p><ol><li>开始加载页面的时候，我们只把首屏或者前两屏的数据从服务端进行请求（有些网站首屏数据是后台渲染好，整体返回给客户端呈现的）</li><li>当页面下拉，滚动到哪个区域，在把这个区域需要的数据进行请求（用请求回来的数据进行数据的绑定以及图片的延迟加载等）</li><li>分页展示技术采用的也是数据的懒加载思想实现的：如果我们请求获取很多的数据，我们最好分批请求，开始只请求第一页的数据，当用户点击第二页（微博是下拉到一定距离后，在请求第二页数据…）的时候在请求第二页的数据</li></ol></blockquote></li><li><p>对于不经常更新的数据，最好采用浏览器的304缓存做处理（主要由服务器端处理）</p><blockquote><p>例如:</p><p>第一次请求CSS和JS下来，浏览器会把请求的内容缓存起来，如果做了304处理，用户再次请求CSS和JS，直接从缓存中读取，不需要再去服务器获取了（减少了HTTP请求的次数）</p><p>当用户强制刷新页面（CTRL+F5）或者当前缓存的CSS或者JS发生了变动，都会重新从服务器端拉取</p><p>…</p><p>对于客户端来讲，我们还可以基于localStorage来做一些本地存储，例如：第一次请求的数据或者不经常更新的CSS和JS，我们都可以把内容存储到本地，下一次页面的加载，我们从本地获取即可，我们设定一定的期限或者一些标识，可以控制在某个阶段重新从服务器获取</p></blockquote></li><li><p>使用字体图标代替页面中的一些位图（图片），这样不仅做适配的时候方便，而且更加轻量级，而且减少了HTTP请求次数（类似于雪碧图）</p></li><li><p>如果当前页面中出现了Audio或者Video标签，我们最好设置他们的<code>preload=none</code>；当页面加载的时候，音视频资源不进行加载，播放的时候在进行加载（减少页面首次加载HTTP请求的次数）</p><blockquote><p>preload=auto；页面首次加载的时候就把音视频进行加载了</p><p>preload=metadata；页面首次加载的时候只把音视频资源的头部信息进行加载</p></blockquote></li><li><p>在客户端和服务器端进行数据通信的时候，我们尽量采用JSON格式进行数据传输</p></li></ol><blockquote><p>[优势]</p><ol><li>JSON格式的数据，能够清晰明了的展示出数据结构，而且也方便我们获取和操作</li><li>相对于很早以前的XML传输，JSON格式的数据更加轻量级</li><li>客户端和服务器端都支持JSON数据的处理，处理起来非常的方便</li></ol><p>在真实项目中，并不是所有的数据都要基于JSON，我们尽可能这样做，但是对于某些特殊需求（例如：文件流的传输或者文档传输），使用JSON就不合适了</p></blockquote><ol><li><p>采用CDN加速</p><blockquote><p>CDN: 分布式（地域分布式）</p></blockquote></li></ol><h3 id="关于编写代码时候的一些优化技巧"><a href="#关于编写代码时候的一些优化技巧" class="headerlink" title="关于编写代码时候的一些优化技巧"></a>关于编写代码时候的一些优化技巧</h3><blockquote><p>除了减少HTTP请求次数和大小可以优化性能，我们在编写代码的时候，可以进行一些优化，让页面的性能有所提升（有些不好的代码编写习惯，会导致页面性能消耗太大，例如：内存泄漏）</p></blockquote><ol><li><p>在编写JS代码的时候，尽量减少对DOM的操作</p><ul><li>VUE和REACT框架在这方面处理的非常不错</li></ul><blockquote><p>在JS中操作DOM是一个非常消耗性能的事情，但是我们又不可避免的操作DOM，我们只能尽量减少对于他的操作</p><p>【操作DOM的弊端】</p><ol><li>DOM存在映射机制（JS中的DOM元素对象和页面中的DOM结构是存在映射机制的，一改则都改），这种映射机制，是浏览器按照W3C标准完成对JS语言的构建和DOM的构建（其实就是构建了一个监听机制），操作DOM是同时要修改两个地方，相对于一些其他的JS编程来说是消耗性能的</li><li>页面中的DOM结构改变或者样式改变，会触发浏览器的回流（浏览器会把DOM结构重新进行计算，这个操作很耗性能）和重绘（把一个元素样式重新渲染）</li></ol></blockquote></li><li><p>编写代码的时候，更多使用的是异步编程</p><blockquote><p>同步编程会导致：上面东西完不成，下面任务也做不了，我们开发的时候，可以把某一个区域模块都设置为异步编程，这样只要模块之间没有必然的先后顺序，都可以独立进行加载，不会受到上面模块的堵塞影响（用的不多）</p><p>尤其是AJAX数据请求，我们都要使用异步编程，最好是基于promise设计模式进行管理（项目中经常使用fetch，vue axios等插件来进行AJAX请求处理，因为这些插件中就是基于promise设计模式对ajax进行封装处理）</p></blockquote></li><li><p>在真实项目中，我们尽量避免一次性循环过多数据（因为循环操作是同步编程），尤其是要避免while导致的死循环操作</p></li><li><p>CSS选择器优化</p><blockquote><ol><li>尽量减少标签选择器的使用</li><li>尽可能少使用ID选择器，多使用样式类选择器（通用性强）</li><li>减少选择器前面的前缀，例如：<code>.headerBox .nav .left a{}</code> (选择器是从右向左查找的)</li></ol></blockquote></li><li><p>避免使用CSS表达式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS表达式*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">expression</span>((new Data()).<span class="built_in">getHours</span>()%<span class="number">2</span>?<span class="string">'red'</span>:<span class="string">'blue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>减少页面中的冗余代码，尽可能提高方法的重复使用率：“低耦合高内聚”</p></li><li><p>最好CSS放在HEAD中，JS放在BODY尾部，让页面加载的时候，先加载CSS，在加载JS（先呈现页面，再给用户提供操作）</p></li><li><p>JS中避免使用eval</p><blockquote><ol><li>性能消耗大</li><li>代码压缩后，容易出现代码执行错乱问题</li></ol></blockquote></li><li><p>JS中尽量减少闭包的使用</p><blockquote><ol><li>闭包会形成一个不销毁的栈内存，过多的栈内存累积会影响页面的性能</li><li>还会容易导致内存泄漏</li></ol><p>闭包也有自己的优势：保护和保存，我们只能尽量减少，但不可避免</p></blockquote></li><li><p>在做DOM事件绑定的时候，尽量避免一个个的事件绑定，而是采用性能更高的事件委托来实现</p><blockquote><p>事件委托（事件代理）</p><p>把事件绑定给外层容器，当里面的后代元素相关行为被触发，外层容器绑定的方法也会被触发执行（冒泡传播机制导致），通过事件源是谁，我们做不同的操作即可</p></blockquote></li><li><p>尽量使用CSS3动画代替JS动画，因为CSS3动画或者变形都开启了硬件加速，性能比JS动画好</p></li><li><p>编写JS代码的时候尽可能使用设计模式来构建体系，方便后期的维护，也提高了扩充性等</p></li><li><p>CSS中减少对滤镜的使用，页面中也减少对于FLASH的使用</p></li></ol><h3 id="关于页面的SEO优化技巧"><a href="#关于页面的SEO优化技巧" class="headerlink" title="关于页面的SEO优化技巧"></a>关于页面的SEO优化技巧</h3><ol><li><p>页面中杜绝出现死链接（404页面），而且对于用户输入的一个错误页面，我们要引导到404提示页面中（服务器处理的）</p></li><li><p>避免浏览器中异常错误的抛出</p><blockquote><p>尽可能避免代码出错</p><p>使用TRY CATCH做异常信息捕获</p></blockquote></li><li><p>增加页面关键词优化</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WEB前端开发常用的优化技巧汇总&quot;&gt;&lt;a href=&quot;#WEB前端开发常用的优化技巧汇总&quot; class=&quot;headerlink&quot; title=&quot;WEB前端开发常用的优化技巧汇总&quot;&gt;&lt;/a&gt;WEB前端开发常用的优化技巧汇总&lt;/h2&gt;&lt;h3 id=&quot;减少HTTP请求的
      
    
    </summary>
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/categories/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/tags/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>什么是AJAX（前后端分离和不分离的优势弊端）</title>
    <link href="http://wudiufo.github.io/2018/12/12/%E4%BB%80%E4%B9%88%E6%98%AFAJAX%EF%BC%88%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%92%8C%E4%B8%8D%E5%88%86%E7%A6%BB%E7%9A%84%E4%BC%98%E5%8A%BF%E5%BC%8A%E7%AB%AF%EF%BC%89/"/>
    <id>http://wudiufo.github.io/2018/12/12/什么是AJAX（前后端分离和不分离的优势弊端）/</id>
    <published>2018-12-12T08:14:26.000Z</published>
    <updated>2018-12-12T11:56:04.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AJAX基础知识及核心原理解读"><a href="#AJAX基础知识及核心原理解读" class="headerlink" title="AJAX基础知识及核心原理解读"></a>AJAX基础知识及核心原理解读</h2><h3 id="AJAX基础知识"><a href="#AJAX基础知识" class="headerlink" title="AJAX基础知识"></a>AJAX基础知识</h3><blockquote><p>什么是AJAX？</p><p>async javascript and xml  异步的JS和XML</p></blockquote><h4 id="XML：可扩展的标记语言"><a href="#XML：可扩展的标记语言" class="headerlink" title="XML：可扩展的标记语言"></a><strong>XML：可扩展的标记语言</strong></h4><blockquote><p>作用：是用来存储数据的（通过自己扩展的标记名称清晰地展示出数据结构）</p><p>ajax之所以称为异步的js和xml，主要原因是：以前最开始使用ajax实现客户端和服务端数据通信的时候，传输数据的格式一般都是xml格式的数据，我们把他称之为异步的js和xml（现在一般都是基于JSON格式来进行数据传输的）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>海洋<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>10<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">score</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">deutsch</span>&gt;</span>100<span class="tag">&lt;/<span class="name">deutsch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">IT</span>&gt;</span>100<span class="tag">&lt;/<span class="name">IT</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">english</span>&gt;</span>100<span class="tag">&lt;/<span class="name">english</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">score</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="异步的JS"><a href="#异步的JS" class="headerlink" title="异步的JS"></a><strong>异步的JS</strong></h4><blockquote><p>这里的异步不是说ajax只能基于异步进行请求（虽然建议都是使用异步编程），这里的异步特指的是 局部刷新</p></blockquote><h5 id="局部刷新-VS-全局刷新"><a href="#局部刷新-VS-全局刷新" class="headerlink" title="局部刷新 VS 全局刷新"></a><strong>局部刷新 VS 全局刷新</strong></h5><blockquote><p><strong>全局刷新</strong>：</p><p>在非完全前后端分离的项目中，前端开发只需要完成页面的制作，并且把一些基础的人机交互效果使用js完成即可，页面中需要动态呈现内容的部分，都是交给后台开发工程师做数据绑定和基于服务器进行渲染的</p><p><img src="/2018/12/12/什么是AJAX（前后端分离和不分离的优势弊端）/haiyangblog\source\_posts\什么是AJAX(前后端分离和不分离的优势弊端" alt="">\非完全前后端分离.jpg)</p></blockquote><p><img src="/2018/12/12/什么是AJAX（前后端分离和不分离的优势弊端）/haiyangblog\source\_posts\什么是AJAX(前后端分离和不分离的优势弊端" alt="不完全前后端分离">\不完全前后端分离.jpg)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AJAX基础知识及核心原理解读&quot;&gt;&lt;a href=&quot;#AJAX基础知识及核心原理解读&quot; class=&quot;headerlink&quot; title=&quot;AJAX基础知识及核心原理解读&quot;&gt;&lt;/a&gt;AJAX基础知识及核心原理解读&lt;/h2&gt;&lt;h3 id=&quot;AJAX基础知识&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/categories/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/tags/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>HTML详解1</title>
    <link href="http://wudiufo.github.io/2018/12/11/HTML%E8%AF%A6%E8%A7%A31/"/>
    <id>http://wudiufo.github.io/2018/12/11/HTML详解1/</id>
    <published>2018-12-11T13:18:55.000Z</published>
    <updated>2018-12-11T15:44:31.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-第一天目标"><a href="#HTML-第一天目标" class="headerlink" title="HTML 第一天目标"></a>HTML 第一天目标</h1><p>能够写出基本的页面（里面包含图片、各种标签和链接）</p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>我们主要用的 开发工具有   chrome  、  sublime 、  photoshop</p><h2 id="浏览器（显示）"><a href="#浏览器（显示）" class="headerlink" title="浏览器（显示）"></a>浏览器（显示）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页显示、运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/b.png"></p><h3 id="查看浏览器占有的市场份额（知晓）"><a href="#查看浏览器占有的市场份额（知晓）" class="headerlink" title="查看浏览器占有的市场份额（知晓）"></a>查看浏览器占有的市场份额（知晓）</h3><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p><p><img src="/2018/12/11/HTML详解1/count.png"></p><p> 这些工具你认识几个？</p><h2 id="sublime（书写）"><a href="#sublime（书写）" class="headerlink" title="sublime（书写）"></a>sublime（书写）</h2><p>  普通青年    Dreamweaver</p><p>  文艺青年    sublime</p><p>  高手和傻子  用记事本</p><p>  其实。。。。</p><h2 id="Photoshop-协助"><a href="#Photoshop-协助" class="headerlink" title="Photoshop(协助)"></a>Photoshop(协助)</h2><p>PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：</p><ol><li><strong>熟练的切图</strong></li><li>能和网站美工美眉有共同话题。。。。。</li></ol><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思考：  网页是如何形成的呢?</span><br></pre></td></tr></table></figure><h1 id="常见浏览器内核介绍"><a href="#常见浏览器内核介绍" class="headerlink" title="常见浏览器内核介绍"></a>常见浏览器内核介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/b.png"></p><h2 id="浏览器内核（理解）"><a href="#浏览器内核（理解）" class="headerlink" title="浏览器内核（理解）"></a>浏览器内核（理解）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。</span><br><span class="line">渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。</span><br><span class="line">JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。</span><br><span class="line"></span><br><span class="line">最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</span><br></pre></td></tr></table></figure><p>（1）Trident(IE内核) </p><p>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p><p>代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p><p>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><p>（2）Gecko(firefox) </p><p>Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>（3） webkit(Safari)  </p><p> Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p><p> 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p> 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，</p><p>（4） Chromium/Blink(chrome) </p><p>   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 </p><p>​     大部分国产浏览器最新版都采用Blink内核。二次开发</p><p>（5） Presto(Opera) </p><p>  Presto（已经废弃） 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">了解一点：</span><br></pre></td></tr></table></figure><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>Android手机而言，使用率最高的就是Webkit内核，大部分国产浏览器宣称的自己的内核，基本上也是属于webkit二次开发。</p><p>iOS以及WP7平台上，由于系统原因，系统大部分自带浏览器内核，一般是Safari或者IE内核Trident的</p><h1 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h1><p>通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问：  哪个语言再全国基本都可以听得懂？</span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/bz.png"></p><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p> Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。</p><p>主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结构标准：结构用于对网页元素进行整理和分类，咱们主要学的是HTML。 最重要</span><br><span class="line">表现标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。</span><br><span class="line">行为标准：行为是指网页模型的定义及交互的编写，咱们主要学的是 Javascript</span><br></pre></td></tr></table></figure><p>理想状态我们的源码： .HTML    .css   .js </p><p>直观感受：</p><p><img src="/2018/12/11/HTML详解1/gx.png"></p><p>总结WEB标准：</p><p>结构标准：   <img src="/2018/12/11/HTML详解1/hb1.png">  决定你是否有个好天然身体 </p><p>表现标准：   <img src="/2018/12/11/HTML详解1/hb2.png">  决定你是否打扮的美丽外观</p><p>行为标准：   <img src="/2018/12/11/HTML详解1/hb3.jpg" width="420">  决定你是否有吸引人的行为</p><h2 id="课堂一练："><a href="#课堂一练：" class="headerlink" title="课堂一练："></a>课堂一练：</h2><p><strong>1.关于WEB标准下列说法正确的是: </strong></p><p>A html决定页面的行为，css决定页面的样式，js决定页面的结构</p><p>B html决定页面的样式，css决定页面的结构，js决定页面的行为</p><p>C html决定页面的结构，css决定页面的样式，js决定页面的行为</p><p>D 以上都不正确</p><p>2 <strong>web 标准里边规定三层分离不包括哪部分</strong></p><p>A．HTML</p><p>B．CSS</p><p>C．JavaScript</p><p>D．PHP</p><p>3.<strong>关于WEB标准下列说法正确的是</strong></p><p>A．html相当于人的动作行为，CSS相当于人的穿着打扮，javascript相当于人的骨架结构；</p><p>B．html相当于人的骨架结构，CSS相当于人的穿着打扮，javascript相当于人的动作行为；</p><p>C．html相当于人的穿着打扮，CSS相当于人的骨架结构，javascript相当于人的动作行为；</p><p>D．html相当于人的骨架结构，CSS相当于人的动作行为，javascript相当于人的穿着打扮；</p><h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。</p><p>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”。是用来描述网页的一种语言。</p><p>所谓超文本，因为它可以加入图片、声音、动画、多媒体等内容，不仅如此，它还可以从一个文件跳转到另一个文件，与世界各地主机的文件连接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一个大标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   注意：   体会 文本    标签    语言   几个词语</p><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li><li>HTML 不是一种编程语言，而是一种标记语言 (markup language)</li><li>标记语言是一套标记标签 (markup tag)</li></ul><p>总结： HTML 作用就是用标记标签来描述网页，把网页内容在浏览器中展示出来。 </p><p>用文字来描述网页标签</p><h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p><p>同理：HTML 有自己的语言语法骨架格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HTML</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>课堂练习1：    书写我们的第一个HTML 页面！</p><ol><li>新建一个demo 的 TXT 文件。</li><li>里面写入刚才的HTML 骨架。月薪过万 你我之间  黑马洗练  一飞冲天</li><li>把后缀名改为 .HTML。</li><li>右击–谷歌浏览器打开。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1 HTML标签：</span><br><span class="line"></span><br><span class="line">作用所有HTML中标签的一个根节点。 最大的标签   根标签</span><br><span class="line"></span><br><span class="line">2 head标签： 文档的头部</span><br><span class="line"></span><br><span class="line">文档的头部描述了文档的各种属性和信息，包括文档的标题、在 Web 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。</span><br><span class="line"></span><br><span class="line">注意在head标签中我们必须要设置的标签是title</span><br><span class="line"></span><br><span class="line">3.title标签： 文档的标题</span><br><span class="line"></span><br><span class="line">作用：让页面拥有一个属于自己的标题。</span><br><span class="line"></span><br><span class="line">4.body标签：文档的主体  以后我们的页面内容 基本都是放到body里面的</span><br><span class="line"></span><br><span class="line">body 元素包含文档的所有内容（比如文本、超链接、图像、表格和列表等等。）</span><br></pre></td></tr></table></figure><p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p><p><img src="/2018/12/11/HTML详解1/pig.png"></p><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p>  在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML骨架结构标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素</p><p>1.双标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 比如 <span class="tag">&lt;<span class="name">body</span>&gt;</span>我是文字  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>2.单标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 比如  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>标签的相互关系就分为两种：</p><p>1.嵌套关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/father.jpg"></p><p>2.并列关系</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/xiong.jpg"></p><p>倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。</p><h2 id="课堂一练"><a href="#课堂一练" class="headerlink" title="课堂一练"></a>课堂一练</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请问下列哪个标签是错误的？</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A  &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">B  &lt;strong&gt;&lt;div&gt;&lt;/div&gt;&lt;/strong&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C  &lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D  &lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">再页面中输入 以下2个单词</span><br><span class="line">1.  html: 5   </span><br><span class="line">2.  !</span><br><span class="line">   在sublime里面然后按下tab键盘即可生成HTML骨架</span><br></pre></td></tr></table></figure><h1 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型&lt;!DOCTYPE&gt;"></a>文档类型&lt;!DOCTYPE&gt;</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>同学你用啥手机？你咋回答？  </p><p>这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p><p>&lt;!DOCTYPE&gt; 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><p>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><meta charset="UTF-8"><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。</span><br></pre></td></tr></table></figure><h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p><h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><p>核心：合适的地方给一个最为合理的标签。</p><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p><p>白话，一眼看去，就知道那个是重点，结构是什么，知道每块的内容是干啥的。</p><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p><h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><p> 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p> HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="标题标签-熟记"><a href="#标题标签-熟记" class="headerlink" title="标题标签 (熟记)"></a>标题标签 (熟记)</h3><p> 单词缩写：  head   头部. 标题     title  文档标题</p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><p><code>&lt;h1&gt;&lt;/h1&gt; ...&lt;h6&gt;&lt;/h6&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标题标签语义：  作为标题使用，并且依据重要性递减</span><br></pre></td></tr></table></figure><p>其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>   标题文本   <span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用，或者页面中最重要标题信息。</p></blockquote><h3 id="段落标签-熟记"><a href="#段落标签-熟记" class="headerlink" title="段落标签( 熟记)"></a>段落标签( 熟记)</h3><p>单词缩写：  paragraph  段落  [ˈpærəgræf]    无须记这个单词</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>  文本内容  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="水平线标签-认识"><a href="#水平线标签-认识" class="headerlink" title="水平线标签(认识)"></a>水平线标签(认识)</h3><p>单词缩写：  horizontal  横线    [ˌhɔrəˈzɑntl]    同上</p><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，<hr>就是创建横跨网页水平线的标签。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>是单标签</span><br></pre></td></tr></table></figure><p> 在网页中显示默认样式的水平线。</p><p>课堂练习2：    新闻页面 </p><p><img src="/2018/12/11/HTML详解1/sh.png"> </p><h3 id="换行标签-熟记"><a href="#换行标签-熟记" class="headerlink" title="换行标签(熟记)"></a>换行标签(熟记)</h3><p>单词缩写：  break   打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><h2 id="课堂一练-1"><a href="#课堂一练-1" class="headerlink" title="课堂一练"></a>课堂一练</h2><p>关于标签下列说法正确的是 </p><p>(A) P1是段落标签</p><p>(B) H1 是标题标签</p><p>(C) Hr是换行标签</p><p>(D) Br 是一条直线</p><p> 2 关于标签下列说法不正确的是</p><p>(A) H标签有6个等级分别是<code>&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt;和&lt;h6&gt;</code></p><p>(B) h1到h6 文字从小到大 </p><p>(C) p标签一行只能放一个</p><p>(D) P是段落标签会给文字加上段落的语义</p><h3 id="div-span标签-重点"><a href="#div-span标签-重点" class="headerlink" title="div span标签(重点)"></a>div span标签(重点)</h3><p>div  span    是没有语义的     是我们网页布局主要的2个盒子     css+div</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>span, 跨度，跨距；范围    </p><p>语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    <span class="tag">&lt;<span class="name">span</span>&gt;</span>今日价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本格式化标签-熟记"><a href="#文本格式化标签-熟记" class="headerlink" title="文本格式化标签(熟记)"></a>文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p><img src="/2018/12/11/HTML详解1/tab.png"></p><p>  b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈</p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><p><img src="/2018/12/11/HTML详解1/ttt.jpg" width="300"></p><p>属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><p>手机的颜色是黑色   手机的尺寸是 8寸</p><p>水平线的长度是 200  </p><p>图片的宽度 是  300    键  值对</p><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> 属性<span class="attr">1</span>=<span class="string">"属性值1"</span> 属性<span class="attr">2</span>=<span class="string">"属性值2"</span> …&gt;</span> 内容 <span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中，</p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p><p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>3.任何标签的属性都有默认值，省略该属性则取默认值。</p><p>采取  键值对 的格式   key=”value”  的格式  </p><p>比如:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">"400"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>属性  是 宽度  </p><p>值    是 400 </p><p>提倡：   尽量不使用 样式属性。   </p><h2 id="图像标签img-重点"><a href="#图像标签img-重点" class="headerlink" title="图像标签img (重点)"></a>图像标签img (重点)</h2><p>单词缩写：   image  图像</p><p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。其基本语法格式如下：</p><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/img.png"></p><p><strong>当网页显示图片时,鼠标滑上图片显示文字描述是以下哪个属性<em>**</em></strong></p><p>(A) 设置alt属性</p><p>(B) 设置title属性</p><p>(C) 设置href 属性</p><p>(D) 设置src 属性</p><p><strong>2  在HTML中，使用<img>标签插入图像，下列选项关于<img>的src属性说法正确的是 </strong></p><p>(A) 用来设置图片的格式</p><p>(B) 用来设置图片的所在位置</p><p>(C) 用来设置鼠标指向图片时显示的文字</p><p>(D) 用来设置图片是否能正确显示 </p><h2 id="链接标签-重点"><a href="#链接标签-重点" class="headerlink" title="链接标签(重点)"></a>链接标签(重点)</h2><p>单词缩写：  anchor 的缩写  [ˈæŋkə(r)] 。基本解释 锚, 铁锚 的</p><p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p><p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>注意：</p><p>1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p><h3 id="锚点定位-（难点）"><a href="#锚点定位-（难点）" class="headerlink" title="锚点定位 （难点）"></a>锚点定位 （难点）</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.使用“a href=”#id名&gt;“链接文本"<span class="tag">&lt;/<span class="name">a</span>&gt;</span>创建链接文本（被点击的）</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line">2.使用相应的id名标注跳转目标的位置。</span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"two"</span>&gt;</span>第2集<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="base-标签-基本的"><a href="#base-标签-基本的" class="headerlink" title="base 标签   基本的"></a>base 标签   基本的</h3><p>base 可以设置整体链接的打开状态   </p><p>base 写到  <head><meta name="generator" content="Hexo 3.8.0">  </head>  之间</p><p>把所有的连接 都默认添加 target=”_blank”</p><p> <img src="/2018/12/11/HTML详解1/base.png"></p><h2 id="课堂一练-2"><a href="#课堂一练-2" class="headerlink" title="课堂一练"></a>课堂一练</h2><p> 1在HTML中，关于a标签说法不正确的是（）</p><p>(A) a标签可以通过href属性跳转到另外一个页面</p><p>(B) a标签可以通过targer属性设置在是否在新窗口中打开</p><p>(C) a标签只能在当前页面设置锚点链接，让用户能够快速定位到目标内</p><p>(D) a标签可以通过href=”#”设置一个空链接</p><p>2如果想跳转到当前页面里名为show的锚点，下列写法是正确的</p><p>A  &lt; a href=”.show”&gt;跳转</p><p>B &lt; a href=”#show”&gt;跳转</p><p>C &lt; a href=” show”&gt;跳转</p><p>D &lt; a src=” #show”&gt;跳转</p><p>3如果想跳转到同目录下的名为success.html文件里名为show的锚点，下列写法是正确的</p><p>(A) &lt; a href=”success.html#show”&gt;跳转</p><p>(B)  &lt; a href=”#show”&gt;跳转 </p><p>(C)  &lt; a href=”success#show”&gt;跳转<br>(D) &lt; a src=”success.html#show”&gt;跳转</p><h2 id="特殊字符标签-（理解）"><a href="#特殊字符标签-（理解）" class="headerlink" title="特殊字符标签 （理解）"></a>特殊字符标签 （理解）</h2><p> <img src="/2018/12/11/HTML详解1/zifu.png"></p><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注释语句 --&gt;</span>   ctrl + /       或者 ctrl +shift + /</span><br></pre></td></tr></table></figure><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>注释重要性：</p><p><img src="/2018/12/11/HTML详解1/zs.png"></p><h1 id="路径-重点、难点"><a href="#路径-重点、难点" class="headerlink" title="路径(重点、难点)"></a>路径(重点、难点)</h1><p><img src="/2018/12/11/HTML详解1/dt.png" width="400"></p><p><img src="/2018/12/11/HTML详解1/lj.png"></p><p>实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。</p><p>根目录  当前目录 </p><p>路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对路径。</p><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li></ol><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p><h2 id="课堂一练-3"><a href="#课堂一练-3" class="headerlink" title="课堂一练"></a>课堂一练</h2><p>1.<strong>在下面结构中，哪种写法可以在index页面中有输出img.gif</strong></p><p><img src="/2018/12/11/HTML详解1/1512226080266.png" alt="1512226080266"></p><p>(A) <code>&lt;img src=&quot;../image/img.gif&quot; /&gt;</code>        </p><p>(B) <code>&lt;img src=&quot;image/img.gif&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;image../img.gif&quot; /&gt;</code></p><p>(D) <code>&lt;img src=&quot;img.gif/image&quot; /&gt;</code></p><p><strong>2在下面结构中，哪种写法可以在index页面中有输出1.jpg</strong></p><p><img src="/2018/12/11/HTML详解1/1512226099480.png" alt="1512226099480"></p><p>(A) <code>&lt;img src=&quot;../1/2/1.jpg&quot; /&gt;</code>    </p><p>(B) <code>&lt;img src=&quot;/1/2/1.jpg&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;1/2/1.jpg&quot; /&gt;</code></p><p>(D) <code>&lt;img src=&quot;1.jpg&quot; /&gt;</code></p><p>3在下面结构中哪种写法可以在index页面中有输出img.gif</p><p><img src="/2018/12/11/HTML详解1/1512226121609.png" alt="1512226121609"></p><p>(A) <code>&lt;img src=&quot;demo/image/img.gif&quot; /&gt;</code>    </p><p>(B) <code>&lt;img src=&quot;image/img.gif&quot; /&gt;</code></p><p>(C) <code>&lt;img src=&quot;image../img.gif&quot; /&gt;</code></p><p>(D) <code>&lt;img src=&quot;img.gif/image/demo&quot; /&gt;</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>  每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;</p><p>学HTML 之前 觉得 很神秘  </p><p><img src="/2018/12/11/HTML详解1/z.png"></p><p>等你学完之后忽然发现</p><p><img src="/2018/12/11/HTML详解1/rh.jpg" width="615"></p><p>总结今天的思路贯穿线：</p><p><img src="/2018/12/11/HTML详解1/a.png" width="1000"></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>什么是列表？</p><p>把…制成表,以表显示</p><p>容器里面装载着文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是  整齐 、整洁、 有序</p><h2 id="无序列表-ul-（重点）"><a href="#无序列表-ul-（重点）" class="headerlink" title="无序列表 ul （重点）"></a>无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><p><img src="/2018/12/11/HTML详解1/ul.png"></p><p>脚下留心：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。</span><br><span class="line">2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。</span><br><span class="line">3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</span><br></pre></td></tr></table></figure><h2 id="有序列表-ol-（了解）"><a href="#有序列表-ol-（了解）" class="headerlink" title="有序列表 ol （了解）"></a>有序列表 ol （了解）</h2><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  所有特性基本与ul 一致。  </p><p>  但是实际工作中， 较少用 ol img src=”HTML详解1/1.jpg” /&gt;</p><h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用的还可以：</p><p><img src="/2018/12/11/HTML详解1/mix.png"></p><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p><img src="http://zcr4.ncfstatic.com/attachment/201403/27/10/5333888008f05_thumb_670x0.jpg" alt="img"></p><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理、显示表格式数据。</p><p><img src="/2018/12/11/HTML详解1/table.png"></p><p>ps:  这些地方用表格，你会觉得生活还是那么美好。。。。忍不住想说  PPAP i hava a pen  </p><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.table用于定义一个表格。</span><br><span class="line"></span><br><span class="line">2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</span><br><span class="line"></span><br><span class="line">3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</span><br></pre></td></tr></table></figure><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p><img src="/2018/12/11/HTML详解1/tt.png"></p><h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p><p> <img src="/2018/12/11/HTML详解1/th.png"></p><h2 id="表格结构（了解）"><a href="#表格结构（了解）" class="headerlink" title="表格结构（了解）"></a>表格结构（了解）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</span><br><span class="line"></span><br><span class="line">&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。</span><br><span class="line"></span><br><span class="line">必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。</span><br><span class="line"></span><br><span class="line">位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。</span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/thead.png"></p><h2 id="表格标题"><a href="#表格标题" class="headerlink" title="表格标题"></a>表格标题</h2><p><strong>表格的标题： caption</strong></p><p><strong>定义和用法</strong></p><p>caption 元素定义表格标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">caption</span>&gt;</span>我是表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p><h2 id="合并单元格-难点"><a href="#合并单元格-难点" class="headerlink" title="合并单元格(难点)"></a>合并单元格(难点)</h2><p>跨行合并：rowspan    跨列合并：colspan</p><p>合并单元格的思想：</p><p>​     将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p>​     公式：  删除的个数  =  合并的个数  - 1   </p><p>   合并的顺序 先上   先左 </p><h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol><li><p>表格提供了HTML 中定义表格式数据的方法。</p></li><li><p>表格中由行中的单元格组成。</p></li><li><p>表格中没有列元素，列的个数取决于行的单元格个数。</p></li><li><p>表格不要纠结于外观，那是CSS 的作用。</p><p>​</p><p><strong>表格的学习要求：  能手写表格结构，并且能合并单元格。</strong></p></li></ol><h1 id="表单标签-掌握"><a href="#表单标签-掌握" class="headerlink" title="表单标签(掌握)"></a>表单标签(掌握)</h1><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><p><img src="/2018/12/11/HTML详解1/car.jpg" width="500"></p><p>目的是为了收集用户信息。</p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p><p><img src="/2018/12/11/HTML详解1/bd.png"></p><p>  表单控件：</p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  提示信息：</p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  表单域：  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="input-控件-重点"><a href="#input-控件-重点" class="headerlink" title="input 控件(重点)"></a>input 控件(重点)</h2><p>在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。</p><p><img src="/2018/12/11/HTML详解1/input.png"></p><h2 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h2><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"male"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"每行中的字符数"</span> <span class="attr">rows</span>=<span class="string">"显示的行数"</span>&gt;</span></span><br><span class="line">  文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/12/11/HTML详解1/textarea.png"></p><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用属性：</p><ol><li>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li><li>method<br>用于设置表单数据的提交方式，其取值为get或post。</li><li>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</li></ol><p>注意：  每个表单都应该有自己表单域。</p><h1 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h1><p>经常查阅文档是一个非常好的学习习惯。</p><p>W3C :  <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></p><p>MDN: <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/</a></p><hr><h1 id="一、计算机基础知识"><a href="#一、计算机基础知识" class="headerlink" title="一、计算机基础知识"></a>一、计算机基础知识</h1><h2 id="1-1-文件和文件夹管理"><a href="#1-1-文件和文件夹管理" class="headerlink" title="1.1 文件和文件夹管理"></a>1.1 文件和文件夹管理</h2><ul><li><p>熟练掌握文件和文件夹的管理，包括创建、删除、重命名、复制、粘贴、剪切、移动。</p></li><li><p>熟练掌握“文件拓展名”的意义</p><p>在windows下，所有的文件的名字，是两部分组成的。语法：</p><p>文件名.拓展名</p><p>拓展名一般就是2~4个字母，表示文件的格式。比如.jpg是图片格式，.mp3音乐格式，.doc文档。</p><p>一般来说，操作系统，是不能显示拓展名的，需要我们自己设置。我们以win7举例：</p></li></ul><p><img src="/2018/12/11/HTML详解1/1.png" alt="1"> <img src="/2018/12/11/HTML详解1/2.png" alt="2"></p><ul><li><p>知道“打开方式”的意义<br>一个文件，可以用多种软件打开，这就叫做打开方式。<br>实际上现在你就应该树立一种思维，同一个文件可以用不同的软件打开。比如，.jpg用“照片查看器”打开，就是浏览模式；用画图打开，就是编辑模式。</p></li><li><p>会使用桌面，知道“快捷方式”的概念<br>所有快捷方式，都有一个小箭头图标。就是一个快捷入口，所以删除这个图标，程序还在。</p></li></ul><h2 id="1-2-特殊按键和快捷键"><a href="#1-2-特殊按键和快捷键" class="headerlink" title="1.2 特殊按键和快捷键"></a>1.2 特殊按键和快捷键</h2><p>键盘上除了有字母、数字之外，还有一些特殊的按键：ctrl、shift、alt、tab<br>● ctrl键是英语control“控制”的意思，这个按键，单独按没有任何作用，都要和其他的按键一起按才有用。比如ctrl+c，表示同时按住ctrl键和c键，一会儿将知道这个功能是复制。<br>● shift键是英语shift“换挡”的意思，按下这个按键同时击打字母，打出的就是大写字母。熟悉shift键来打大写字母，尽量少用大小写锁定键。<br>● alt键是英语alternate“调整”的意思，和ctrl一样，自己按没啥用，都要和其他的按键一起按才有用。比如alt+f4，表示关闭当前的窗口，比如你正在玩儿游戏，老板来了，可以按alt+f4快速关闭窗口。<br>● tab键是用于table“制表符”的意思，经常实现“切换的功能”。比如我们在word软件中同时打开了两个文档，可以用ctrl+tab键，来在两个文档之间切换。 当然，可以用alt+tab键来切换程序。</p><p>必须熟练掌握下面的快捷键：<br>ctrl+c         复制<br>ctrl+v         粘贴<br>ctrl+x         剪切（就是移动文件，在原来的文件夹ctrl+x一个文件，然后在新文件夹中ctrl+v粘贴）<br>ctrl+tab         切换（具体切换什么，要看是什么软件）<br>alt+F4         关闭程序<br>F2             重命名<br>F5             刷新，比如看网页的时候，想刷新网页，按f5<br>ctrl+z         撤销，就是这一步干错了，就ctrl+z撤销<br>windows+E     打开资源管理器<br>windows+D    显示桌面<br>ctrl+空格        切换中英文，严禁用shift键切换</p><h1 id="二、互联网的原理"><a href="#二、互联网的原理" class="headerlink" title="二、互联网的原理"></a>二、互联网的原理</h1><h2 id="2-1-上网就是请求数据"><a href="#2-1-上网就是请求数据" class="headerlink" title="2.1 上网就是请求数据"></a>2.1 上网就是请求数据</h2><p>网页上的内容，怎么就被我们看见了？什么是上网？<br>我们先不直接解决这个问题，我们做一个小实验。我们每个人的电脑里面，都有一个神秘的文件夹：<br>C:\Users\ufo\AppData\Local\Microsoft\Windows\Temporary Internet Files<br>这个文件夹叫做临时文件夹（文件夹知道存在就可以了，不用自己试着去找）<br>蓝色部分是每个人不一样的<br>我们清空这个文件夹中的全部内容</p><p>我们打开IE浏览器，看几个网页。结果，这个文件夹中又多了很多的内容：</p><p><strong>通过这个实验，目前为止，我们可以得出结论，上网的时候，是有真实的、物理的文件传输的！</strong></p><p>所以我们经常感觉第二次打开网页，比第一次快，这是因为第一次打开网页的时候，所有的图片都已经存过来了。<br>所以现在也能够解释，为什么每次都用360能清理一堆垃圾，释放很多硬盘空间。</p><p>我们可以回答刚才的问题了，“上网”究竟是是什么？答案：上网就是请求数据，就是文件传输。<br>服务器上存放着网页的相关文件，包括html文件、css文件、js文件、图片等。当我们打开浏览器，输入网址，我们的计算机就会对这些文件发出HTTP请求。<br>​    服务器收到请求之后，会把这些文件通过HTTP协议，传输到我们的计算机中（保存到了刚才那个临时文件夹中）。这些文件，将在我们计算机本地的浏览器中，进行渲染、呈递。<br>​    </p><h2 id="2-2-服务器"><a href="#2-2-服务器" class="headerlink" title="2.2 服务器"></a>2.2 服务器</h2><p>● 服务器就是计算机，只不过比咱们用的笔记本的配置牛逼了很多，并且24小时不断电，不关机。<br>● 服务器上存储着网页的相关文件。一旦有访问者浏览网站，服务器就将发送这些文件给访问者。<br>● 服务器一旦关机，网站就无法访问了。</p><h2 id="2-4-HTTP"><a href="#2-4-HTTP" class="headerlink" title="2.4 HTTP"></a>2.4 HTTP</h2><p>超文本传输协议，Hypertext Transfer Protocol。<br>这是一个文件的传输协议，我们上网的时候，所有的文件都是通过HTTP这个协议，从服务器上传输到客户的电脑里面的。</p><p><strong>网页是真实物理的文件。并且一个网页是很多的物理文件组成的：html文件、图片文件、js文件、css文件。这些文件要通过特殊软件才能上传到服务器上。然后就能让用户看了。用户通过浏览器，访问网址，服务器上面的文件就会通过http请求悄悄地传输到用户的电脑中的临时文件夹中，在用户的电脑中执行、渲染、呈递</strong></p><h1 id="三、HTML初步认识"><a href="#三、HTML初步认识" class="headerlink" title="三、HTML初步认识"></a>三、HTML初步认识</h1><h2 id="3-1-认识什么是纯文本文件txt"><a href="#3-1-认识什么是纯文本文件txt" class="headerlink" title="3.1 认识什么是纯文本文件txt"></a>3.1 认识什么是纯文本文件txt</h2><p>windows中自带一个软件，叫做记事本。记事本保存的文档格式就是txt格式，就是英语text的缩写。术语上，称呼这个文件叫做“纯文本文件”。</p><p>txt文件，只能保存文本内容，是无法记录文本样式的。<br>所以，doc和txt存储同样的内容，doc比txt大：</p><p>纯文本文件就是这样的文件：<br>1） 只有文本，没有样式；<br>2） 用记事本等纯文本编辑器可读，不是乱码<br>html、css、js都是纯本文的。</p><h2 id="3-2-HTML是负责描述文档语义的语言"><a href="#3-2-HTML是负责描述文档语义的语言" class="headerlink" title="3.2 HTML是负责描述文档语义的语言"></a>3.2 HTML是负责描述文档语义的语言</h2><p>HTML是英语HyperText Markup Language的缩写，超文本标记语言。</p><p>html提供了很多标签对儿，可以给文本增加不同的语义。比如：</p><p></p><h1>  </h1>标签对儿，主标题。<p></p><p></p><h2>  </h2>标签对儿，二级标题。<p></p><p></p><p>   </p> 标签对儿，普通段落。<p></p><p>现在的业界的标准，网页技术严格的三层分离：html就是负责描述页面的语义；css负责描述页面的样式；js负责描述页面的动态效果的。</p><p>所以，html不能让文字居中，不能更改文字字号、字体、颜色。因为这些都是属于样式范畴，都是css干的事儿；html不能让盒子运动起来，因为这些属性行为范畴，都是js干的事儿。<br>html只能干一件事儿，就是通过标签对儿，给文本增加语义。这是html唯一能做的。</p><p>html中，除了语义，其他什么都没有。</p><p>比如，面试的时候问你，h1标签有什么作用？<br>正确答案：给文本增加主标题的语义<br>错误答案：给文字加粗、加黑、变大</p><h1 id="五、HTML骨架和基本语法"><a href="#五、HTML骨架和基本语法" class="headerlink" title="五、HTML骨架和基本语法"></a>五、HTML骨架和基本语法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line">2<span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">3<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">4<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">5<span class="tag">&lt;<span class="name">title</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">6<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">7<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">8 <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一个主标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">9         <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个小段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">10<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">11<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第1行，就是网页的声明头，这行语句，千万不要背诵，谁背谁傻。术语叫做DocType Defintion，文档类型定义，简称DTD。这行语句非常的复杂，里面暗含了一个网址。W3C就是出web规范的组织机构。html、css、js的规范都是W3C定义发布的。world wide web coalition , 国际万维网联盟。网页声明头可以告诉浏览器，这是一个什么标准的页面。</p><p>第2行，是最大的html标签，所有的网页内容，都要包裹在这个标签对儿里面。</p><p>我们发现，html标签中，有两个属性：</p><p>xmlns=”<a href="http://www.w3.org/1999/xhtml&quot;" target="_blank" rel="noopener">http://www.w3.org/1999/xhtml&quot;</a>   命名空间，就是一个规范；</p><p>xml:lang=”en”   语言是英语</p><p>第3行，就是head标签，就是配置。</p><p>第4行，<meta http-equiv="Content-Type" content="text/html;charset=UTF-8"> 字符集的配置</p><p>第5行，<title>哈哈哈</title>  网页的标题，可以显示在浏览器的标签栏中。</p><p>第7行，body标签就是网页的内容，用户能够看见。</p><h1 id="一、复习上节课的内容"><a href="#一、复习上节课的内容" class="headerlink" title="一、复习上节课的内容"></a>一、复习上节课的内容</h1><p>网页的原理：用户输入网址之后，对应的服务器就发现有人请求我的网页了，所以这个服务器就会把网页和相关的图片、js文件、css文件、flash文件都通过HTTP协议传输到用户的电脑里面。HTML页面在用户的电脑里面进行渲染。HTTP协议指的是超文本传输协议。每一个网址，都对应了服务器上面的确定的文件。</p><p>纯文本文件：只有内容，没有样式。常见的纯文本文件有：.txt、.html、.js、.css、.java。没有语义，即使你这个文件中的内容排版再清晰，那也是人认为的，实际上纯文本文件中的所有的文字生而平等，没有任何的语义。</p><p>HTML：超文本标记语言，HyperText Markup Language。就是通过标签对儿，给纯文本增加语义。也就是说，用文本给文本增加语义，所以这个叫做“超文本”。而有一对儿对儿标签，也成为“标记”，所以就是“超文本标记语言”。</p><p>标签： 主标题的语义 ，h是英语headline标题的意思。</p><p>HTML中除了语义，其他什么都没有：没有样式、没有交互、没有行为。</p><p>所以HTML不能让文本居中、字号调整、颜色改变、字体、下划线、倾斜……</p><h1 id="二、HTML骨架"><a href="#二、HTML骨架" class="headerlink" title="二、HTML骨架"></a>二、HTML骨架</h1><p>标准的骨架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1<span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line">2<span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">3<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">4<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">5<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">6<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">7<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">8</span><br><span class="line">9<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">10<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-1-文档声明头"><a href="#2-1-文档声明头" class="headerlink" title="2.1 文档声明头"></a>2.1 文档声明头</h2><p>任何一个标准的HTML页面，第一行一定是一个以&lt;!DOCTYPE开头的语句。这一行，就是文档声明头，DocType Declaration。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p><p>到底有哪些规范呢？</p><p>首先我们先确定一件事儿，我们现在学习的是HTML4.01这个版本，这个版本是IE6开始兼容的。HTML5是IE9开开始兼容的。但是IE6、7、8这些浏览器还不能过早的淘汰，所以这几年网页还是应该用HTML4.01来制作。后面将知道手机、移动端的网页，就可以使用HTML5了。</p><p>HTML4.01里面有两大种规范，每大种规范里面又各有3种小规范。所以一共6种规范（见下面）：</p><p>HTML4.01里面规定了普通、XHTML两大种规范。</p><p>HTML觉得自己有一些规定不严谨，比如，标签是否可以用大写字母呢？</p><p>所以，HTML就觉得，把一些规范严格的标准，又制定了一个XHTML1.0。在XHTML中的字母X，表示“严格的”。</p><p>总结一下，</p><p>一共有6种DTD，说白了，HTML第一行语句一共有6种：</p><p><img src="/2018/12/11/HTML详解1/11.jpg" alt="1"></p><h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>有两个字库UTF-8和gb2312。</p><p>UTF-8是国际通用字库，里面涵盖了所有地球上所有人类的语言文字，比如阿拉伯文、汉语、鸟语……</p><p>gb2312 是国标，是中国的字库，里面仅涵盖了汉字和一些常用外文，比如日文片假名，和常见的符号。</p><p>字库规模：  UTF-8（字全） &gt; gb2312（只有汉字）</p><p>UTF-8里面存储一个汉字3个字节。而gb2312中存储一个汉字2个字节。</p><p>保存大小：   UTF-8（更臃肿、加载更慢） &gt; gb2312 （更小巧，加载更快）</p><p>总结：</p><p>UTF-8 字多，有各种国家的语言，但是保存尺寸大，文件臃肿；</p><p>gb2312字少，只用中文和少数外语和符号，但是尺寸小，文件小巧。</p><p>列出2个使用情形：</p><p>1） 你们公司是做日本动漫的，经常出现一些日语动漫的名字，网页要使用UTF-8。如果用gb2312将无法显示日语。</p><p>2） 你们公司就是中文网页，极度的追求网页的显示速度，要使用gb2312。如果使用UTF-8将每个汉字多一个byte，所以5000个汉字，多5kb。</p><h2 id="2-3-关键字和页面描述"><a href="#2-3-关键字和页面描述" class="headerlink" title="2.3 关键字和页面描述"></a>2.3 关键字和页面描述</h2><p>meta除了可以设置字符集，还可以设置关键字和页面描述。</p><p>设置页面描述：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Description"</span> <span class="attr">content</span>=<span class="string">"网易是中国领先的互联网技术公司，为用户提供免费邮箱、游戏、搜索引擎服务，开设新闻、娱乐、体育等30多个内容频道，及博客、视频、论坛等互动交流，网聚人的力量。"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>只要设置的Description页面面熟，那么百度搜索结果，就能够显示这些语句，这个技术叫做SEO，search engine optimization，搜索引擎优化。<img src="/2018/12/11/HTML详解1/12.png" alt="1"></p><h2 id="2-4-title标签"><a href="#2-4-title标签" class="headerlink" title="2.4 title标签"></a>2.4 title标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>title也是有助于SEO搜索引擎优化的：</p><h1 id="三、HTML的基本语法特性"><a href="#三、HTML的基本语法特性" class="headerlink" title="三、HTML的基本语法特性"></a>三、HTML的基本语法特性</h1><h2 id="3-1-HTML对换行不敏感，对tab不敏感"><a href="#3-1-HTML对换行不敏感，对tab不敏感" class="headerlink" title="3.1 HTML对换行不敏感，对tab不敏感"></a>3.1 HTML对换行不敏感，对tab不敏感</h2><p>HTML只在乎标签的嵌套结构，嵌套的关系。谁嵌套了谁，谁被谁嵌套了，和换行、tab无关。</p><p>换不换行、tab不tab，都不影响页面的结构。也就是说，HTML不是依靠缩进来表示嵌套的，就是看标签的包裹关系。但是，我们发现有良好的缩进，代码更易读。要求大家都正确缩进标签。</p><h2 id="3-2-空白折叠现象"><a href="#3-2-空白折叠现象" class="headerlink" title="3.2 空白折叠现象"></a>3.2 空白折叠现象</h2><p>HTML中所有的文字之间，如果有空格、换行、tab都将被折叠为一个空格显示。</p><h2 id="3-3-标签要严格封闭"><a href="#3-3-标签要严格封闭" class="headerlink" title="3.3 标签要严格封闭"></a>3.3 标签要严格封闭</h2><p>标签不封闭是灾难的：</p><h1 id="四、h和p标签"><a href="#四、h和p标签" class="headerlink" title="四、h和p标签"></a>四、h和p标签</h1><p>HTML标签是分等级的，HTML将所有的标签分为两种：容器级、文本级。顾名思义，容器级的标签，里面可以放置任何东西；文本级的标签里面，只能放置文字、图片、表单元素。</p><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p><img src="/2018/12/11/HTML详解1/11.png" alt="2"></p><p>标准答案：<code>&lt;img src=&quot;../../photo/1.png&quot; /&gt;</code></p><p>解释：</p><p>现在document是最大的文件夹，里面有两个文件夹work和photo。work中又有一个文件夹叫做myweb。myweb文件夹里面有index.html。  所以index.html在myweb文件夹里面，上一级就是work文件夹，上两级就是document文件夹。通过document文件夹当做一个中转站，进入photo文件夹，看到了1.png。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-第一天目标&quot;&gt;&lt;a href=&quot;#HTML-第一天目标&quot; class=&quot;headerlink&quot; title=&quot;HTML 第一天目标&quot;&gt;&lt;/a&gt;HTML 第一天目标&lt;/h1&gt;&lt;p&gt;能够写出基本的页面（里面包含图片、各种标签和链接）&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="HTML" scheme="http://wudiufo.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://wudiufo.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTTP等传输协议讲解</title>
    <link href="http://wudiufo.github.io/2018/12/10/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    <id>http://wudiufo.github.io/2018/12/10/HTTP和AJAX重点知识/</id>
    <published>2018-12-10T11:08:34.000Z</published>
    <updated>2018-12-12T08:19:49.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="成为栈开发工程师需要掌握的技术栈"><a href="#成为栈开发工程师需要掌握的技术栈" class="headerlink" title="成为栈开发工程师需要掌握的技术栈"></a>成为栈开发工程师需要掌握的技术栈</h1><h2 id="如何成为一名初级全栈开发工程师"><a href="#如何成为一名初级全栈开发工程师" class="headerlink" title="如何成为一名初级全栈开发工程师"></a>如何成为一名初级全栈开发工程师</h2><h3 id="什么是全栈开发工程师？"><a href="#什么是全栈开发工程师？" class="headerlink" title="什么是全栈开发工程师？"></a>什么是全栈开发工程师？</h3><blockquote><p>全栈（全站）开发工程师(FULL-STACK)：前后端都可以自己独立完成开发</p><p>[前端]</p><p>HTML（5）+ CSS（3）</p><p>JAVASCRIPT（JQ，VUE，REACT）</p><p>[后端]</p><p>Java (JSP)</p><p>Python</p><p>Node</p><p>PHP</p><p>C#（.net-&gt;dot net） (ASP.NET)</p><p>C</p><p>…</p><p>[数据库]</p><p>mysql</p><p>sql server</p><p>oracle</p><p>mongodb （和node结合紧密的）</p><p>…</p><p>[自动化]</p><p>git / svn</p><p>webpack(基于NODE运行的)</p><p>服务器部署工具（iis/Apache/nginx…）</p><p>linux操作系统</p><p><code>https://insights.stackoverflow.com/survey/2018</code></p></blockquote><h1 id="真实项目的部署流程-以及一点职业发展建议"><a href="#真实项目的部署流程-以及一点职业发展建议" class="headerlink" title="真实项目的部署流程(以及一点职业发展建议)"></a>真实项目的部署流程(以及一点职业发展建议)</h1><h3 id="前端和后端是如何通信的？"><a href="#前端和后端是如何通信的？" class="headerlink" title="前端和后端是如何通信的？"></a>前端和后端是如何通信的？</h3><blockquote><p>前端：客户端</p><p>后端：服务器端</p><p>所谓的全栈，其实就是自己可以实现客户端和服务端程序的编写，而且还可以实现两端之间的通信</p></blockquote><h3 id="职业规划建议："><a href="#职业规划建议：" class="headerlink" title="职业规划建议："></a>职业规划建议：</h3><blockquote><p>培养自己的人脉圈，建立自己的影响力</p><ol><li><p>壮大自己的综合能力</p></li><li><p>经常参加一些活动</p></li><li><p>开放分享（做讲师分享自己的智慧，写自己的个人博客做技术分享）</p></li><li><p>自己做一个技术博客</p><ul><li><p>本地开发（当前项目可以在本地预览）</p></li><li><p>部署到服务器上，让别人可以通过域名或者外网访问</p></li><li><ol><li>购买一台服务器（阿里云独立主机，虚拟服务器等）<code>https://wanwang.aliyun.com</code></li><li>购买域名</li><li>把自己做的项目传到服务器上</li><li>让域名和服务器关联(DNS解析：域名解析)</li><li>在服务器上发布或部署我们的项目（iis，nginx，apache…）</li></ol></li><li><p>做一些推广（SEO推广，友情链接交换，技术文章持续更新）</p><p>使用FileZilla进行FTP上传</p><p><img src="/2018/12/10/HTTP和AJAX重点知识/1.png" alt="filezilla"></p></li></ul></li></ol></blockquote><h3 id="客户端和服务器端是如何通信的？"><a href="#客户端和服务器端是如何通信的？" class="headerlink" title="客户端和服务器端是如何通信的？"></a>客户端和服务器端是如何通信的？</h3><p>经典面试题：当我们在浏览器地址中输入一个URL地址，到最后看到页面，中间都经历了哪些事情？</p><blockquote><p><strong>[Request 请求阶段]</strong></p><ol><li><p>首先根据客户端输入的域名，到DNS服务器上进行反解析（通过服务器找到对应外网IP）</p></li><li><p>通过找到的外网IP，找到对应的服务器</p></li><li><p>通过在地址栏中输入的端口号（没输入是因为不同协议有自己的默认端口号），找到服务器上发布的对应的项目</p><p><strong>[Response 响应阶段]</strong></p></li><li><p>服务器获取到请求资源文件的地址，例如：<code>/books/index.html</code>,把资源文件中的源代码找到</p></li><li><p>服务器端会把找到的源代码返回给客户端（通过HTTP等传输协议反回的）</p><p><strong>[浏览器自主渲染]</strong></p></li><li><p>客户端接收到源代码后，会交给浏览器的内核（渲染引擎）进行渲染，最后有浏览器绘制出对应的页面</p></li></ol><p>   客户端和服务器端交互(通信)模型</p><p>   <img src="/2018/12/10/HTTP和AJAX重点知识/2.png" alt="客户端和服务器端交互(通信模型)"></p></blockquote><h1 id="HTTP等传输协议讲解"><a href="#HTTP等传输协议讲解" class="headerlink" title="HTTP等传输协议讲解"></a>HTTP等传输协议讲解</h1><h3 id="URL，URI，URN"><a href="#URL，URI，URN" class="headerlink" title="URL，URI，URN"></a>URL，URI，URN</h3><blockquote><p>URI：统一资源标识符</p><p>URL：统一资源定位 </p><p>URN： 统一资源名称</p><p>URI = URL + URN</p></blockquote><h3 id="一个完整的URL包含很多部分："><a href="#一个完整的URL包含很多部分：" class="headerlink" title="一个完整的URL包含很多部分："></a>一个完整的URL包含很多部分：</h3><blockquote><p>例如：<code>https://www.haiyang.com/stu/index.html?name=hy&amp;age=6#good</code></p><p><strong>第一部分：传输协议</strong></p><ul><li><p>传输协议是用来完成客户端和服务端数据（内容）传输的，类似于快递小哥，负责把客户和商家的物品来回传递</p></li><li><ol><li><p>客户端不仅可以向服务器发送请求，而且还可以把一些参数传递给服务器</p></li><li><p>服务器端也可以把内容返回给客户端</p><p>客户端和服务器端传输的内容总称为<code>HTTP报文</code>，这些报文信息都是基于传输协议完成传输的，客户端传递给服务器叫做请求（Request），服务器端返回给客户端叫做响应（Response），request+response两个阶段统称为一个<code>HTTP事务（事务：一件完整的事情）</code></p><p>HTTP事务：</p><ol><li>当客户端向服务器端发送请求。此时客户端和服务器端会建立一个传输通道（链接通道），传输协议就是基于这个通道把信息进行传输的</li><li>当服务器端接收到请求信息，把内容返回给客户端后，传输通道会自动关闭</li></ol><p>传输协议分类：</p><p>http:超文本传输协议（客户端和服务器端传输的内容除了文本以外，还可以传输图片，音频，视频等文件流【二进制编码/BASE64码】，以及传输XML格式的数据等），是目前市场上应用最广泛的传输协议</p><p>https: http ssl，他比http更加安全，因为数据内容的传输通道是经过ssl加密的（他需要在服务器端进行特殊的处理），所以涉及资金类的网站一般都是https协议的</p><p>ftp:资源文件传输协议，一般用于客户端把资源文件（不是代码）上传到服务器端，或者从服务器端下载一些资源文件（一般ftp传输的内容会比http这类协议传输的内容多）</p></li></ol></li></ul></blockquote><h1 id="HTTP报文的一些核心知识"><a href="#HTTP报文的一些核心知识" class="headerlink" title="HTTP报文的一些核心知识"></a>HTTP报文的一些核心知识</h1><h3 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h3><blockquote><ol><li><p>起始行</p><p>请求起始行</p><p>响应起始行</p></li></ol></blockquote><blockquote><ol start="2"><li><p>首部（头）</p><p>请求头：内置请求头，自定义请求头</p><p>响应头：内置响应头，自定义响应头</p><p>通用头：请求和响应都有的</p></li></ol></blockquote><blockquote><ol start="3"><li><p>主体</p><p>请求主体</p><p>响应主体</p></li></ol><p>请求xxx都是客户端设置的信息，服务端获取这些信息</p><p>响应xxx都是服务器端设置的信息，客户端用来接收这些信息</p></blockquote><blockquote><p>在谷歌浏览器控制台Network选项中，我们可以看见当前客户端和服务器端交互的全部信息</p></blockquote><blockquote><p>总结：</p><p>客户端传递给服务器端数据</p><ol><li>URL问号传递参数</li><li>设置请求头</li><li>设置请求主体</li></ol><p>服务器端返回给客户端内容</p><ol><li>设置响应头（例如服务器时间）</li><li>设置响应主体</li></ol></blockquote><p><strong>第二部分：域名</strong></p><blockquote><p>设置域名其实就是给不好记忆的服务器外网ip设置了一个好记的名字</p><p>一级域名（顶级域名）：qq.com</p><p>二级域名：<a href="http://www.qq.com，sports.qq.com，。。。" target="_blank" rel="noopener">www.qq.com，sports.qq.com，。。。</a></p><p>三级域名：kkk.sports.qq.com</p></blockquote><p><strong>第三部分：端口号</strong></p><blockquote><p>在服务器发布项目的时候，我们可以通过端口号区分当前服务器上的不同项目</p><p>一台服务器的端口号取值范围：0-65535之间，如果电脑上安装了许多程序，有一些端口号就是被占用了</p><blockquote><p>  一个IP地址的端口可以有65536（2^16）个，端口号只有整数，范围是从0 到65535（2^16-1）。</p><p>端口有三个类型：</p><p>\1. 公认端口（Well Known Ports）是众所周知的端口号，范围从0到1023。</p><p>\2. 动态端口（Dynamic Ports）范围是从49152到65535。之所以称为动态端口，是因为它 一般不固定分配某种服务，而是动态分配。</p><p>\3. 注册端口（RegisteredPorts）范围是从1024到49151，分配给用户进程或应用程序。这些进程主要是用户选择安装的一些应用程序，而不是已经分配好了公认端口的常用程序。这些端口在没有被服务器资源占用的时候，可以用用户端动态选用为源端口。  </p></blockquote><p>HTTP: 默认端口号80</p><p>HTTPS：默认端口号443</p><p>FTP：默认端口号21</p><p>对于上述三个端口号其实是很重要的，如果被其他程序占用，我们就不能使用了，所以在服务器上一般是禁止安装其他程序的</p></blockquote><p><strong>第四部分：请求资源的文件路径名称</strong></p><blockquote><p>/boos/index.html</p><p>在服务器中发布项目的时候，我们一般都会配置一些默认文档，用户即使不输入请求文件的名称，服务器也会找到默认文档（一般默认文档都是 index/default …）</p><p>我们通常为了做SEO优化，会把一些动态页面的地址（xxx.py，xxx.jsp，xxx.php …）进行伪URL重写（需要服务器处理的）</p><p>例如：<code>https://item.jd.com/342535.html</code></p><blockquote><p>不可能 有一个商品就写一个详情页，肯定是同一个详情页做不同的处理</p><ol><li><p>第一种方案：</p><p>由后台语言根据详情页模板动态生成具体的详情页面</p></li><li><p>第二种方案：</p><p>当前页面就是一个页面，例如：detail.html/detail.php，我们做详情页面的时候，开发是按照detail.html?id=787878来开发的。但是这种页面不方便做SEO优化，此时我们把真实的地址进行重写，重写为我们看到的787878.html</p></li></ol></blockquote></blockquote><p><strong>第五部分：问号传参</strong></p><blockquote><p>?name=hy&amp;age=6</p><p>把一些值通过xxx=xxx的方式，放在一个URL的末尾，通过？传递参数</p><p>【作用】</p><ol><li>在AJAX请求中，我们可以通过问号传递参数的方式，客户端把一些信息传递给服务器，服务器根据传递信息的不一样，返回不同的数据</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $.ajax(url,&#123;&#125;);</span></span><br><span class="line"><span class="comment">// $.get(url,function()&#123;&#125;);对于AJAX请求的特殊写法，原理还是基于AJAX方法实现的  $.post / $.script</span></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'getPersonInfo?id=11'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前案例，我们传递给服务器的编号是多少，服务器就会把对应编号的人员返回</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>消除AJAX请求中GET方式缓存</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'xxx?_=0.3434'</span>,</span><br><span class="line">    method: <span class="string">'get'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 我们会在请求URL末尾追加一个随机数 _=随机数，保证每一次请求的URL地址都是不一样的，以此来消除GET请求遗留的缓存问题</span></span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>通过URL传递参数的方式，可以实现页面之间信息的通信，例如：我们有两个页面A/B，A是列表页面，B是详情页面，点击A中的某一条信息，进入到唯一的详情页B，如何展示不同的信息，这种操作就可以基于URL问号传递参数来实现</li></ol><p>例如：</p><p><a href="http://sports.qq.com/kbsweb/game.html?mid=10000:123" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.html?mid=10000:123</a></p><p><a href="http://sports.qq.com/kbsweb/game.html?mid=10000:125" target="_blank" rel="noopener">http://sports.qq.com/kbsweb/game.html?mid=10000:125</a></p><p>在进入到game.html页面的时候，我们可以获取URL传递的参数值，根据传递参数值的不一样，从服务器端获取不同的数据展示</p><p>在列表页面进行页面跳转的时候，我们需要记住的是跳转的同时传递不同的参数值</p><p><code>&lt;a href=&#39;game.html?mid=xxx&#39;</code></p></blockquote><p><strong>第六部分：HASH值</strong></p><blockquote><p>/#xxx</p><p>URL末尾传递的#号就是HASH值（）哈希值</p><p>【作用】</p><ol><li>页面中锚点定位</li><li>前端路由（SPA 单页面开发）</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;成为栈开发工程师需要掌握的技术栈&quot;&gt;&lt;a href=&quot;#成为栈开发工程师需要掌握的技术栈&quot; class=&quot;headerlink&quot; title=&quot;成为栈开发工程师需要掌握的技术栈&quot;&gt;&lt;/a&gt;成为栈开发工程师需要掌握的技术栈&lt;/h1&gt;&lt;h2 id=&quot;如何成为一名初级全
      
    
    </summary>
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/categories/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="HTTP和AJAX重点知识" scheme="http://wudiufo.github.io/tags/HTTP%E5%92%8CAJAX%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>react-redux和redux</title>
    <link href="http://wudiufo.github.io/2018/12/09/react-redux%E5%92%8Credux/"/>
    <id>http://wudiufo.github.io/2018/12/09/react-redux和redux/</id>
    <published>2018-12-09T13:37:22.000Z</published>
    <updated>2018-12-10T11:07:54.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redux-原理：统一管理状态"><a href="#redux-原理：统一管理状态" class="headerlink" title="redux 原理：统一管理状态"></a>redux 原理：统一管理状态</h2><p><strong>redux GitHub地址：<code>https://github.com/reduxjs/redux</code></strong></p><p><strong>redux 说明文档：`<a href="https://redux.js.org/" target="_blank" rel="noopener">https://redux.js.org/</a></strong>`</p><blockquote><ul><li><p>createStore 创建容器store来保存状态的的</p><blockquote><ul><li>创建容器需要传一个管理员 reducer（用户自己定义的）</li><li>state 属性，外界不可以直接访问</li><li>getState 外界可以通过store.getState 访问和获取这个状态</li><li>dispatch 派发一个动作，内部会调用reducer，通过这个方法修改更新状态state</li><li>subscribe 定阅事件（当用户派发dispatch的时候，内部会触发订阅的事件执行）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">&gt;   &gt;   <span class="keyword">let</span> state, listener = [],</span><br><span class="line">&gt;   &gt;     dispatch, subscribe, getState;</span><br><span class="line">&gt;   &gt;   dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">&gt;   &gt;     reducer(state, action);</span><br><span class="line">&gt;   &gt;     listener.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item())</span><br><span class="line">&gt;   &gt;   &#125;;</span><br><span class="line">&gt;   &gt;   dispatch(&#123;&#125;);</span><br><span class="line">&gt;   &gt;   subscribe = <span class="function">(<span class="params">fn</span>) =&gt;</span> &#123;</span><br><span class="line">&gt;   &gt;     listener = [...listener, fn];</span><br><span class="line">&gt;   &gt;     <span class="keyword">return</span> () &#123;</span><br><span class="line">&gt;   &gt;       listener = listener.filter(<span class="function"><span class="params">item</span> =&gt;</span> item != fn)</span><br><span class="line">&gt;   &gt;     &#125;</span><br><span class="line">&gt;   &gt;   &#125;;</span><br><span class="line">&gt;   &gt;   getState = <span class="function"><span class="params">()</span> =&gt;</span> (<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state)));</span><br><span class="line">&gt;   &gt;   <span class="keyword">return</span> &#123;</span><br><span class="line">&gt;   &gt;     dispatch,</span><br><span class="line">&gt;   &gt;     subscribe,</span><br><span class="line">&gt;   &gt;     getState</span><br><span class="line">&gt;   &gt;   &#125;</span><br><span class="line">&gt;   &gt; </span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><blockquote></blockquote></blockquote><blockquote><ul><li><p>combineReducers 合并状态，将多个管理员reducer合并成一个</p><blockquote><ul><li>参数 {reducer1，reducer2，。。。}</li><li>合并之后的状态 {reducer1：reducer1(), reducer2: reducer2(), …}</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;   &gt; <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">&gt;   &gt;   <span class="keyword">return</span> <span class="function">(<span class="params">state = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">&gt;   &gt;     <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">&gt;   &gt;     <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> reducers) &#123;</span><br><span class="line">&gt;   &gt;       obj[key] = reducers[key](state[key], action)</span><br><span class="line">&gt;   &gt;     &#125;</span><br><span class="line">&gt;   &gt;     <span class="keyword">return</span> obj;</span><br><span class="line">&gt;   &gt;   &#125;</span><br><span class="line">&gt;   &gt; &#125;</span><br><span class="line">&gt;   &gt; </span><br><span class="line">&gt;   &gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul></blockquote><blockquote><blockquote></blockquote></blockquote><h2 id="react-组件中使用redux"><a href="#react-组件中使用redux" class="headerlink" title="react 组件中使用redux"></a>react 组件中使用redux</h2><blockquote><ul><li><p>定义功能（动作）常量，一般单独放在一个js文件中，action-types.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">const</span> INCREMENT = <span class="string">"INCREMENT"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>定义管理员reducer，创建容器store的时候传进reducer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">import</span> action-types.js</span><br><span class="line">&gt;   <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state=initState, action</span>)</span>&#123;</span><br><span class="line">&gt;       <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">&gt;           <span class="keyword">case</span> INCREMENT:</span><br><span class="line">&gt;               <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">&gt;               ...</span><br><span class="line">&gt;               <span class="keyword">default</span>:</span><br><span class="line">&gt;               <span class="keyword">return</span> state</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>定义一个actions，是一个对象，每一个action都需要一个函数返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">let</span> actions = &#123;</span><br><span class="line">&gt;       add: <span class="function">(<span class="params">count</span>)=&gt;</span>&#123;</span><br><span class="line">&gt;           <span class="keyword">return</span> &#123;<span class="attr">type</span>: INCREMENT, count&#125;</span><br><span class="line">&gt;       &#125;,</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>在组件中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">&gt;       <span class="keyword">super</span>();</span><br><span class="line">&gt;       <span class="comment">// 组件状态的初始化</span></span><br><span class="line">&gt;       <span class="keyword">this</span>.state = &#123;<span class="attr">number</span>: store.getState().number&#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   componentDidMount()&#123;</span><br><span class="line">&gt;       <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">&gt;           <span class="comment">//将redux管理的状态映射到组件自己的状态上</span></span><br><span class="line">&gt;           <span class="keyword">this</span>.setState(&#123;<span class="attr">number</span>: store.getState().number&#125;)&#125;)</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   componentWillUnmount()&#123;</span><br><span class="line">&gt;       <span class="comment">//取消订阅</span></span><br><span class="line">&gt;       <span class="keyword">this</span>.unsubscribe()</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   render()&#123;</span><br><span class="line">&gt;       <span class="comment">//视图放的一定是组件自己的状态或属性</span></span><br><span class="line">&gt;       <span class="keyword">return</span> &lt;div&gt;&#123;this.state.number&#125;&lt;/div&gt;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li><p>派发动作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;   store.dispatch(actions.add(3))</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p><strong>react-redux GitHub地址： `<a href="https://github.com/reduxjs/react-redux" target="_blank" rel="noopener">https://github.com/reduxjs/react-redux</a></strong>`</p><p><strong>react-redux 说明文档： <code>https://react-redux.js.org/</code></strong></p><blockquote><ul><li><p>Provider组件，一般是在最外层使用Provider包裹起来，将store 当做属性传给他，被其包裹的组件都可以使用容器store中的状态，但是组件必须使用 connect 方法处理</p></li><li><p>connect 方法：将组件处理成链接状态的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;   connect (mapStateToProps, mapDispatchToProps)(组件)</span><br><span class="line">&gt;   <span class="comment">//返回一个新的组件</span></span><br><span class="line">&gt;   <span class="comment">//mapStateToProps：将redux中的状态映射成组件的属性</span></span><br><span class="line">&gt;   <span class="comment">//mapDispatchToProps:将dispatch派发的动作映射成组件的属性。（也可以直接传一个actions，redux默认会调用 bindActionCreators ，变成dispatch）</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>在组件中使用 <code>this.props.xxx</code></li></ul></blockquote><p>流程图</p><p><img src="/2018/12/09/react-redux和redux/redux流程图.jpg" alt="redux流程图"></p><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><blockquote><p>一个函数返回一个函数<code>let fn = ()=&gt;()=&gt;()</code></p></blockquote><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><blockquote><p>一个组件，返回一个新的组件</p></blockquote><h4 id="手写react-redux"><a href="#手写react-redux" class="headerlink" title="手写react-redux"></a>手写react-redux</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span></span><br><span class="line"><span class="comment">// Provider 是一个组件，接收一个store属性，将其内容挂载到context上,这样后代才可以有办法拿到</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">    <span class="comment">//设置上下文的类型是对象</span></span><br><span class="line">    store:PropTypes.object</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  getChildContext()&#123;</span><br><span class="line">    <span class="comment">//获取并设置后代上下文的内容</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="keyword">this</span>.props.store&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connect = <span class="function">(<span class="params">mapStateToProps, mapDispatchToProps</span>)=&gt;</span><span class="function">(<span class="params">C</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">      store:PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props, context)&#123;</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="comment">//将参数mapStateToProps的解构赋值给代理组件的状态</span></span><br><span class="line">      <span class="keyword">this</span>.state = mapStateToProps(context.store.getState())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">      <span class="keyword">this</span>.context.store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(mapStateToProps(<span class="keyword">this</span>.context.store.getState())</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;/C &#123;...this.state&#125;</span><br><span class="line">      &#123;...mapDispatchToProps(this.context.store.dispatch)&#125;</span><br><span class="line">      &gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export &#123;Provider, connect&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redux-原理：统一管理状态&quot;&gt;&lt;a href=&quot;#redux-原理：统一管理状态&quot; class=&quot;headerlink&quot; title=&quot;redux 原理：统一管理状态&quot;&gt;&lt;/a&gt;redux 原理：统一管理状态&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;redux GitH
      
    
    </summary>
    
      <category term="react-redux和redux" scheme="http://wudiufo.github.io/categories/react-redux%E5%92%8Credux/"/>
    
    
      <category term="react-redux和redux" scheme="http://wudiufo.github.io/tags/react-redux%E5%92%8Credux/"/>
    
  </entry>
  
  <entry>
    <title>VMware Workstation Pro激活</title>
    <link href="http://wudiufo.github.io/2018/12/07/VMware-Workstation-Pro%E6%BF%80%E6%B4%BB/"/>
    <id>http://wudiufo.github.io/2018/12/07/VMware-Workstation-Pro激活/</id>
    <published>2018-12-07T10:46:11.000Z</published>
    <updated>2018-12-07T10:54:59.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>到 <a href="https://my.vmware.com/cn/web/vmware/info/slug/desktop_end_user_computing/vmware_workstation_pro/15_0" target="_blank" rel="noopener">VMware Workstations</a> 官网下载对应版本的虚拟机。</p></blockquote><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><blockquote><p>VMware Workstation Pro 15.0.2 官方版+激活密钥:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZC10K-8EF57-084QZ-VXYXE-ZF2XF</span><br><span class="line">&gt; </span><br><span class="line">&gt; UF71K-2TW5J-M88QZ-8WMNT-WKUY4</span><br><span class="line">&gt; </span><br><span class="line">&gt; AZ7MK-44Y1J-H819Z-WMYNC-N7ATF</span><br><span class="line">&gt; </span><br><span class="line">&gt; CU702-DRD1M-H89GP-JFW5E-YL8X6</span><br><span class="line">&gt; </span><br><span class="line">&gt; YY5EA-00XDJ-480RP-35QQV-XY8F6</span><br><span class="line">&gt; </span><br><span class="line">&gt; VA510-23F57-M85PY-7FN7C-MCRG0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;到 &lt;a href=&quot;https://my.vmware.com/cn/web/vmware/info/slug/
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>faststone capture 注册码</title>
    <link href="http://wudiufo.github.io/2018/12/07/faststone%20capture%20%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://wudiufo.github.io/2018/12/07/faststone capture 注册码/</id>
    <published>2018-12-07T07:04:18.000Z</published>
    <updated>2018-12-07T11:33:35.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>点击 <a href="http://baoku.360.cn/soft/search?kw=faststone%20capture" target="_blank" rel="noopener">FastStone Capture</a>  下载软件</p></blockquote><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><blockquote><p>FastStone Capture 8.4 注册码:</p><p>name：bluman<br>　　serial/序列号/注册码：VPISCJULXUFGDDXYAUYF</p></blockquote><p><strong>FastStone Capture 是一款很好用的截图软件，推荐使用</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;点击 &lt;a href=&quot;http://baoku.360.cn/soft/search?kw=faststone%
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm (Jetbrains) 全系列软件永久破解方法</title>
    <link href="http://wudiufo.github.io/2018/12/07/WebStorm-Jetbrains-%E5%85%A8%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>http://wudiufo.github.io/2018/12/07/WebStorm-Jetbrains-全系列软件永久破解方法/</id>
    <published>2018-12-07T07:04:18.000Z</published>
    <updated>2018-12-07T10:43:13.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>这里以下载 WebStorm 来演示，其他都一样。</li></ul><blockquote><p>到官网 <a href="https://www.jetbrains.com/webstorm/download/#section=windows" target="_blank" rel="noopener">WebStorm</a> 下载软件，还可以点击 <a href="https://www.jetbrains.com/webstorm/download/previous.html" target="_blank" rel="noopener">Previous versions</a> 下载之前的版本。</p><p><strong>注意：由于 WebStorm 最新版不太稳定，用破解补丁破解容易出现闪退现象，建议不下载最新版本的WebStorm</strong></p></blockquote><h2 id="破解补丁激活WebStorm"><a href="#破解补丁激活WebStorm" class="headerlink" title="破解补丁激活WebStorm"></a>破解补丁激活WebStorm</h2><blockquote><ol><li><p>到百度网盘下载 <a href="https://pan.baidu.com/s/1mcQM8CLUnweY02ahKEr4PQ" target="_blank" rel="noopener">文件</a>  ，JetbrainsCrack-release-enc.jar，放置到 WebStorm安装目录的\bin目录下（位置可随意，只要配置文件填写相对应的路径）。</p></li><li><p>在 WebStorm安装目录的\bin目录下找到 WebStorm.exe.vmoptions 和 WebStorm64.exe.vmoptions ，以文本格式打开并同时在两个文件最后追加  -javaagent:G:\你WebStorm的安装路径\bin\JetbrainsCrack-release-enc.jar，注意路径修改成你的WebStorm安装路径，然后保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    -javaagent:G:\webstorm\WebStorm 2018.3.1\bin\JetbrainsCrack-release-enc.jar</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="3"><li><p>启动WebStorm ,选择激活码激活，输入如下内容激活:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt;     </span><br><span class="line">&gt;    ThisCrackLicenseId-&#123;</span><br><span class="line">&gt;    &quot;licenseId&quot;:&quot;11011&quot;,</span><br><span class="line">&gt;    &quot;licenseeName&quot;:&quot;WeChat&quot;,</span><br><span class="line">&gt;    &quot;assigneeName&quot;:&quot;IT--Pig&quot;,</span><br><span class="line">&gt;    &quot;assigneeEmail&quot;:&quot;1113449881@qq.com&quot;,</span><br><span class="line">&gt;    &quot;licenseRestriction&quot;:&quot;&quot;,</span><br><span class="line">&gt;    &quot;checkConcurrentUse&quot;:false,</span><br><span class="line">&gt;    &quot;products&quot;:[</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;II&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;DM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;AC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;RS0&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;WS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;DPN&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;RC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;PS&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;DC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;RM&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;CL&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;,</span><br><span class="line">&gt;    &#123;&quot;code&quot;:&quot;PC&quot;,&quot;paidUpTo&quot;:&quot;2099-12-31&quot;&#125;</span><br><span class="line">&gt;    ],</span><br><span class="line">&gt;    &quot;hash&quot;:&quot;2911276/0&quot;,</span><br><span class="line">&gt;    &quot;gracePeriodDays&quot;:7,</span><br><span class="line">&gt;    &quot;autoProlongated&quot;:false&#125;</span><br><span class="line">&gt;    </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这里以下载 WebStorm 来演示，其他都一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;到官网 &lt;a href
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Windows10破解</title>
    <link href="http://wudiufo.github.io/2018/12/07/Windows10%E7%A0%B4%E8%A7%A3/"/>
    <id>http://wudiufo.github.io/2018/12/07/Windows10破解/</id>
    <published>2018-12-07T07:04:18.000Z</published>
    <updated>2018-12-07T13:03:27.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>到 <a href="https://www.microsoft.com/zh-cn/software-download/windows10" target="_blank" rel="noopener">Windows 10</a> 官网，按照具体步骤下载Windows10系统</p></blockquote><h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><blockquote><ol><li>到百度网盘下载 <a href="https://pan.baidu.com/s/12OLtwrD0kYSqViC3yHgZ5Q" target="_blank" rel="noopener">破解器</a></li></ol><p>提取码: nrzr </p><ol start="2"><li>下载完解压到对应的文件夹下，单击运行，稍等一会，破解就成功了。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;到 &lt;a href=&quot;https://www.microsoft.com/zh-cn/software-downl
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Adobe系列软件破解</title>
    <link href="http://wudiufo.github.io/2018/12/07/Adobe%E7%B3%BB%E5%88%97%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3/"/>
    <id>http://wudiufo.github.io/2018/12/07/Adobe系列软件破解/</id>
    <published>2018-12-07T07:04:18.000Z</published>
    <updated>2018-12-07T13:06:20.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>到 <a href="https://www.adobe.com/cn/downloads.html" target="_blank" rel="noopener">Adobe 官网</a>  下载你需要的对应的软件。</p></blockquote><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><blockquote><ol><li><p>到百度网盘下载 <a href="https://pan.baidu.com/s/1CQHi48k7X-0KPpIOB9t7sw" target="_blank" rel="noopener">Adobe 全能软件破解器</a></p><p>提取码: cy4p </p></li><li><p>下载完解压到对应的目录，双击运行 <code>amtemu.v0.9.2-painter.exe</code> ，选择好要破解的Adobe软件，点击 <code>Install</code> 运行安装，选择对应软件的 <code>amtlib.dll</code> 文件，自动替换为破解后的 <code>amtlib.dll</code> 文件，出现 OK 就是破解成功。</p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;到 &lt;a href=&quot;https://www.adobe.com/cn/downloads.html&quot; targe
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mark Man 软件破解方法</title>
    <link href="http://wudiufo.github.io/2018/12/07/Mark-Man-%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>http://wudiufo.github.io/2018/12/07/Mark-Man-软件破解方法/</id>
    <published>2018-12-07T06:49:34.000Z</published>
    <updated>2018-12-07T13:09:01.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><blockquote><p>点击 <a href="http://www.getmarkman.com/" target="_blank" rel="noopener">Mark Man</a>  到官网下载软件。</p></blockquote><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><blockquote><p>到 <a href="https://pan.baidu.com/s/1ggc9kb5hUYPURRim_yJAbw" target="_blank" rel="noopener">百度网盘</a>, 下载 Mark Man 破解版的压缩包，解压到对应的文件夹下。<br>提取码: b68y </p><p>安装好MarkMan之后，去安装根目录替换MarkManOne.swf破解成功，无广告，可以保存编辑状态。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;点击 &lt;a href=&quot;http://www.getmarkman.com/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="前端必备软件" scheme="http://wudiufo.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Git基础知识</title>
    <link href="http://wudiufo.github.io/2018/12/04/Git%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://wudiufo.github.io/2018/12/04/Git基础知识/</id>
    <published>2018-12-04T13:36:33.000Z</published>
    <updated>2018-12-09T09:10:01.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GIT基础知识"><a href="#GIT基础知识" class="headerlink" title="GIT基础知识"></a>GIT基础知识</h3><ul><li><ol><li><h4 id="什么是git？"><a href="#什么是git？" class="headerlink" title="什么是git？"></a>什么是git？</h4><a id="more"></a><blockquote><p>分布式版本控制系统，它是由Linux（全球比较大的服务器系统）创始人花两周使用C语言编写的，(在GIT命令窗口中一般是执行Linux命令)</p><ol><li><p>什么是版本控制系统？</p><p>能够把之前操作的具体信息记录下来，方便日后的更改。 </p><ul><li>备份文件</li><li>记录历史</li><li>回到过去</li><li>多端共享</li><li>团队协作</li></ul></li><li><p>常用的版本控制系统</p><ul><li>git：分布式版本控制系统</li><li>svn：集中式版本控制系统</li></ul><blockquote><p><strong>面试题</strong>：分布式和集中式的区别？</p><p>[集中式]：<img src="/2018/12/04/Git基础知识/集中式.jpg" alt="集中式"></p><ul><li>想要做历史记录的查看或者备份，必须连接到中央服务器才可以（需要联网）</li><li>处理速度没有git快</li></ul><p>[分布式]：<img src="/2018/12/04/Git基础知识/分布式.jpg" alt="分布式"></p><ul><li>每个开发者本地都是一个单独的仓库，在自己的仓库中就可以完成历史版本记录和查看（不需要联网）</li><li>git处理的速度更快（git是按照数据存储的）</li></ul></blockquote></li></ol></blockquote></li></ol></li></ul><h3 id="Linux操作系统中常用的命令"><a href="#Linux操作系统中常用的命令" class="headerlink" title="Linux操作系统中常用的命令"></a>Linux操作系统中常用的命令</h3><ul><li><p>ls：查看当前目录下的文件（或文件夹）</p><ul><li><p>-l ：查看详细信息</p></li><li><p>-a：查看隐藏文件</p></li><li><p>-la：同时具备以上特点</p></li></ul></li><li>clear：清屏</li><li><p>cd: 目录切换</p><ul><li>cd ../ 返回上级目录</li><li>cd ./  返回当前目录</li><li>cd /  返回根目录</li><li>cd xxx  进入到指定文件夹</li><li>cd E  进入到指定的磁盘</li></ul></li><li><p>mkdir 创建文件夹</p></li><li><p>touch 创建一个空文件</p><ul><li>可以创建无文件名的文件，例如：<code>touch .gitignore</code></li><li>在电脑隐藏文件后缀名的情况下，我们也不至于创建出1.txt.txt这样重复后缀名的文件</li></ul></li><li><p>vi 向指定文件中插入内容 例如：vi.txt</p><ul><li>首先进入命令窗口模式</li><li>我们先按i，进入到插入内容模式</li><li>编辑需要写的内容</li><li>按ESC键，再按英文下的 : 键，再按wq（保存并退出）</li><li>按 q！（强制退出，新输入的内容不保存）</li></ul></li><li><p>echo xxx &gt; 1.txt   把xxx内容放到1.txt文件中，如果没有这个文件则创建这个文件（新存放的内容会替换原有文件的内容）</p></li><li>echo xxx &gt;&gt; 1.txt  新的内容会追加到原有内容的后面</li><li>cat  查看文件中的内容</li><li>cp  拷贝文件</li><li>rm 删除文件<ul><li>-r  递归删除（把当前文件夹中所有的后代元素都遍历到删除）</li><li>-f  强制删除</li><li>-rf 上面两种合并到一起，没有办法还原回来，使用要慎重</li></ul></li></ul><h3 id="Git的工作原理和流程"><a href="#Git的工作原理和流程" class="headerlink" title="Git的工作原理和流程"></a>Git的工作原理和流程</h3><blockquote><p>安装完成git后，我们应该先把基础信息配置一下（自己需要配置一次即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ git config -l 查看当前本机的配置清单</span><br><span class="line">&gt; $ git config --global user.name xxx </span><br><span class="line">&gt; $ git config --global user.email xxx</span><br><span class="line">&gt; (xxx写github/coding等平台的账号和邮箱)</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h4><blockquote><p>Git是分布式版本控制系统，每一台客户端都是一个独立的git仓库（有git工作的全套机制）</p><p>一个git仓库分为三个区域;</p><ol><li>工作区：平时写代码的地方</li><li>暂存区：写好的一些代码暂时存储的地方</li><li>历史区：生成一个个版本记录得地方</li></ol><p><img src="/2018/12/04/Git基础知识/git的工作流程.jpg" alt="git的工作流程"></p></blockquote><h5 id="1-创建GIT仓库"><a href="#1-创建GIT仓库" class="headerlink" title="1.创建GIT仓库"></a>1.创建GIT仓库</h5><blockquote><p>在指定目录中，打开git bash命令行，执行 <code>git init</code> ，相当于以当前目录作为基础，创建了一个本地git仓库 </p><p>创建完成后，会在项目的根目录中展示 .git 这个隐藏文件：有这个.git文件的才叫做git仓库，没有则不能被称为git仓库（因为暂存区和历史区都是存在 .git 文件夹中的）</p></blockquote><h5 id="2-把工作区的内容提交到暂存区"><a href="#2-把工作区的内容提交到暂存区" class="headerlink" title="2.把工作区的内容提交到暂存区"></a>2.把工作区的内容提交到暂存区</h5><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ git add xxx  把某个文件提交到暂存区</span><br><span class="line">&gt; $ git add . 把所有修改的文件（修改和新增的包含，删除的不包含）提交到暂存区</span><br><span class="line">&gt; $ git add -u 把所有修改的文件（包含修改和删除的，不包含新增的）</span><br><span class="line">&gt; $ git add -A 是点和u的集合体，（所有修改，新增，删除的信息都会提交到暂存区），但是真实效果中两者都差不多，用哪个都可以</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; $ git status 查看当前文件的状态</span><br><span class="line">&gt; 红色：在工作区中，还没有提交到暂存区</span><br><span class="line">&gt; 绿色：在暂存区中，还没有提交到历史区</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><p>如果在提交的时候，有些内容不想提交，我们可以增加git提交的忽略文件：  <code>.gitignore</code>  (没有文件名只有后缀名)</p></li><li><p>.gitignore 中的信息：</p><blockquote><p>.idea   // 使用WS打开项目或者编辑项目，自动会生成的文件</p><p>node_modules  //  使用npm安装模块的时候，当前安装在项目中的第三方模块都在这个文件夹中（之所以忽略是因为文件太大了）</p><p>.DS_Store (mac本中的文件)等等</p></blockquote></li></ul></blockquote><h5 id="3-把暂存区提交到历史区"><a href="#3-把暂存区提交到历史区" class="headerlink" title="3.把暂存区提交到历史区"></a>3.把暂存区提交到历史区</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line">$ git commit -m<span class="string">'注释内容'</span></span><br><span class="line"></span><br><span class="line">$ git commit -a -m<span class="string">'注释内容'</span>  </span><br><span class="line">把提交到暂存区和提交到历史区合并到一起完成。但是只适合已经提交过一次的文件，被修改后可以快速提交。但是对于新增的文件，一次都没有提交过的，是不允许这样操作的。</span><br></pre></td></tr></table></figure><p>【root-commit】根提交：</p><ul><li>简单理解为：第一次提交到历史区域，如果我们创建一个新的仓库。但是没有做根提交，此时我们仓库中没有任何分支（哪怕是master），也就不存在所谓的分支切换（当前仓库还不完整，只有一个工作流程走完一遍才算完整）</li></ul><h5 id="4-工作流中的一些细节知识："><a href="#4-工作流中的一些细节知识：" class="headerlink" title="4.工作流中的一些细节知识："></a>4.工作流中的一些细节知识：</h5><blockquote><p>不管是从工作区提交到暂存区，还是从暂存区提交到历史区，每一个区域当前的内容是已知保存下来的不会消失。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">或</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><blockquote><p>都是查看历史提交记录的（也相当于查看历史版本号），在没有历史版本回滚的时候，我们用哪个都可以。如果有历史版本回滚，<code>git log</code> 只能查看当前回退版本以前的版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached . -r</span><br></pre></td></tr></table></figure><blockquote><p>可以把 <code>.</code> 替换为具体的文件名，这条命令的意思是：</p><p>从暂存区把所有内容（或者是你指定的具体文件）都撤回到工作区（不管暂存区中的内容是否已经提交到历史版本上了，也不管是你第几次放到暂存区的，统统撤回到工作区）</p><p><strong>这种方式太暴力，我们用的很少，不推荐使用</strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout .</span><br></pre></td></tr></table></figure><blockquote><p>这条命令的意思是：</p><p>把暂存区内容撤回工作去（覆盖现有工作区中的内容无法找回）。</p><p>也可以理解为：用上一个暂存区存储的内容覆盖现有工作区的内容，工作区内容变为和上一个暂存区一样的内容，暂存区内容还在。</p><p>存在问题：只能限制当前代码还没有提交的情况，当前代码没提交回滚的是上一次提交到暂存区的内容（和工作区内容不一样）；如果当前这次也提交了，暂存区和工作区一样，回滚回来也是一样的，这个方式就解决不了了。</p><p>解决问题：</p><ol><li>输入命令 <code>$ git reset HEAD .</code> : 在暂存区中，回滚到上一次暂存区中记录的内容（暂存区先回滚一次）</li><li>输入命令  <code>$ git checkout .</code>  : 把最新暂存区的内容回滚到工作区，替换工作区中的内容</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><blockquote><p>工作区 VS 暂存区 ：<code>git diff</code></p><p>工作区 VS 历史区 ： <code>git diff master</code></p><p>暂存区 VS 历史区 ： <code>git diff --cached</code></p><p>查看不同区域之间代码的不同，我们一般都是基于可视化的页面来查看不一样的</p></blockquote><p><strong>最重要的代码回滚技巧：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 版本号</span><br></pre></td></tr></table></figure><blockquote><p><code>git log</code> 可以查看版本号</p><p>回滚的时候指定的版本号不一定非常全，有七八位即可</p><p>当我们回滚到某一个历史版本之后，暂存区和工作区的内容都将被这个版本内容所代替</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">history</span> &gt; xxx.txt    //（把历史操作步骤输出）</span><br></pre></td></tr></table></figure><h3 id="团队协作开发下的git操作"><a href="#团队协作开发下的git操作" class="headerlink" title="团队协作开发下的git操作"></a>团队协作开发下的git操作</h3><blockquote><ul><li>前面讲的都是单独开发，在自己本地建立git仓库的一系列操作流程，在团队写作开发下，流程还是有所区别的</li></ul></blockquote><h4 id="1-创建中央仓库"><a href="#1-创建中央仓库" class="headerlink" title="1. 创建中央仓库"></a>1. 创建中央仓库</h4><blockquote><ul><li><p>一般是由团队技术LEADER或者指派人完成的，仓库中默认是有一些初始化文件的</p></li><li><p>中央仓库可能是在：gitHub，Coding，自己公司的git仓库服务平台，自己公司的服务器等…</p></li><li><ol><li><p>基于gitHub创建远程仓库，创建完成后会生成一个远程地址，例如： <code>https//github.com/username/Repository name.git</code></p></li><li><p>作为LEADER，还需要把项目中一些基础的信息提交到远程仓库上：</p><blockquote><ol><li>在自己本地创建一个仓库，把一些基础内容都放在仓库中</li><li>把新增加的内容提交到本地仓库历史区中</li><li>让本地仓库和远程仓库保持关联</li><li>把本地仓库历史区中的信息同步（推送）到远程仓库上</li></ol></blockquote></li></ol></li><li><p>让本地仓库和远程仓库保持关联：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ git remote add 名字（一般都叫做origin） 远程仓库地址</span><br><span class="line">&gt; </span><br><span class="line">&gt; $ git remote rm 名字  // 移除关联</span><br><span class="line">&gt; </span><br><span class="line">&gt; $ git remote -v   // 查看当前仓库和哪些远程仓库保持关联</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li><p>让本地历史区信息和远程仓库信息保持同步：</p><p>第一种方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   $ git push origin master</span><br><span class="line">&gt;   // 把本地信息推送到远程仓库上</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   $ git pull origin master</span><br><span class="line">&gt;   // 把远程的拉取到本地仓库</span><br><span class="line">&gt;   </span><br><span class="line">&gt;   （origin 是本地和远程仓库关联的那个名字，master 是远程仓库的主分支）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>  第二种方法：（推荐使用）</p><blockquote><p>我们创建完成后远程仓库后，可以直接通过 <code>git clone 仓库地址 仓库别名（可以不写）</code> 的方式把远程仓库克隆到本地：</p><p>相当于在本地创建了一个仓库</p><p>也让本地这个仓库和远程仓库保持了连接（名字：origin）</p><p>也把远程仓库现有的内容克隆到了本地</p></blockquote></blockquote><h4 id="2-无分支模式下的团队协作"><a href="#2-无分支模式下的团队协作" class="headerlink" title="2. 无分支模式下的团队协作"></a>2. 无分支模式下的团队协作</h4><blockquote><p>作为开发者每天来的第一件事情或者提交代码之前，都要先pull一下</p><ol><li>【如果远程仓库和本地仓库不是同一个文件同一行代码冲突】</li></ol><blockquote><p>git 会自动依赖于 Fast-forward 模式进行合并</p><p>自动合并后，我们重新提交即可 <code>git add/commit/push</code></p></blockquote><ol start="2"><li><p>【同一个文件的同一行代码冲突】</p><blockquote><p>找到冲突的文件，留下自己想要的代码</p><p>不管之前是否commit过，都要重新的commit，然后push即可</p></blockquote></li></ol></blockquote><h4 id="2-单独分支管理"><a href="#2-单独分支管理" class="headerlink" title="2.单独分支管理"></a>2.单独分支管理</h4><blockquote><ol><li><p>每天第一件事情，就是创建一个dev分支并切换到这个分支上</p></li><li><p>正常的开发代码，把每天开发的任务都先提交到自己的分支上</p></li><li><p>提交到远程仓库上：</p><blockquote><p>把本地自己分支DEV中的内容，合并到本地自己的MASTER 分支下</p><p>把自己本地创建的分支删除（可以不删除，但是有的公司不希望远程中出现分支，或者避免开发人员的分支冲突，提交之前都要把自己创建的分支删除掉）</p></blockquote></li><li><p>和第一种只使用MASTER分支一样了，把本地最新合并的MASTER分支代码，提交到远程仓库的MADTER下，（冲突合并即可）</p></li></ol><ul><li><p>操作分支的基础命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;   $ git branch  //查看现有的分支</span><br><span class="line">&gt;   $ git branch xxx  //创建一个新的分支（当切换到某个分支上的时候，会把当前MASTER分支中的新信息同步到这个分支上）</span><br><span class="line">&gt;   $ git checkout xxx  //切换到某个分支上</span><br><span class="line">&gt;   $ git checkout -b xxx  //创建一个新的分支并且切换到这个分支上</span><br><span class="line">&gt;   $ git branch -D xxx  //删除某个分支（一定要切换到其他分支上才可以删除当前分支）</span><br><span class="line">&gt;   $ git merge xxx  //合并分支内容</span><br><span class="line">&gt;   $ git <span class="built_in">log</span> --graph / --oneline  //再有分支的情况下，可以更清楚地查看分支的提交和合并内容（了解就好）</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="GitHub界面操作"><a href="#GitHub界面操作" class="headerlink" title="GitHub界面操作"></a>GitHub界面操作</h3><h4 id="给别的仓库提交代码修改或建议"><a href="#给别的仓库提交代码修改或建议" class="headerlink" title="给别的仓库提交代码修改或建议"></a>给别的仓库提交代码修改或建议</h4><blockquote><ol><li><p>首先fork别人的仓库</p><blockquote><ul><li>把别人的仓库克隆一份一模一样的，放到自己的账号下，变为自己的仓库（我们平时可以修改自己仓库的源码）</li><li>fork的仓库和别人的原始的仓库会默认建立一些关系，我们可以把自己仓库中和别人不一样的地方，提交给别人，用（pull-request）</li></ul></blockquote></li></ol></blockquote><blockquote><ol start="2"><li><p>把自己fork的仓库，克隆到本地</p><blockquote><ul><li>以后自己有一些新的代码心得，可以自己尝试去修改，然后同步到自己fork的仓库中</li></ul></blockquote></li><li>在github中点击 new pull request</li></ol></blockquote><h3 id="GitHub还可以发布非后台项目"><a href="#GitHub还可以发布非后台项目" class="headerlink" title="GitHub还可以发布非后台项目"></a>GitHub还可以发布非后台项目</h3><blockquote><p>GitHub只提供了web站点的发布，后台项目没有提供必要的环境</p><ul><li><p>把整个仓库作为一个项目发布（这种模式不常用）</p></li><li><p>master是项目代码，gh-pages分支下存储的是项目预览页面的代码</p><blockquote><p>其他人克隆研究的是master分支下的代码</p><p>看介绍页面，看的是gh-pages分支下的代码</p><ol><li>创建一个仓库</li><li>把仓库克隆到本地</li><li>把源码传到master分支上</li><li>在本地仓库中创建gh-pages分支</li><li>把介绍页面放在gh-pages分支下</li><li>把介绍页面的内容上传到github的gh-pages分之下</li></ol><p>访问页面：http://用户名.github.io/仓库名/页面名.html  （如果页面是index可以忽略不写）</p></blockquote></li></ul></blockquote><h2 id="把自己写的纯静态页面项目通过github地址可以看到页面效果"><a href="#把自己写的纯静态页面项目通过github地址可以看到页面效果" class="headerlink" title="把自己写的纯静态页面项目通过github地址可以看到页面效果"></a>把自己写的纯静态页面项目通过github地址可以看到页面效果</h2><blockquote><p>第一步，在github上新建一个仓库，把远程仓库通过 <code>git clone xxx</code>克隆到本地</p><p>第二步，把自己写好的作品放在本地仓库中</p><p>第三步，通过<code>git add -A</code>  , <code>git commit -m</code>, <code>git push origin master</code>  三步操作，把自己的项目同步到远程仓库github中</p><ul><li>以后修改后，重新执行这三步推送即可</li></ul><p>在投简历的时候，把网址 <code>https://用户名.github.io/仓库名</code> 写到简历上就可以访问到页面效果。如果觉得地址太长不好记，也可以通过<a href="https://cli.im" target="_blank" rel="noopener">草料二维码</a> ,来制作自己喜欢的二维码</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GIT基础知识&quot;&gt;&lt;a href=&quot;#GIT基础知识&quot; class=&quot;headerlink&quot; title=&quot;GIT基础知识&quot;&gt;&lt;/a&gt;GIT基础知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;什么是git？&quot;&gt;&lt;a href=&quot;#什么是git？&quot; class=&quot;headerlink&quot; title=&quot;什么是git？&quot;&gt;&lt;/a&gt;什么是git？&lt;/h4&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="http://wudiufo.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://wudiufo.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Node+Git搭建博客</title>
    <link href="http://wudiufo.github.io/2018/12/03/Hexo-Node-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wudiufo.github.io/2018/12/03/Hexo-Node-Git搭建博客/</id>
    <published>2018-12-03T12:40:38.000Z</published>
    <updated>2018-12-12T11:03:52.453Z</updated>
    
    <content type="html"><![CDATA[<p>从零开始搭建博客第一部分，Github注册及Github Pages建立</p><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><h3 id="Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。"><a href="#Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。" class="headerlink" title="Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。"></a><a href="https://hexo.io/zh-cn/docs/#什么是-Hexo？" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://maxiang.io/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</h3><a id="more"></a><h2 id="一：注册Github"><a href="#一：注册Github" class="headerlink" title="一：注册Github"></a>一：注册Github</h2><h3 id="1：打开Github首页，点击Sign-up-进行注册。"><a href="#1：打开Github首页，点击Sign-up-进行注册。" class="headerlink" title="1：打开Github首页，点击Sign up 进行注册。"></a>1：打开<a href="https://github.com/" target="_blank" rel="noopener">Github首页</a>，点击Sign up 进行注册。</h3><hr><h2 id="二：Github-Pages-静态网页建立"><a href="#二：Github-Pages-静态网页建立" class="headerlink" title="二：Github Pages 静态网页建立"></a>二：Github Pages 静态网页建立</h2><h3 id="1：在新页面点击-NEW-按钮，创建属于自己的新仓库。"><a href="#1：在新页面点击-NEW-按钮，创建属于自己的新仓库。" class="headerlink" title="1：在新页面点击 NEW 按钮，创建属于自己的新仓库。"></a>1：在新页面点击 <code>NEW</code> 按钮，创建属于自己的新仓库。</h3><p>  <img src="/2018/12/03/Hexo-Node-Git搭建博客/创建仓库.png" alt="创建仓库"></p><h3 id="2-点击-Code"><a href="#2-点击-Code" class="headerlink" title="2: 点击 Code"></a>2: 点击 <code>Code</code></h3><h3 id="3-点击-Create-new-file"><a href="#3-点击-Create-new-file" class="headerlink" title="3: 点击 Create new file"></a>3: 点击 <code>Create new file</code></h3><h3 id="4-输入-index-html，在-Edit-new-file-书写内容。"><a href="#4-输入-index-html，在-Edit-new-file-书写内容。" class="headerlink" title="4: 输入 index.html，在 Edit new file 书写内容。"></a>4: 输入 <code>index.html</code>，在 <code>Edit new file</code> 书写内容。</h3><h3 id="5：点击-Commit-new-file-进行创建。"><a href="#5：点击-Commit-new-file-进行创建。" class="headerlink" title="5：点击 Commit new file 进行创建。"></a>5：点击 <code>Commit new file</code> 进行创建。</h3><h3 id="6：用浏览器打开-用户名-github-io"><a href="#6：用浏览器打开-用户名-github-io" class="headerlink" title="6：用浏览器打开 用户名.github.io"></a>6：用浏览器打开 <code>用户名.github.io</code></h3><p>Github Pages 静态网页建立完成。</p><hr><h2 id="三：Hexo博客本地环境安装"><a href="#三：Hexo博客本地环境安装" class="headerlink" title="三：Hexo博客本地环境安装"></a>三：Hexo博客本地环境安装</h2><h3 id="1-安装-Node"><a href="#1-安装-Node" class="headerlink" title="1: 安装 Node"></a>1: 安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node</a></h3><h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2: 安装 Git"></a>2: 安装 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></h3><h3 id="4-初始化-Hexo"><a href="#4-初始化-Hexo" class="headerlink" title="4: 初始化 Hexo"></a>4: 初始化 Hexo</h3><ul><li><p>电脑中任选盘符新建一个文件夹作为博客网站的根目录，文件名好不要是中文。</p></li><li><p>空白处右键点击 <code>Git Bash Here</code></p></li></ul><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>等待运行完成后依次输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;新建文件夹的名称&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;新建文件夹的名称&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p><strong>注意:后续的命令均需要在站点目录下（即文件夹内）使用Git Bash运行。</strong></p><p>此时Hexo框架的本地搭建已经完成了。我们来运行一下看看：</p><p>命令行依次输入以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean <span class="comment">#清除浏览器缓存</span></span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>浏览器中打开(<a href="http://locakhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行。" target="_blank" rel="noopener">http://locakhost:4000)或者(127.0.0.1:4000),说明Hexo博客已经成功在本地运行。</a></p><hr><h2 id="四：本地博客发布到Github-Pages"><a href="#四：本地博客发布到Github-Pages" class="headerlink" title="四：本地博客发布到Github Pages"></a>四：本地博客发布到Github Pages</h2><h3 id="1：需要在Github上创建好Github-Pages仓库"><a href="#1：需要在Github上创建好Github-Pages仓库" class="headerlink" title="1：需要在Github上创建好Github Pages仓库"></a>1：需要在Github上创建好Github Pages仓库</h3><h3 id="2：安装将-Hexo-部署到-Git-的插件"><a href="#2：安装将-Hexo-部署到-Git-的插件" class="headerlink" title="2：安装将 Hexo 部署到 Git 的插件"></a>2：安装将 Hexo 部署到 Git 的插件</h3><ul><li><p>在站点目录中运行命令行输入 <code>npm install hexo-deployer-git --save</code></p></li><li><p>后续还要安装各种插件，实现博客的各种功能。等待插件安装完成</p></li></ul><h3 id="3：将本地目录与Github关联起来"><a href="#3：将本地目录与Github关联起来" class="headerlink" title="3：将本地目录与Github关联起来"></a>3：将本地目录与Github关联起来</h3><ul><li>命令行输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span><br></pre></td></tr></table></figure><ul><li><p>1： 这里要输入之前注册Github时的邮箱，例如我之前注册用的是 <a href="mailto:123@qq.com" target="_blank" rel="noopener">123@qq.com</a>，那命令行就输入ssh-keygen -t rsa -C “<a href="mailto:123@qq.com" target="_blank" rel="noopener">123@qq.com</a>“输入后一直回车。</p></li><li><p>2：打开 C:\Users\ 用户名，文件夹内寻找 .ssh 文件夹</p></li><li><p>3：文件夹内会有两个文件，一个id_rsa.pub一个id_rsa，用文本方式打开id_rsa.pub，推荐使用Vscode 打开，复制里面的的内容。</p></li><li><p>4：打开Github 点击右上角的头像 Settings 选择SSH and GPG keys</p></li><li><p>5：点击 <code>New SSH key</code> 将之前复制的内容粘帖到Key的框中。 上面的title 可以随意 点击 <code>Add SSH key</code> 完成添加。</p></li><li><p>6: 此时回到命令行。 试一下是否跟Github连接成功。命令行输入<code>ssh -T git@github.com</code>，弹出的内容输入yes，看到出现Hi <account name="">! You’ve successfully authenticated, but GitHub doesnot provide shell access. 说明链接成功。此处这个<account name="">应该是你Github的用户名。</account></account></p></li></ul><h3 id="4-修改Hexo站点的-config-yml文件"><a href="#4-修改Hexo站点的-config-yml文件" class="headerlink" title="4: 修改Hexo站点的 _config.yml文件"></a>4: 修改Hexo站点的 <code>_config.yml</code>文件</h3><ul><li>进入博客文件夹， 找到 <code>_config.yml</code> 博客的配置文件。以后修改博客的样式或内容会多次用到它。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title:  #网站标题</span><br><span class="line">subtitle: #网站副标题</span><br><span class="line">description: #网站描述 主要用于SEO</span><br><span class="line">keywords: #网站关键词 主要用于SEO</span><br><span class="line">author:  #网站作者</span><br><span class="line">language: zh-CN #网站语言</span><br><span class="line">timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL 网址</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url:  #修改为https://&lt;用户名&gt;.github.io</span><br><span class="line">root: / #如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">permalink: :year/:month/:day/:title/ #文章的永久链接格式</span><br><span class="line">permalink_defaults: #永久链接中各部分的默认值</span><br></pre></td></tr></table></figure><ul><li>在文件底部 deploy 添加如下代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy: #部署部分的设置</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:&lt;Github用户名&gt;/&lt;github用户名&gt;.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><h3 id="5-保存配置，将生成的本地页面上传至Github"><a href="#5-保存配置，将生成的本地页面上传至Github" class="headerlink" title="5: 保存配置，将生成的本地页面上传至Github"></a>5: 保存配置，将生成的本地页面上传至Github</h3><ul><li><p>命令行输入<code>hexo g</code>，此时Hexo会根据配置文件渲染出一套静态页面。</p></li><li><p>完成后输入<code>hexo d</code>，此时会将之前渲染出的一系列文件上传至Github。</p></li></ul><p><strong>注意：也可以直接输入<code>hexo g -d</code>直接完成渲染和上传。</strong></p><p>上传完成后，打开<strong>https://&lt;用户名&gt;.github.io</strong>查看上传的网页。如果页面变成了之前本地调试时的样子，说明上传以及完成了。没变的话查看一下上传时命令行窗口的信息有没有错误信息，没有的话清除一下浏览器缓存试试。</p><hr><h2 id="五：Hexo博客主题安装及Next主题个性化修改"><a href="#五：Hexo博客主题安装及Next主题个性化修改" class="headerlink" title="五：Hexo博客主题安装及Next主题个性化修改"></a>五：Hexo博客主题安装及Next主题个性化修改</h2><p><em>基于Next主题的修改和配置</em></p><p>注意：<strong>博客配置文件</strong>是指博客根目录下的<strong>_config.yml</strong>文件，<strong>主题配置文件</strong>是指<strong>/themes/主题名/路径下的_config.yml</strong>文件，例如我使用的主题为next主题，主题配置文件为_/themes/next/<em>config.yml</em>。</p><h3 id="1：主题选择"><a href="#1：主题选择" class="headerlink" title="1：主题选择"></a>1：主题选择</h3><ul><li>到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Nexo官网主题页</a>选择喜欢的主题。每个主题配置方法略有不同，建议使用流行主题，推荐Next主题，因为我的博客就是用Next主题搭建的。</li></ul><h3 id="2：主题修改"><a href="#2：主题修改" class="headerlink" title="2：主题修改"></a>2：主题修改</h3><h4 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h4><ul><li><p><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题文档页面</a></p></li><li><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Nest主题Github页面</a></p></li><li><p>博客根目录打开命令行输入</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><ul><li>1：安装完成后，打开 博客配置文件 修改theme 主题：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions 扩展</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next #当前主题名称。值为false时禁用主题</span><br></pre></td></tr></table></figure><ul><li>2：修改 主题配置文件 是根目录/themes/next目录下的_config.yml文件。</li></ul><h4 id="修改菜单及创建分类页"><a href="#修改菜单及创建分类页" class="headerlink" title="修改菜单及创建分类页"></a>修改菜单及创建分类页</h4><ul><li><p>1:定位到 Hexo 站点目录下,在命令行输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>新建出标签页</p><p>同样的道理，开启分类页的时候要输入<code>hexo new page categories</code>来新建出分类页。</p></li><li><p>2:设置页面类型：编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>3:修改 主题配置 文件下的menu项：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><h4 id="修改主题风格"><a href="#修改主题风格" class="headerlink" title="修改主题风格"></a>修改主题风格</h4><ul><li>Next自带四种主题风格，可以在主题配置文件搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="设置作者头像"><a href="#设置作者头像" class="headerlink" title="设置作者头像"></a>设置作者头像</h4><ul><li><p>编辑主题配置文件，搜索修改字段 avatar， 值设置成头像的链接地址。可以设置成在线的图片地址。也可以把图片放在本地。</p></li><li><p>本地设置：放置在source/images目录下，设置为url: /images/avatar.jpg</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/cat.jpg</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: false</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure><h4 id="设置作者昵称与站点描述"><a href="#设置作者昵称与站点描述" class="headerlink" title="设置作者昵称与站点描述"></a>设置作者昵称与站点描述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site 网站</span><br><span class="line">title: #网站标题</span><br><span class="line">subtitle: #网站副标题</span><br><span class="line">description: #网站描述 主要用于SEO</span><br><span class="line">keywords: #网站关键词 主要用于SEO</span><br><span class="line">author:  #网站作者</span><br><span class="line">language: zh-CN #网站语言</span><br><span class="line">timezone: #网站时区：Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br></pre></td></tr></table></figure><h4 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h4><ul><li>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：</li></ul><p><img src="/2018/12/03/Hexo-Node-Git搭建博客/设置5种代码高亮主题.png" alt="Alt text"></p><ul><li>编辑主题配置文件，更改 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available values: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure><h4 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h4><ul><li>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Social Links.</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/yourname || github</span><br><span class="line">  E-Mail: mailto:yourname@qq.com || envelope</span><br><span class="line">  #Weibo: https://weibo.com/yourname || weibo</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure><ul><li>设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: <a href="https://www.lixint.me/www.fontawesome.com.cn" target="_blank" rel="noopener">Font Awesome</a> 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><h4 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h4><ul><li>越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Reward</span><br><span class="line"># If true, reward would be displayed in every article by default.</span><br><span class="line"># And you can show or hide one article specially through add page variable `reward: true/false`.</span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  comment: 如果觉得文本对您有帮助，欢迎打赏</span><br><span class="line">  wechatpay: /images/wechat.png</span><br><span class="line">  alipay: /images/zhifubao.jpg</span><br><span class="line">  bitcoin: /images/qq.png</span><br></pre></td></tr></table></figure><p><strong>注意：将保存的图片放到 /source/images/图片名称</strong></p><h5 id="修改打赏字体不闪动"><a href="#修改打赏字体不闪动" class="headerlink" title="修改打赏字体不闪动"></a>修改打赏字体不闪动</h5><ul><li><p>鼠标一指就疯狂抖动。</p></li><li><p>修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数#QR &gt; div:hover p函数即可。css文件注释用/ 和 / 包裹代码即可。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#QR &gt; div:hover p &#123;</span><br><span class="line">  animation: roll 0.1s infinite linear;</span><br><span class="line">  -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">  -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个post-reward.styl文件是跟按钮及图片相关的，如果需要修改关于打赏的其他属性，例如按钮大小，样式，图片大小等，都可以修改post-reward.styl文件实现。</li></ul><h4 id="开启友情链接-or-侧边栏推荐阅读"><a href="#开启友情链接-or-侧边栏推荐阅读" class="headerlink" title="开启友情链接 or 侧边栏推荐阅读"></a>开启友情链接 or 侧边栏推荐阅读</h4><ul><li><p>主题配置文件 中搜索links_title字段，修改links_icon、links_title、links_layout、links四个字段的内容实现自定义风格。</p></li><li><p>link_icon是title前面的图标，用法跟之前的社交链接的图标用法是一样的， 用Font Awesome图标。<br>links_title为标题，如果是作为友情链接使用，可以设置为<br>links_title: 友情链接<br>在links字段设置友情链接名字及链接</p></li><li><p>这个模块的自由度比较高，可以用来放置友情链接，也可以放置推荐阅读。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: Links</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">#links:</span><br><span class="line">  #Title: http://example.com</span><br></pre></td></tr></table></figure><h4 id="hexo生成博文插入图片显示不出来"><a href="#hexo生成博文插入图片显示不出来" class="headerlink" title="hexo生成博文插入图片显示不出来"></a>hexo生成博文插入图片显示不出来</h4><ol><li>把主页配置文件_config.yml 里的<code>post_asset_folder</code>:这个选项设置为true</li><li>在hexo的目录下执行<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>（需要等待一段时间）。</li><li>完成安装后用hexo新建文章 <code>hexo new &quot;文章标题&quot;</code>  的时候会发现_posts目录下面会多出一个和文章名字一样的文件夹。</li><li>只要使用<code>![logo](本地图片测试/logo.jpg)</code>就可以插入图片。其中[]里面不写文字则没有图片标题。</li></ol><h4 id="文章左侧的目录如何弄出来？"><a href="#文章左侧的目录如何弄出来？" class="headerlink" title="文章左侧的目录如何弄出来？"></a>文章左侧的目录如何弄出来？</h4><ol><li>1、首先在你的markdown文件里面要有标题，所谓标题就是例如这种一级标题(#)，二级标题(##)，三级标题(###)的。</li><li>2、在主题的_config文件里面，将toc的enable设置为true就ok了，默认的目录是有序号的，如果你不想要序号，你需要把number置为false 。</li></ol><h4 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h4><ol><li>NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置 文件，设定 rss 字段的值：</li></ol><ul><li>false：禁用 RSS，不在页面上显示 RSS 连接。</li><li>留空：使用 Hexo 生成的 Feed 链接。 你可以需要先安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 插件。</li><li>安装方法：根目录下命令行输入<code>npm install hexo-generator-feed --save</code></li><li>具体的链接地址：适用于已经烧制过Feed的情形。<br>建议直接使用插件，比较省事。</li></ul><h4 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h4><ol><li>在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中分别找一张（16 16与32 32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为favicon16.ico与favicon32.ico。</li><li>把图标放在/themes/next/source/images或者放在根目录的/source/images文件夹里。</li><li>在 主题配置文件 内搜索favicon字段，把 small、medium字段的地址修改为/images/favicon16.ico 与 /images/favicon32.ico。</li></ol><h4 id="实现全站及文章字数统计及阅读时长"><a href="#实现全站及文章字数统计及阅读时长" class="headerlink" title="实现全站及文章字数统计及阅读时长"></a>实现全站及文章字数统计及阅读时长</h4><ol><li>根目录命令运行：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><ol start="2"><li>博客配置文件底部添加如下内容，保存。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1，实现全站及文章数字统计及阅读时长</span><br><span class="line"># 运行 npm install hexo-symbols-count-time --save</span><br><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure><h4 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h4><ol><li>根目录打开命令行，输入如下命令：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace themes/next/source/lib/pace</span><br></pre></td></tr></table></figure><ol start="2"><li>然后主题配置文件搜索pace字段，修改pace: false为pace: true即可开启加载条功能，修改下方的pace-theme字段还可以修改加载条的样式。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-pace</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line">pace_theme: pace-theme-center-simple</span><br><span class="line"># pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure><h4 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h4><ol><li>打开themes/next/source/css/_custom/custom.styl,在里面写下如下代码:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张16 * 16的ico图，放在/source/images/中，修改上述代码中的链接为/images/xxx.ico，如果不放在本地的话，可以把图片放在图床，直接替换链接即可。</p></li><li><p>第一行的链接是默认状态下的鼠标样式，第二行的是鼠标按下时的样式。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(&quot;/images/cat.ico&quot;),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(&quot;&quot;/images/cat2.ico&quot;&quot;),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="实现点击出现桃心-以及-爆炸效果"><a href="#实现点击出现桃心-以及-爆炸效果" class="headerlink" title="实现点击出现桃心 以及 爆炸效果"></a>实现点击出现桃心 以及 爆炸效果</h4><ol><li>在/themes/next/source/js/src下新建文件love.js并填入如下代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>或建一个叫fireworks.js的文件并写入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>打开themes/next/layout/_layout.swig,在上面写下如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.fireworks &amp;&amp; not theme.love %&#125;</span><br><span class="line"> &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; </span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; </span><br><span class="line"> &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.love &amp;&amp; not theme.fireworks %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 主题配置文件 最下方加入如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Fireworks and love</span><br><span class="line">fireworks: true</span><br><span class="line">love: false</span><br></pre></td></tr></table></figure><p><strong>注意：fireworks是爆炸效果，love是心形效果。两个不能同时开。</strong></p><h4 id="修改网页底部的小图标"><a href="#修改网页底部的小图标" class="headerlink" title="修改网页底部的小图标"></a>修改网页底部的小图标</h4><ol><li>在 主题配置文件 搜索footer字段，修改下方的icon字段下的name字段。name字段后的名字是 Font Awesome 图标的名字（不必带 fa- 前缀）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the date when the site was setup.</span><br><span class="line">  # If not defined, current year will be used.</span><br><span class="line">  #since: 2015</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span><br><span class="line">    # `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">    name: user</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: true #animated自动为闪动开关，设置为true后图标会闪动。</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#808080&quot;</span><br></pre></td></tr></table></figure><h4 id="去掉页面底部的强力驱动信息及设置备案信息"><a href="#去掉页面底部的强力驱动信息及设置备案信息" class="headerlink" title="去掉页面底部的强力驱动信息及设置备案信息"></a>去掉页面底部的强力驱动信息及设置备案信息</h4><ul><li>主题配置文件搜索copyright字段，修改powered下的enable字段的true为false即可去掉强力驱动部分的内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># If not defined, will be used `author` from Hexo main config.</span><br><span class="line">  copyright:</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  powered:</span><br><span class="line">    # Hexo link (Powered by Hexo).</span><br><span class="line">    enable: true</span><br><span class="line">    # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line"></span><br><span class="line">  theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: true</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: true</span><br><span class="line">  # -------------------------------------------------------------</span><br><span class="line">  # Beian icp information for Chinese users. In China, every legal website should have a beian icp in website footer.</span><br><span class="line">  # http://www.miitbeian.gov.cn</span><br><span class="line">  beian: #如果博客有备案的话，下方beian字段设置为true，icp后填写备案号。</span><br><span class="line">    enable: false</span><br><span class="line">    icp:</span><br></pre></td></tr></table></figure><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><p><strong>注意：尽量不要添加，耗费资源较大，加载速度非常慢</strong></p><ul><li>1.根目录打开命令行，输入：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest themes/next/<span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure><ul><li>2.主题配置文件搜索canvas-nest字段，enable项设置为true。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: false</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &apos;0,0,255&apos; # RGB values, use &apos;,&apos; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 99 # the number of lines</span><br></pre></td></tr></table></figure><ul><li><p>3.其他配置项说明：</p></li><li><p>color ：线条颜色, 默认: ‘0,0,0’；三个数字分别为(R,G,B)</p></li><li>opacity: 线条透明度（0~1）, 默认: 0.5</li><li>count: 线条的总数量, 默认: 150</li><li>zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</li><li>onmobile：是否在手机端显示。</li></ul><h5 id="增加波浪背景动画"><a href="#增加波浪背景动画" class="headerlink" title="增加波浪背景动画"></a>增加波浪背景动画</h5><ol><li>根目录打开命令行，输入:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three themes/next/<span class="built_in">source</span>/lib/three</span><br></pre></td></tr></table></figure><ol start="2"><li>主题配置文件搜索three_waves字段，设置为true</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Internal version: 1.0.0</span><br><span class="line">  # See: https://github.com/theme-next/theme-next-three</span><br><span class="line">  # Example:</span><br><span class="line">  # three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three.min.js</span><br><span class="line">  # three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/three-waves.min.js</span><br><span class="line">  # canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_lines.min.js</span><br><span class="line">  # canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1.0.0/canvas_sphere.min.js</span><br><span class="line">  three:</span><br><span class="line">  three_waves:</span><br><span class="line">  canvas_lines:</span><br><span class="line">  canvas_sphere:</span><br></pre></td></tr></table></figure><p>three_waves、canvas_lines、canvas_sphere三个的效果各不相同，可以自己尝试一下选一个喜欢的。</p><h4 id="添加静态背景"><a href="#添加静态背景" class="headerlink" title="添加静态背景"></a>添加静态背景</h4><ul><li>打开<code>博客根目录/themes/next/source/css/_custom/custom.styl</code>文件，编辑如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">body &#123; </span><br><span class="line">    background-image: url(/images/background.png); //动图也可以添加</span><br><span class="line">    background-attachment: fixed; // 不随屏幕滚动而滚动</span><br><span class="line">    background-repeat: repeat; // 如果背景图不够屏幕大小则重复铺，改为no-repeat则表示不重复铺</span><br><span class="line">    background-size: contain; // 等比例铺满屏幕</span><br></pre></td></tr></table></figure><h4 id="博客主页自定义样式修改"><a href="#博客主页自定义样式修改" class="headerlink" title="博客主页自定义样式修改"></a>博客主页自定义样式修改</h4><blockquote><p>打开<code>博客根目录/themes/next/source/css/_custom/custom.styl</code>文件:</p><p>用 css 语言修改自己想要的主页样式就可以</p></blockquote><h4 id="在右上角实现fork-me-on-github按钮"><a href="#在右上角实现fork-me-on-github按钮" class="headerlink" title="在右上角实现fork me on github按钮"></a>在右上角实现fork me on github按钮</h4><ol><li>最新的Next主题已经内置了增加右上角的Fork me on github按钮功能，只需要在主题配置文件搜索github_banner字段，去掉前面的#，把||前面的github链接替换成自己的即可。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Follow me on GitHub banner in right-top corner.</span><br><span class="line"># Usage: `permalink || title`</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the title and aria-label name.</span><br><span class="line">github_banner: https://github.com/wudiufo || Follow me on GitHub</span><br></pre></td></tr></table></figure><p>||后的参数为按钮的title，为鼠标指在按钮上时显示的文本。</p><h4 id="增加回到顶部按钮及显示当前浏览进度"><a href="#增加回到顶部按钮及显示当前浏览进度" class="headerlink" title="增加回到顶部按钮及显示当前浏览进度"></a>增加回到顶部按钮及显示当前浏览进度</h4><ol><li>主题配置文件搜索b2t字段，将b2t字段的false修改为true即可，（注意此功能只能用于Pisces和Gemini主题）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  # scrollpercent字段设置为true即可实现当前浏览进度的显示。</span><br><span class="line">  scrollpercent: true</span><br><span class="line"></span><br><span class="line">  # Enable sidebar on narrow view (only for Muse | Mist).</span><br><span class="line">  onmobile: true</span><br></pre></td></tr></table></figure><h4 id="修改顶部菜单与下方信息栏的间隙大小"><a href="#修改顶部菜单与下方信息栏的间隙大小" class="headerlink" title="修改顶部菜单与下方信息栏的间隙大小"></a>修改顶部菜单与下方信息栏的间隙大小</h4><ol><li>主题配置文件搜索offset字段，将offset的像素数大小设置为需要的值，默认为12。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar offset from top menubar in pixels (only for Pisces | Gemini).</span><br><span class="line">  offset: 12</span><br></pre></td></tr></table></figure><h4 id="网站标题栏背景颜色"><a href="#网站标题栏背景颜色" class="headerlink" title="网站标题栏背景颜色"></a>网站标题栏背景颜色</h4><ol><li>打开 themes/next/source/css/_custom/custom.styl ,在里面写下如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 网站标题栏背景颜色</span><br><span class="line">.site-meta &#123;</span><br><span class="line">  background: #FF0033; //修改为自己喜欢的颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为博客加上萌萌的动图"><a href="#为博客加上萌萌的动图" class="headerlink" title="为博客加上萌萌的动图"></a>为博客加上萌萌的动图</h4><ol><li>首先安装插件，根目录命令行输入：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><ol start="2"><li>主题配置文件最下方添加如下代码:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https://github.com/xiazeyu/live2d-widget.js</span><br><span class="line">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><br><span class="line">live2d:</span><br><span class="line">  model:</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    position: right</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -20</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure><p>更多设置可以查看<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">官方文档</a></p><h4 id="添加DaoVoice-实现在线联系"><a href="#添加DaoVoice-实现在线联系" class="headerlink" title="添加DaoVoice 实现在线联系"></a>添加DaoVoice 实现在线联系</h4><ol><li>本功能可以实现在线留言，作者会收到邮件，如果绑定了微信，作者还会收到微信通知。</li><li>首先到<a href="http://dashboard.daovoice.io/get-started?invite_code=e25c1e73" target="_blank" rel="noopener">DaoVoice</a>注册一个Daovioce账号。</li><li>注册完成后会进到DaoCloud，重新访问连接即可。进到Daovoice面板，点击左侧边栏的应用设置– 安装到网站。在下方的代码中会看到app_id: “xxxx”字样。</li><li>打开 themes/next/layout/_partials/head/head.swig 文件中最下方加入如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>在主题配置文件 _config.yml，添加如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># DaoVoice </span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure><ol start="6"><li><p>回到Daovoice控制面板，点击聊天设置可以对聊天图标的颜色及位置进行设置。</p></li><li><p>最后到右上角选择管理员，微信绑定，可以绑定你的微信号。这样收到消息后可以通过小程序进行回复。</p></li></ol><h4 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h4><ol><li>打开\themes\next\source\css_custom\custom.styl,加入如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>可以自行修改代码来修改阴影效果</li></ol><h4 id="增加本地搜索功能"><a href="#增加本地搜索功能" class="headerlink" title="增加本地搜索功能"></a>增加本地搜索功能</h4><ol><li>首先安装插件，根目录命令行输入:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑博客配置文件，新增以下内容到任意位置：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><ol start="3"><li>主题配置文件搜索local_search字段，设置enable为true</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h4 id="添加图片懒加载"><a href="#添加图片懒加载" class="headerlink" title="添加图片懒加载"></a>添加图片懒加载</h4><ul><li>博客根目录打开命令输入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-jquery-lazyload themes/next/<span class="built_in">source</span>/lib/jquery_lazyload</span><br></pre></td></tr></table></figure><ul><li>然后在配置文件中搜索 lazyload,将其修改为true<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Added switch option for separated repo in 6.0.0.</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-jquery-lazyload</span><br><span class="line">lazyload: true</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h4><h5 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h5><ol><li>在<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>的官网上注册账号。</li><li>在<a href="https://livere.com/insight/myCode" target="_blank" rel="noopener">此处</a>获取data-uid。</li><li>打开NexT主题的配置文件—config中，搜索livere_uid，将livere_uid前面的#号去掉，将id填写到livere_uid：后面。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">#livere_uid: your uid</span><br></pre></td></tr></table></figure><h4 id="代码块复制功能"><a href="#代码块复制功能" class="headerlink" title="代码块复制功能"></a>代码块复制功能</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>为了提高博客代码块的用户体验，仅仅代码高亮还不行，最好还能一键复制代码。故此文将讲述Hexo Next主题博客的代码块复制功能配置。</p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>需要下载 <a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js</a></p><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">主页</a></li><li><a href="https://github.com/zenorocha/clipboard.js" target="_blank" rel="noopener">Github</a></li></ul><p>提供下载:（推荐用这个）</p><ul><li><a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.js" target="_blank" rel="noopener">clipboard.min.js</a></li></ul><ol><li>将下载的文件存到如下目录：（相对目录为工程目录，没有目录则创建）</li></ol><blockquote><p>.\themes\next\source\lib\zclip\clipboard.min.js</p></blockquote><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><ol start="2"><li>新建文件 <code>custom.js</code>，目录如下：（相对目录为工程目录）</li></ol><blockquote><p>\themes\next\source\js\src\custom.js</p></blockquote><p>修改 <code>custom.js</code>为如下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此函数用于创建复制按钮</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCopyBtns</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $codeArea = $(<span class="string">"figure table"</span>);</span><br><span class="line">    <span class="comment">//查看页面是否具有代码区域，没有代码块则不创建 复制按钮</span></span><br><span class="line">    <span class="keyword">if</span> ($codeArea.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//复制成功后将要干的事情</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">changeToSuccess</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">             $imgOK = $(<span class="string">"#copyBtn"</span>).find(<span class="string">"#imgSuccess"</span>);</span><br><span class="line">                <span class="keyword">if</span> ($imgOK.css(<span class="string">"display"</span>) == <span class="string">"none"</span>) &#123;</span><br><span class="line">                    $imgOK.css(&#123;</span><br><span class="line">                        opacity: <span class="number">0</span>,</span><br><span class="line">                        display: <span class="string">"block"</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    $imgOK.animate(&#123;</span><br><span class="line">                        opacity: <span class="number">1</span></span><br><span class="line">                    &#125;, <span class="number">1000</span>);</span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.animate(&#123;</span><br><span class="line">                            opacity: <span class="number">0</span></span><br><span class="line">                        &#125;, <span class="number">2000</span>);</span><br><span class="line">                    &#125;, <span class="number">2000</span>);</span><br><span class="line">                    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        $imgOK.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</span><br><span class="line">                    &#125;, <span class="number">4000</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮</span></span><br><span class="line">        <span class="comment">//值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码)</span></span><br><span class="line">        $(<span class="string">".post-body"</span>).before(<span class="string">'&lt;div id="copyBtn" style="opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em"&gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'</span>);</span><br><span class="line">        <span class="comment">//创建 复制 插件，绑定单机时间到 指定元素，支持JQuery</span></span><br><span class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'#copyBtn'</span>, &#123;</span><br><span class="line">            target: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//返回需要复制的元素内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            isSupported: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//支持复制内容</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//复制成功事件绑定</span></span><br><span class="line">        clipboard.on(<span class="string">'success'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//清除内容被选择状态</span></span><br><span class="line">                e.clearSelection();</span><br><span class="line">                changeToSuccess(e);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//复制失败绑定事件</span></span><br><span class="line">        clipboard.on(<span class="string">'error'</span>,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'Action:'</span>, e.action);</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">'Trigger:'</span>, e.trigger);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果</span></span><br><span class="line">        $(<span class="string">"#copyBtn"</span>).hover(</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).stop();</span><br><span class="line">                $(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).animate(&#123;</span><br><span class="line">                    opacity: <span class="number">0</span></span><br><span class="line">                &#125;, <span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//感应鼠标是否在代码区</span></span><br><span class="line">$(<span class="string">"figure"</span>).hover(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------鼠标活动在代码块内</span></span><br><span class="line">        <span class="comment">//移除之前含有复制标志代码块的 copyFlag</span></span><br><span class="line">        $(<span class="string">"[copyFlag]"</span>).removeAttr(<span class="string">"copyFlag"</span>);</span><br><span class="line">        <span class="comment">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></span><br><span class="line">        $(<span class="keyword">this</span>).find(<span class="string">".code"</span>).attr(<span class="string">"copyFlag"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取复制按钮</span></span><br><span class="line">        $copyBtn = $(<span class="string">"#copyBtn"</span>);</span><br><span class="line">        <span class="keyword">if</span> ($copyBtn.lenght != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//获取到按钮的前提下进行一下操作</span></span><br><span class="line">            <span class="comment">//停止按钮动画效果</span></span><br><span class="line">            <span class="comment">//设置为 显示状态</span></span><br><span class="line">            <span class="comment">//修改 复制按钮 位置到 当前代码块开始部位</span></span><br><span class="line">            <span class="comment">//设置代码块 左侧位置</span></span><br><span class="line">            $copyBtn.stop();</span><br><span class="line">            $copyBtn.css(<span class="string">"opacity"</span>, <span class="number">0.8</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"display"</span>, <span class="string">"block"</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"top"</span>, <span class="built_in">parseInt</span>($copyBtn.css(<span class="string">"top"</span>)) + $(<span class="keyword">this</span>).offset().top - $copyBtn.offset().top + <span class="number">3</span>);</span><br><span class="line">            $copyBtn.css(<span class="string">"left"</span>, -$copyBtn.width() - <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//-------鼠标离开代码块</span></span><br><span class="line">        <span class="comment">//设置复制按钮可见度 2秒内到 0</span></span><br><span class="line">        $(<span class="string">"#copyBtn"</span>).animate(&#123;</span><br><span class="line">            opacity: <span class="number">0</span></span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//页面载入完成后，创建复制按钮</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCopyBtns();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ol start="3"><li>新建文件 <code>custom.swig</code> ，目录：.\themes\next\layout_custom\custom.swig（相对目录为工程目录）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/lib/zclip/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/custom.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>修改文件 <code>_layout.swig</code> ，目录：<code>\themes\next\layout\_layout.swig</code>（相对目录为工程目录）</li></ol><p>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% include &apos;_third-party/math/mathjax.swig&apos; %&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &#123;% include &apos;_custom/custom.swig&apos; %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>向文件中 <code>&lt;/body&gt;</code> 前一行插入文件引用，如第 15 行效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_custom/custom.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>在主题配置文件<code>_config.yml</code>中找到以下代码：</p><p>将enable修改为true，show_result修改为true</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Manual define the border radius in codeblock</span><br><span class="line">  # Leave it empty for the default 1</span><br><span class="line">  border_radius:</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: true</span><br></pre></td></tr></table></figure><h2 id="六：Hexo撰写文章"><a href="#六：Hexo撰写文章" class="headerlink" title="六：Hexo撰写文章"></a>六：Hexo撰写文章</h2><h3 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h3><ol><li>在站点文件夹中打开git bash，输入如下命令创建文章，其中title为文章的标题：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"title"</span></span><br></pre></td></tr></table></figure><ul><li>此时就会在source/_post文件夹中创建了一个文件，命名为：title.md，而这个文件就是将要发布到网站上的原始文件，记录文章内容，以下我们将要在这个文件中写下我们的第一篇博客</li></ul><h3 id="二、编写文章（基于Markdown）"><a href="#二、编写文章（基于Markdown）" class="headerlink" title="二、编写文章（基于Markdown）"></a>二、编写文章（基于Markdown）</h3><ol><li><p>推荐大家一款简洁易用的markdown编辑器 <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>,点击下载。</p></li><li><p><a href="https://maxiang.io/" target="_blank" rel="noopener">Markdown语法及在线编辑</a></p></li></ol><h4 id="1-模板设置"><a href="#1-模板设置" class="headerlink" title="1.模板设置"></a>1.模板设置</h4><ul><li>当我们使用命令 hexo new “title” 去创建我们的文章时，Hexo会根据/scaffolds/post.md文件对新建文件进行初始化，换言之，/scaffolds/post.md文件就是创建新文章的模板，所以我们可以修改它来适应自己的写作习惯，一个简单的示例如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="2-头部设置"><a href="#2-头部设置" class="headerlink" title="2.头部设置"></a>2.头部设置</h4><ul><li>在博客文章的开头会有对文章的说明文字，叫做文章头部，文章的头部除了可以设置文章标题、书写日期等基础信息外，还可以对文章添加标签、分类等，一个简单的示例如下:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Title #标题</span><br><span class="line">date: YYYY-MM-DD HH:MM:SS #文件建立日期</span><br><span class="line">tags: #标签（不适用于分页）</span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">categories: #分类（不适用于分页）</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">layout: #布局</span><br><span class="line">updated: YYYY-MM-DD HH:MM:SS #文件更新日期</span><br><span class="line">comments：true #开启文章的评论功能</span><br><span class="line">permalink：覆盖文章网址</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><strong>注意，属性和属性值之间必须有一个空格，否则会解析错误</strong></p><h4 id="3-首页显示"><a href="#3-首页显示" class="headerlink" title="3.首页显示"></a>3.首页显示</h4><ul><li><p>1.在Hexo框架博客的首页会显示文章的内容（默认显示文章的全部内容），如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简，只需在文章中使用 <code>&lt;!--more--&gt;</code>标志，表示只会显示标志前面的内容</p></li><li><p>2.推荐使用：</p><p>在主题配置文件中找到<code>auto_excerpt</code>，将enable变为true，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150 #长度可自由调节</span><br></pre></td></tr></table></figure></li></ul><h3 id="三，顶部统计每篇文章阅读次数"><a href="#三，顶部统计每篇文章阅读次数" class="headerlink" title="三，顶部统计每篇文章阅读次数"></a>三，顶部统计每篇文章阅读次数</h3><p>在主题配置文件中查找<code>busuanzi_count</code>,将其按照如下方式修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Show Views/Visitors of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><h2 id="七，生成sitemap站点地图"><a href="#七，生成sitemap站点地图" class="headerlink" title="七，生成sitemap站点地图"></a>七，生成sitemap站点地图</h2><p><strong>百度+谷歌都无法搜索到我的博客 不能忍</strong></p><h3 id="1-先确认博客是否被收录"><a href="#1-先确认博客是否被收录" class="headerlink" title="1.先确认博客是否被收录"></a>1.先确认博客是否被收录</h3><ul><li><p>在百度或者谷歌上面输入下面格式来判断，如果能搜索到就说明被收录，否则就没有。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:写你要搜索的域名 # site:wudiufo.github.io</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-创建站点地图文件"><a href="#2-创建站点地图文件" class="headerlink" title="2.创建站点地图文件"></a>2.创建站点地图文件</h3><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><ul><li>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><ul><li><p>在博客根目录的_config.yml中添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><ul><li><p>执行以下命令，编译你的博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></li><li><p>在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了</p></li><li>执行 <code>hexo s</code> 看站点地图是否生成</li></ul></li></ul><h3 id="3-让百度-360和谷歌收录我们的博客"><a href="#3-让百度-360和谷歌收录我们的博客" class="headerlink" title="3.让百度,360和谷歌收录我们的博客"></a>3.让百度,360和谷歌收录我们的博客</h3><h4 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h4><p>在百度和360，谷歌上分别搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:写你要搜索的域名 # site:wudiufo.github.io</span><br></pre></td></tr></table></figure><ul><li>其中的域名换成你的博客域名，如果此前没有进行过操作，应该是搜不到的，并且搜索出来的结果含有搜索引擎提交入口</li><li><p>分别进入搜索引擎提交入口，添加域名，选择验证网站，有3种验证方式，本文推荐采用HTML标签验证</p></li><li><p>这里演示<a href="https://link.jianshu.com/?t=http://zhanzhang.baidu.com/dashboard/index" target="_blank" rel="noopener">百度站长平台</a>  </p></li></ul><p>打开Hexo主题配置文件，添加以下两行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">google_site_verification: #索引擎提供给你的HTML标签的content后的字符串</span><br><span class="line">baidu-site-verification: #索引擎提供给你的HTML标签content后的字符串</span><br></pre></td></tr></table></figure><p>还有其他搜索引擎，自行添加</p><p>然后运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>然后点击验证，就可以通过验证了</p><h3 id="4，百度自动推送"><a href="#4，百度自动推送" class="headerlink" title="4，百度自动推送"></a>4，百度自动推送</h3><ul><li><p>将<code>主题配置文件</code>中的<code>baidu_push</code>设置为<code>true</code>，然后将<code>/next/layout/_scripts</code>文件夹下面的<code>baidu-push.swig</code>文件中的 `</p><script type="text/javascript" async src="//push.zhanzhang.baidu.com/push.js"></script><p>` 替换为百度提供的自动推送代码,如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-谷歌收录我们的博客"><a href="#5-谷歌收录我们的博客" class="headerlink" title="5.谷歌收录我们的博客"></a>5.谷歌收录我们的博客</h3><p>谷歌操作比较简单，就是向<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google站长工具</a>提交sitemap<br>登录Google账号，添加了站点验证通过后，选择站点，之后在<strong>抓取</strong>——<strong>站点地图</strong>——<strong>添加/测试站点地图</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从零开始搭建博客第一部分，Github注册及Github Pages建立&lt;/p&gt;
&lt;h2 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hexo？&quot;&gt;&lt;/a&gt;什么是 Hexo？&lt;/h2&gt;&lt;h3 id=&quot;Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&quot;&gt;&lt;a href=&quot;#Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&quot; class=&quot;headerlink&quot; title=&quot;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/#什么是-Hexo？&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;https://maxiang.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/h3&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://wudiufo.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo+Node+Git搭建博客" scheme="http://wudiufo.github.io/tags/Hexo-Node-Git%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wudiufo.github.io/2018/12/02/hello-world/"/>
    <id>http://wudiufo.github.io/2018/12/02/hello-world/</id>
    <published>2018-12-02T14:47:52.248Z</published>
    <updated>2018-12-02T14:47:52.249Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
